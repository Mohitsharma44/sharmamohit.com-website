<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mohit Sharma on Mohit Sharma</title>
    <link>/</link>
    <description>Recent content in Mohit Sharma on Mohit Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Mohit Sharma</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UoController</title>
      <link>/project/uocontroller/</link>
      <pubDate>Tue, 12 Dec 2017 23:35:07 -0500</pubDate>
      
      <guid>/project/uocontroller/</guid>
      <description>&lt;p&gt;The aim of this project is to become a central control unit (CCU) to interface
with all the UO Imaging (and more) devices. The idea is that the cameras,
Pan and Tilt mechanisms, AutoFocussing systems and so on should
be controllable from a remote location via a simple CLI tool (with
auto-correct feature).&lt;/p&gt;

&lt;p&gt;The code for this project is located in my Github repo thoughtfully named &amp;ndash;
&lt;a href=&#34;https://github.com/Mohitsharma44/UOController&#34; target=&#34;_blank&#34;&gt;UOController&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
The following diagram should make the idea more clear:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sharmamohit.com/img/uocontroller/uocontroller_flow.png&#34; alt=&#34;uocontroller_flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s I want is that the cameras / equipments marked as &lt;code&gt;South&lt;/code&gt; and &lt;code&gt;North&lt;/code&gt;
should be controllable via this CLI from either Admin&amp;rsquo;s workstation or from
Admin&amp;rsquo;s any trusted device (over VPN).&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Currently this module interacts and controls that Thermographic FLIR A320 cameras
using custom &lt;a href=&#34;https://github.com/Mohitsharma44/pyfrac/blob/master/pyfrac/acquire/capture.py&#34; target=&#34;_blank&#34;&gt;A320 library&lt;/a&gt;
that is a part of my &lt;a href=&#34;https://sharmamohit.com/project/pyfrac&#34; target=&#34;_blank&#34;&gt;PyFRAC&lt;/a&gt; project
and with the &lt;a href=&#34;https://sharmamohit.com/projects/cuic&#34; target=&#34;_blank&#34;&gt;CUIC&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Since I have written most of the other camera&amp;rsquo;s driving modules in C/ C++, I am using
&lt;code&gt;rabbitmq-c&lt;/code&gt;, a C library for rabbitmq to serve the RPC calls initiated by this CLI.
More information on this setup can be found in the &lt;a href=&#34;https://sharmamohit.com/projects/cuic&#34; target=&#34;_blank&#34;&gt;CUIC&lt;/a&gt;
project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This module requires rabbitmq since it uses that as a broker. To install rabbitmq,
follow these steps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;Downloading erlang&amp;quot;
wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb

echo &amp;quot;Installing erlang-solutions&amp;quot;
sudo dpkg -i erlang-solutions_1.0_all.deb

echo &amp;quot;Updating package manager&amp;quot;
sudo apt-get update

echo &amp;quot;Installing erlang and erlang-nox&amp;quot;
sudo apt-get install erlang erlang-nox

echo &amp;quot;Adding rabbitmq to sources.list&amp;quot;
echo &#39;deb http://www.rabbitmq.com/debian/ testing main&#39; | sudo tee /etc/apt/sources.list.d/rabbitmq.list
wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -

echo &amp;quot;Updating package manager again&amp;quot;
sudo apt-get update
sudo apt-get install rabbitmq-server

echo &amp;quot;Adding Rabbitmq management web plugin and setting up default admin:admin user&amp;quot;
sudo rabbitmqctl add_user admin admin
sudo rabbitmqctl set_user_tags admin administrator
sudo rabbitmqctl set_permissions -p / admin &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*‚Äù
sudo rabbitmq-plugins enable rabbitmq_management

echo &amp;quot;Starting rabbitmq server&amp;quot;
sudo systemctl enable rabbitmq-server
sudo systemctl start rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(maybe I should just write an Ansible playbook for all this&amp;hellip; Hmm&amp;hellip;)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>cuic</title>
      <link>/project/cuic/</link>
      <pubDate>Tue, 12 Dec 2017 21:42:55 -0500</pubDate>
      
      <guid>/project/cuic/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This project is aimed at developing a streamlined framework/pipeling for using
different cameras and their different SDKs (Software Development Kits) for
performing different operations on the cameras.&lt;/p&gt;

&lt;p&gt;Most high performance SDKs provided by camera manufacturers is written
in C or sometimes in C++. The aim of this project is to use the different SDKs
that are in use at NYU CUSP and write a complete multi-threaded application
for performing the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connecting to the camera(s).&lt;/li&gt;
&lt;li&gt;Changing the camera and image configurations programmatically (such as exposure,
gain, focus, framerate, etc).&lt;/li&gt;
&lt;li&gt;Capturing the image and buffering it to the RAM (tmpfs / ramfs).&lt;/li&gt;
&lt;li&gt;Having the &amp;ldquo;image-saving&amp;rdquo; be performed in a separate thread.&lt;/li&gt;
&lt;li&gt;Have fail-safe techniques to make sure that in rare occurences, if the camera
disconnects or the application crashes, it can come back automatically once.
the link to the camera is re-established (which may require physical intervention)&lt;/li&gt;
&lt;li&gt;Images be timestamped with high precision.&lt;/li&gt;
&lt;li&gt;Should be able to save 1 RAW (bayer GB8 or similar)
image every 10 seconds (at-least).&lt;/li&gt;
&lt;li&gt;System should be able to &amp;lsquo;plug-in&amp;rsquo; to the existing parallel
&lt;a href=&#34;https://sharmamohit.com/project/cuip&#34; target=&#34;_blank&#34;&gt;CUIP - Cusp Urban Image Processing Pipeline&lt;/a&gt; project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing these may get a little complicated in C, so writing a C++ (11 or higher)
Python wrapper (or a mix of both) is required.&lt;/p&gt;

&lt;h2 id=&#34;current-state&#34;&gt;Current State&lt;/h2&gt;

&lt;p&gt;The CUIC project is currently hosted on &lt;a href=&#34;https://github.com/Mohitsharma44/cuic&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;
and is being actively developed using two SDKs at the time of writing
Following are the SDK&amp;rsquo;s currently in use:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SDK&lt;/th&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Cameras Driven&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pleora&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://supportcenter.pleora.com/s/article/eBUS-SDK-Software-and-Release-Notes-Dwnload&#34; target=&#34;_blank&#34;&gt;https://supportcenter.pleora.com/s/article/eBUS-SDK-Software-and-Release-Notes-Dwnload&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Baumer LXG-200C (x2)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Teledyne&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.teledynedalsa.com/imaging/support/downloads/package/132/&#34; target=&#34;_blank&#34;&gt;https://www.teledynedalsa.com/imaging/support/downloads/package/132/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Teledyne Dalsa Genie TS-C4096&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CEmergent*&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://emergentvisiontec.com/products/esdk/&#34; target=&#34;_blank&#34;&gt;https://emergentvisiontec.com/products/esdk/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Emergent HS12000C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*Another similar project &lt;a href=&#34;https://github.com/Mohitsharma44/CEmergent&#34; target=&#34;_blank&#34;&gt;CEmergent&lt;/a&gt; is
hosted on Github as well which deals with a special SFP+ connectivity based
scientific camera.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;working&#34;&gt;Working&lt;/h2&gt;

&lt;h3 id=&#34;using-pleora&#34;&gt;Using_Pleora&lt;/h3&gt;

&lt;p&gt;Using the pleora SDK is pretty straight-forward.
This module has libconfig as a dependency on top of having pleora SDK. This
is to assist in making the configuration file for the camera more readable
as it follows the generic json-like format.&lt;/p&gt;

&lt;p&gt;Any configuration setting should be added to the &lt;code&gt;configuration.cfg&lt;/code&gt; file and
must be placed at &lt;code&gt;/opt/pleora/ebus_sdk/Ubuntu-14.04-x86_64/share/samples/cuic/using_pleora/src/&lt;/code&gt;*.
This is just a silly way of making sure you have installed pleora SDK.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
When the module is started for the first time, it reads out the camera
settings from the camera&amp;rsquo;s memory and dumps it to the file (whose name is
same as the camera&amp;rsquo;s MAC address.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
One of the other dependency for this project is &lt;a href=&#34;https://github.com/gabime/spdlog&#34; target=&#34;_blank&#34;&gt;spdlog&lt;/a&gt;
which is used for multi-threaded logging (to console and to the file). By default
all the logs are written to &lt;code&gt;/var/log/cuic/cuicCapture&lt;/code&gt; and gets backed-up daily
at midnight.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
To transfer the images securely, we use lsyncd (live Syncing Daemon) which basically
monitors a particular directory (hardcoded as /mnt/ramdisk in the cpp code which is
basically a tmpfs of 1GB size) for new images and uses an existing &lt;code&gt;ssh&lt;/code&gt; tunnel
to transfer those images using &lt;code&gt;rsync&lt;/code&gt; to a remote target/ server.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Utils&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make sure the code keeps running and is resilient to crashes, we use supervisord,
a python process control system module for restarting the cuic module in case
of a crash, retry in case of network issues and number of times to retry starting
the cuic module in case there is a system issue. We also use &lt;code&gt;crontab&lt;/code&gt; for starting
and stopping our processes (via supervisor) at certain times to take images.&lt;/p&gt;

&lt;p&gt;The configuration for lsyncd and supervisord can be found in the &lt;a href=&#34;https://github.com/Mohitsharma44/cuic/tree/master/using_pleora/utils&#34; target=&#34;_blank&#34;&gt;utils&lt;/a&gt; subdirectory&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;*cuic  is where you clone this repo&lt;/li&gt;
&lt;li&gt;Make sure you have write permissions in &lt;code&gt;/var/log/cuic/&lt;/code&gt; for logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;using-teledyne&#34;&gt;Using_Teledyne&lt;/h3&gt;

&lt;p&gt;Unlike Pleora SDK which can work with any camera manufacturer (as long as you buy
a license from them), teledyne SDK only works with the cameras that are manufactured
by Teledyne Dalsa. Moreover their support is primarily for Windows based Sapera SDK.
However, they do provide a .. what I would call a .. &lt;code&gt;partially documented&lt;/code&gt; SDK
for linux distribution. So getting this thing up and running quite frankly took me
a bit of time. Their demo code infact refused to compile on my Ubuntu Linux 16.04
(running kernel 4.10) and required some modifications.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Anyway, the major plus of using this SDK is that it doesn&amp;rsquo;t lock up the camera
after let&amp;rsquo;s say a seg fault or a memory reference error. This is something that is
horrible with Pleora or CEmergent for that matter. Unlike the other SDKs, the teledyne
dalsa SDK releases the camera in case the code crashes and the camera can be
re-connected to the daemon in ~10-20 seconds (after the code that was using the
camera crashes). So thumbs up to those guys!!&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
The current version of the &lt;a href=&#34;https://github.com/Mohitsharma44/cuic/tree/master/using_teledyne/README.md&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt;
file can be used to setup the system and get things up and running. One major thing
to remember is that this module uses &lt;a href=&#34;https://github.com/SergiusTheBest/plog&#34; target=&#34;_blank&#34;&gt;plog&lt;/a&gt;
logging library (I just wanted to test this library&amp;rsquo;s speed..
its good but does miss the logs at times when the logs are flowing at speed of ~1/sec)
Also, this module strictly uses CmakeLists files for compiling (for ease of portability)
so your project should follow this structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;- capture_code
  | - cpp file
  | - archdefs.mk
  | - corenv.h
  | - CMakeLists.txt
  [] - Makefile*
  | - cmake
    | - Modules
      | - ...
- common
  | - GevUtils.c
  | - SapExUtil.c
  | - SapExUtil.h
  | - SapX11Util.h
  | - X_Display_utils.c
  | - X_Display_utils.h
- plog
  | - &amp;lt;...&amp;gt;.h
  | - ...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
A major difference between this module vs all the others is that
this one is a prototype for using AMQP (Advanced Messaging Queue Protocol)
to serve the RPC (Remote Procedure Call) requests over the network
so that the cameras can be interfaced with the
&lt;a href=&#34;https://github.com/Mohitsharma44/UOController&#34; target=&#34;_blank&#34;&gt;UOController&lt;/a&gt; commandline tool (
and hopefully someday using chatbot or voice command)&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This code also requires &lt;code&gt;boost&lt;/code&gt; library, rabbitmq and &lt;code&gt;rabbitmq-c&lt;/code&gt; (the C implementation
of the &lt;code&gt;rabbitmq&lt;/code&gt;). The &lt;code&gt;boost&lt;/code&gt; library needs to be installed manually with
&lt;code&gt;system&lt;/code&gt; and &lt;code&gt;chrono&lt;/code&gt; libraries. &lt;code&gt;rabbitmq-c&lt;/code&gt; is installed by the &lt;code&gt;cmake&lt;/code&gt; module&lt;/p&gt;

&lt;p&gt;For more installation instructions, refer the &lt;a href=&#34;https://github.com/Mohitsharma44/cuic/blob/master/using_teledyne/README.md&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt;
file&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Execution Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To run the code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repo and create a &lt;code&gt;build&lt;/code&gt; directory inside &lt;code&gt;using_teledyne&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;build&lt;/code&gt; and  run &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If everything succeded, then run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, execute &lt;code&gt;./capture_demo/genicam_cpp_demo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To send commands via rabbitmq broker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;amqpcpp_example&lt;/code&gt; and create a &lt;code&gt;build&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;build&lt;/code&gt; and run &lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If everything succeded, then run &lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, execute &lt;code&gt;./rpc_client 5&lt;/code&gt; (to take 5 images)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rpc_client (well, the capture code actually) supports following commmand-line
arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;a&amp;rsquo;: To abort any function&lt;/li&gt;
&lt;li&gt;&amp;rsquo;?&amp;rsquo;: To print help function / return help function&lt;/li&gt;
&lt;li&gt;&amp;rsquo;t&amp;rsquo;: To see if your machine supports turbo-mode&lt;/li&gt;
&lt;li&gt;&amp;lsquo;g&amp;rsquo;: for capturing images forever at max speed (fps)&lt;/li&gt;
&lt;li&gt;&amp;rsquo;s&amp;rsquo;: To stop acquiring images&lt;/li&gt;
&lt;li&gt;&amp;lsquo;q&amp;rsquo;: To quit&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&amp;lt;integer&amp;gt;&amp;lsquo;: To capture that many images at max speed (fps)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT and Microservices</title>
      <link>/tutorials/gx-6004c/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/gx-6004c/</guid>
      <description>

&lt;p&gt;A 3 - week course on Advanced Topics in Urban Informatics.&lt;/p&gt;

&lt;h3 id=&#34;topics-covered&#34;&gt;Topics Covered:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Internet of Things&lt;/li&gt;
&lt;li&gt;Different communication models&lt;/li&gt;
&lt;li&gt;Networking Fundamentals&lt;/li&gt;
&lt;li&gt;Developing a fully-functional IoT module&lt;/li&gt;
&lt;li&gt;Introduction to VPN networking&lt;/li&gt;
&lt;li&gt;Demo of a server that handles data and status updates from IoT devices&lt;/li&gt;
&lt;li&gt;Setting up a Lab for IoT client and server communication&lt;/li&gt;
&lt;li&gt;Performing temperature sensing using IoT devices and uploading data to the server&lt;/li&gt;
&lt;li&gt;Realtime plotting of temperature data using websockets&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;//slides.com/mohitsharma44/cusp-gx-6004-c/embed&#34; width=&#34;576&#34; height=&#34;420&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The github repository for this course can be accessed here:&lt;br/&gt;
&lt;a href=&#34;https://github.com/Mohitsharma44/CUSP-GX-6004-C&#34; target=&#34;_blank&#34;&gt;https://github.com/Mohitsharma44/CUSP-GX-6004-C&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>00-00 Welcome</title>
      <link>/tutorials/ucsl/00-00-welcome/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/00-00-welcome/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Welcome&#34;&gt;Welcome&lt;a class=&#34;anchor-link&#34; href=&#34;#Welcome&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Welcome to &lt;strong&gt;U&lt;/strong&gt;rban &lt;strong&gt;C&lt;/strong&gt;omputing &lt;strong&gt;S&lt;/strong&gt;kills &lt;strong&gt;L&lt;/strong&gt;ab. This course is a pre-requisite for your Masters program in Applied Urban Science and Informatics, which immediately begs the question: what is Urban Science? It is actually hard to define Urban Science especially given how ubiquitous the term has become. In my mind, Urban Science is an emerging domain of research at the intersection of interdisciplinary sciences that seeks to exploit the large-scale data, from a variety of sources, to understand and address urban challenges.&lt;/p&gt;
&lt;p&gt;With this in mind, I would encourage you to think of Urban informatics not as a new domain of knowledge to learn, but a new set of skills that you can apply within your current area of expertise. By the end of this bootcamp, I hope to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get you familiar with Python programming language (that will be used throughout your Masters course)&lt;/li&gt;
&lt;li&gt;Introduce you to scientific tools for performing data analysis&lt;/li&gt;
&lt;li&gt;Exemplify efficient way of storing and visualizing the data&lt;/li&gt;
&lt;li&gt;Give you a demo hands-on experience for developing solutions in real-world&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Target-Audience&#34;&gt;Target Audience&lt;a class=&#34;anchor-link&#34; href=&#34;#Target-Audience&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;UCSL bootcamp was an answer to the most common student question -- &#34;How should I learn Python?&#34;. However, slowly we realized the folks didn&#39;t want to learn Python &#34;programming&#34; &lt;em&gt;per se&lt;/em&gt; but wanted to learn it as a tool for performing data analysis and visualization.&lt;/p&gt;
&lt;p&gt;This bootcamp has been modified and customized to use Python and its powerful data science ecosystem &lt;strong&gt;as a tool for data-intensive and computational science&lt;/strong&gt;. Thus, this Lab in no way aims to be a comprehensive introduction to Python or programming language in general. We will brush over the Python&#39;s syntax, Built-in Types and Datastructures, control flow statements and functions before jumping into the scientific modules that we use for performing data analysis&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The goal is to create a basic understanding about the language that you will be using as a tool to explore the data science stack which includes modules like Numpy, Matplotlib and Pandas. As such this Lab does not expect you to have any prior experience with using Python language or performing data analysis.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Using-this-Lab&#34;&gt;Using this Lab&lt;a class=&#34;anchor-link&#34; href=&#34;#Using-this-Lab&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The lab requires Python and scientific packages installed. To make things easier, NYU CUSP has set up an environment where you can login with your net id &amp;amp; password and use the packages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;./00-01%20Accessing%20Jupyter%20Notebook.ipynb&#34;&gt;Setting up your environment&lt;/a&gt; has options for &lt;code&gt;Using CUSP Data Facility&lt;/code&gt; and &lt;code&gt;Setting up Locally&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It is highly advised to use the CUSP Data Facility for reading/ executing the course content and for all your homework assignments.
However if you would like to install everything locally on your machine (which I would highly refrain from, unless you know what you are doing) you can follow &lt;code&gt;Setting up Locally&lt;/code&gt; section.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Outline&#34;&gt;Outline&lt;a class=&#34;anchor-link&#34; href=&#34;#Outline&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The UCSL Lab is divided into 6 Major sections viz:&lt;/p&gt;
&lt;h3 id=&#34;Introduction-to-Notebook-and-beyond&#34;&gt;Introduction to Notebook and beyond&lt;a class=&#34;anchor-link&#34; href=&#34;#Introduction-to-Notebook-and-beyond&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This section contains information about setting up the environment for using the UCSL Lab either via CUSP Data Facility (preferred) or by setting up local environment. We will then familiarize ourselves with the simple-but-important terminologies like kernel, jupyter notebook etc. and understang how combination of these tools makes the perfect environment for data scientists. Finally, we will be introduced to the basic Python syntax, concept of whitespaces, using comments and general &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;&lt;code&gt;PEP8&lt;/code&gt;&lt;/a&gt; styling guidelines which we will follow throughout our Lab (and something you should follow, always.).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Introduction-to-Python&#34;&gt;Introduction to Python&lt;a class=&#34;anchor-link&#34; href=&#34;#Introduction-to-Python&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is where we will discuss about Python variables and understand how to store values and perform operation on the variables. We will also look into built in Types like &lt;code&gt;str&lt;/code&gt;ing, &lt;code&gt;int&lt;/code&gt;eger, etc. We will then learn about &lt;code&gt;control flow&lt;/code&gt; using which we can alter the flow/ execution of the code.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Python-in-Practice&#34;&gt;Python in Practice&lt;a class=&#34;anchor-link&#34; href=&#34;#Python-in-Practice&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once you get familiar with Python&#39;s syntax and are comfortable with performing simple operations, we will learn about Python&#39;s different Data Strucutures. We will then look at creating and using Functions which will help make your code more readable and reusable. Finally, we will learn about syntax errors &amp;amp; exceptions and how to handle them.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;em&gt;At this stage you must be comfortable in writing basic python code that involves using built-in/ custom functions for performing certain operation on different variables and data structures. This is a good time to go through the previous 2 sections.. just to be sure!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Starting with the next section, you will be applying the knowledge you learnt in the above sections for performing efficient computation on large datasets&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Introduction-to-Numpy&#34;&gt;Introduction to Numpy&lt;a class=&#34;anchor-link&#34; href=&#34;#Introduction-to-Numpy&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Numpy (Numerical Python) is the core of almost entire data science ecosystem in Python. The time that you will be spending in learning the core concepts of Python will be valuable for performing data(agnostic) analysis. In this section we will learn some basic concepts on single and multi-dimensional &lt;code&gt;arrays&lt;/code&gt; and understand the differnce between Python&#39;s built in types and Numpy arrays. We will perform numerical operations on Numpy arrays and take a look at Numpy&#39;s universal functions. Since we will be dealing with large datasets, we will also cover the concepts of indexing and slicing numpy arrays and some fancy (and fast) ways of getting a chunk of data from a huge dataset.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Introduction-to-Matplotlib&#34;&gt;Introduction to Matplotlib&lt;a class=&#34;anchor-link&#34; href=&#34;#Introduction-to-Matplotlib&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Because of the way the human brain processes information, it is important to be able to visualize the data and the results &lt;em&gt;in correct way&lt;/em&gt;. Matplotlib is a large project and can seem daunting at first. However, by learning the components, it should begin to feel much smaller and more approachable. We will begin our quest to visualize complex data by starting with plotting simple lines and curves and understanding every element that goes into creating an output figure. We will then look at another interesting companion module &lt;code&gt;seaborn&lt;/code&gt; that will help beautify the output figures without much tinkering. Slowly progressing we will learn about some of the differnt types of plots and look at specific examples where each type is suitable. Throughout this section we will be reminded of selecting proper type of plot, color maps/ palletes, ticks. In the end we will look at Matplotlib&#39;s style sheets that will help you get publication quality figures.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Introduction-to-Statistics-*&#34;&gt;Introduction to Statistics *&lt;a class=&#34;anchor-link&#34; href=&#34;#Introduction-to-Statistics-*&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For a change of pace from learning Python for performing data analysis, in this section, we will take a refresher course through some of the concepts of Statistics and see how we use python as a tool to practically implement and visualize statistical problems. This refresher course will consist of following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear Algebra&lt;/li&gt;
&lt;li&gt;Probability&lt;/li&gt;
&lt;li&gt;Probability Distribution&lt;/li&gt;
&lt;li&gt;Conditional probabilities and Bayes Theorem&lt;/li&gt;
&lt;li&gt;Optimization problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;* This section of the course has been created by Dr. Federica Bianco and Dr. Stanislav Sobolevsky&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Pandas&#34;&gt;Pandas&lt;a class=&#34;anchor-link&#34; href=&#34;#Pandas&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Getting back onto learning the tools from Python&#39;s data science ecosystem.. in this section we will take a look at Pandas Series and Pandas Dataframes, two data structures that are very well organized and efficient implementation of single and multi-dimensional arrays sporting heterogeneous types and/or missing data. I know it can be mouthful but wait till we look into the implementation of Pandas dataframes. Instead of a traditional way of introducing the functions and showing the implemetation example, this time we will get our hands dirty with a real-world dataset and try to answer the questions as &lt;em&gt;data scientists&lt;/em&gt;, unraveling the mystery of Pandas!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Homework/-Assignments&#34;&gt;Homework/ Assignments&lt;a class=&#34;anchor-link&#34; href=&#34;#Homework/-Assignments&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;At the end of every section you will be asked to complete an assignment. &lt;strong&gt;The assignment will be due within a week of the date it is posted&lt;/strong&gt;. Following are the rules for completing and submitting the assignments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the solutions should be named &lt;code&gt;ChallengeX_Solutions&lt;/code&gt;.ipynb and saved inside your &lt;code&gt;&amp;lt;home_directory&amp;gt;/ucsl&lt;/code&gt;.. where &lt;code&gt;X&lt;/code&gt; is the challenge number and &lt;code&gt;home_directory&lt;/code&gt; is your net id.&lt;/li&gt;
&lt;li&gt;All the submissions will &lt;strong&gt;ONLY BE COLLECTED FROM YOUR &lt;code&gt;HOME DIRECTORY/ucsl&lt;/code&gt;&lt;/strong&gt; (Refer &lt;a href=&#34;./Setting_up_your_environment.ipynb&#34;&gt;Setting up your environment&lt;/a&gt;&#39;s &lt;code&gt;Using CUSP Data Facility&lt;/code&gt; section. If you have set up the environment locally on your machine then start the notebook following the instructions from &lt;code&gt;Using CUSP Data Facility&lt;/code&gt; and after starting the notebook, use the &lt;code&gt;Upload&lt;/code&gt; button on the right hand corner to upload the solutions in your home directory.&lt;/li&gt;
&lt;li&gt;Create a directory/ folder inside of your &lt;code&gt;Home Directory&lt;/code&gt; by the name &lt;code&gt;UCSL&lt;/code&gt; and save all the solutions in that directory&lt;/li&gt;
&lt;li&gt;The submissions will be fetched automatically and &lt;strong&gt;NO EMAIL SUBMISSIONS WILL BE ACCEPTED&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Passing grade is &lt;strong&gt;60%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Late submission:&lt;ul&gt;
&lt;li&gt;Inform the TA as soon as possible.&lt;/li&gt;
&lt;li&gt;1 week late: evaluation from 90% of the total grade&lt;/li&gt;
&lt;li&gt;2 weeks late: evaluation from 75% of the total grade&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plagiarism will not be tolerated&lt;/strong&gt;. For more information refer: &lt;a href=&#34;http://www.nyu.edu/about/policies-guidelines-compliance/policies-and-guidelines/academic-integrity-for-students-at-nyu.html&#34;&gt;Academic Integrity for students at NYU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Contact/-Office-Hours&#34;&gt;Contact/ Office Hours&lt;a class=&#34;anchor-link&#34; href=&#34;#Contact/-Office-Hours&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;The best way to contact me is via email: &lt;a href=&#34;mailto:mohit.sharma@nyu.edu&#34;&gt;mohit.sharma@nyu.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teaching Assistant:&lt;/p&gt;
&lt;p&gt;Virtual Office Hours: Tuesday 2pm - 4pm EST.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h1 id=&#34;Open-Source-license&#34;&gt;Open Source license&lt;a class=&#34;anchor-link&#34; href=&#34;#Open-Source-license&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;This notebook will be available for you to use even after you have completed the UCSL bootcamp as a html document at  &lt;a href=&#34;https://sharmamohit.com/tutorials/ucsl/&#34;&gt;https://sharmamohit.com/tutorials/ucsl/&lt;/a&gt; and also in the notebook form at &lt;a href=&#34;https://github.com/Mohitsharma44/ucsl17&#34;&gt;https://github.com/Mohitsharma44/ucsl17&lt;/a&gt; that you can download locally (or clone it in cdf in your home directory as well)&lt;/p&gt;
&lt;p&gt;Feel free to make the edits, use in whatever way you want and even better, if you find any errors or want to contribute to improve the bootcamp, make a pull request or simply fork it for youself!&lt;/p&gt;
&lt;p&gt;Good Luck!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>00-01 Accessing Jupyter Notebook</title>
      <link>/tutorials/ucsl/00-01-accessing-jupyter-notebook/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/00-01-accessing-jupyter-notebook/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Acessing-Jupyter-Notebook-on-CUSP-CDF-(preferred-way)&#34;&gt;Acessing Jupyter Notebook on CUSP CDF (preferred way)&lt;a class=&#34;anchor-link&#34; href=&#34;#Acessing-Jupyter-Notebook-on-CUSP-CDF-(preferred-way)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Depending on the Operating System that you are using, you should simply follow the instructions on cusp datahub.&lt;/p&gt;
&lt;p&gt;For Linux and Mac OS: &lt;a href=&#34;https://datahub.cusp.nyu.edu/sites/default/files/documents/guides/Jupyter_Notebook_from_your_browser_Mac.pdf&#34;&gt;https://datahub.cusp.nyu.edu/sites/default/files/documents/guides/Jupyter_Notebook_from_your_browser_Mac.pdf&lt;/a&gt;
For Windows OS: 
&lt;a href=&#34;https://datahub.cusp.nyu.edu/sites/default/files/documents/guides/Jupyter_Notebook_from_your_browser_Windows.pdf&#34;&gt;https://datahub.cusp.nyu.edu/sites/default/files/documents/guides/Jupyter_Notebook_from_your_browser_Windows.pdf&lt;/a&gt;
All the packages that we need to use are already installed for you.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Setting-Up-Jupyter-Notebook-locally-on-your-machine-(Method-1)&#34;&gt;Setting Up Jupyter Notebook locally on your machine (Method 1)&lt;a class=&#34;anchor-link&#34; href=&#34;#Setting-Up-Jupyter-Notebook-locally-on-your-machine-(Method-1)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If you are familiar with Docker, then there is a pre-built container that you can use following the instructions here: &lt;a href=&#34;https://github.com/Mohitsharma44/ucsl-image&#34;&gt;https://github.com/Mohitsharma44/ucsl-image&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;Setting-Up-Jupyter-Notebook-locally-on-your-machine-(Method-2)&#34;&gt;Setting Up Jupyter Notebook locally on your machine (Method 2)&lt;a class=&#34;anchor-link&#34; href=&#34;#Setting-Up-Jupyter-Notebook-locally-on-your-machine-(Method-2)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These instructions can be followed only if you are using either a Mac OS or Linux based OS&lt;/p&gt;
&lt;h4 id=&#34;Mac-OS&#34;&gt;Mac OS&lt;a class=&#34;anchor-link&#34; href=&#34;#Mac-OS&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Installing Brew (if you already don&#39;t have it)
&lt;pre&gt;&lt;code&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Update Brew:
`brew update&lt;/li&gt;
&lt;li&gt;Install Python
&lt;pre&gt;&lt;code&gt;brew install python&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;(or &lt;code&gt;brew install python3&lt;/code&gt; if you want to use python3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Linux-Flavored-OS-(assuming-Ubuntu)&#34;&gt;Linux Flavored OS (assuming Ubuntu)&lt;a class=&#34;anchor-link&#34; href=&#34;#Linux-Flavored-OS-(assuming-Ubuntu)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using your favorite package manager install Python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;(or &lt;code&gt;sudo apt-get install python3&lt;/code&gt; if you want to use python3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install python package manager&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-pip&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;(or &lt;code&gt;sudo apt-get install python3-pip&lt;/code&gt; if you want to use python3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Common-Commands-for-Mac-and-Linux&#34;&gt;Common Commands for Mac and Linux&lt;a class=&#34;anchor-link&#34; href=&#34;#Common-Commands-for-Mac-and-Linux&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;(even windows if you have managed to install python and pip on it)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install jupyter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;(or &lt;code&gt;pip3 install jupyter&lt;/code&gt; if you want to use python3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Numpy, Matplotlib, Scipy, Pandas&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install numpy matplotlib scipy pandas packages&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;(use &lt;code&gt;pip3&lt;/code&gt; for python3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;If, for Linux flavored OS, the above command gives you a dependency error, replace it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-&amp;lt;package name&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;If you want to have an option of using either python2 or python3, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python2 -m pip install ipykernel
python2 -m ipykernel install --user&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;replace &lt;code&gt;python2&lt;/code&gt; with &lt;code&gt;python3&lt;/code&gt; if you ran all the above commands for python3&lt;/li&gt;
&lt;li&gt;remember to install the &#34;packages&#34; for python2 and python3&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Remember .. No matter where you set up your development environment, the assignments have to be uploaded on CDF (check the Welcome notebook for more instructions)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>00-02 Introduction to Notebook and beyond</title>
      <link>/tutorials/ucsl/00-02-introduction-to-notebook-and-beyond/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/00-02-introduction-to-notebook-and-beyond/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;00---00-Introduction-to-Python&#34;&gt;00 - 00 Introduction to Python&lt;a class=&#34;anchor-link&#34; href=&#34;#00---00-Introduction-to-Python&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;./images/00/python.png&#34; alt=&#34;Python Logo&#34; height=&#34;100&#34; width=&#34;100&#34; align=&#39;left&#39;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Python&#34;&gt;Python&lt;a class=&#34;anchor-link&#34; href=&#34;#Python&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt; is a great object-oriented, interpreted, and interactive programming language. It is widely used as general-purpose, high-level programming language. It is ranked among the &lt;a href=&#34;http://spectrum.ieee.org/computing/software/the-2016-top-programming-languages&#34;&gt;&lt;code&gt;top 5 programming languages&lt;/code&gt;&lt;/a&gt; in the world.&lt;/p&gt;
&lt;p&gt;Python was conceived in the late 1980s as a teaching and scripting language and has since become an essential tool for many programmers, engineers, researchers, and data scientists across academia and industry. It can be used to create many things including web applications, desktop applications, as scripting interpreter and most relevant for you -- as a data analysis tool.. whether it is about &#39;&lt;em&gt;making sense&lt;/em&gt;&#39; of the dataset that you are working with, scraping and cleaning the publicly available datasets or simply automating a task.. you will find python to be very agile to fit your needs.&lt;/p&gt;
&lt;p&gt;The reason python python is so versatile and widely used is because its simple and easy to learn syntax and due to the availability of a large ecosystem containing domain specific tools that have been built using it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;There are no type declarations of variables, parameters, functions, or methods in source code. This makes the code short and flexible, and you lose the compile-time type checking of the source code.&lt;/p&gt;
&lt;p&gt;Python tracks the types of all values at runtime and flags code that does not make sense as it runs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we proceed further with learning the python syntax, lets familiarize ourselves with the environment that we will be using.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;00---01-Introduction-to-Jupyter-Notebook&#34;&gt;00 - 01 Introduction to Jupyter Notebook&lt;a class=&#34;anchor-link&#34; href=&#34;#00---01-Introduction-to-Jupyter-Notebook&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;What-is-a-Notebook&#34;&gt;What is a Notebook&lt;a class=&#34;anchor-link&#34; href=&#34;#What-is-a-Notebook&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The Juputer notebook (successor of Ipython notebook) is a web based interactive computational environment which provides a unique combination of code, shell environment and text. The Ipython notebook project that started of as a tool to provide the above mentioned functionalities just for python has since grown to be language agnostic supporting over 40 different languages and is now known as Jupyter notebook (or simply notebook). Simply put, a Jupter notebook is a &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt; document containing an ordered list of input/output cells which can contain code, text, mathematics, plots and rich media.&lt;/p&gt;
&lt;p&gt;The Jupyter Notebook combines three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The notebook web application:&lt;/strong&gt; An interactive web application for writing and running code interactively and authoring notebook documents.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kernels:&lt;/strong&gt; Separate processes started by the notebook web application that runs user&#39;s code in a given language and returns output back to the notebook web application. The kernel also handles things like computations for interactive widgets, tab completion and introspection. &lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;The Jupyter notebook, for running python codes, runs an ipython kernel.&lt;/li&gt;
&lt;li&gt;If you are viewing this document on CUSP CDF and if you run any code, the code is not executed on your local machine. It is executed on the CDF server.. where the ipython kernel is running.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notebook documents:&lt;/strong&gt; Self-contained documents that contain a representation of all the contents visible in the notebook web application, including inputs and outputs of the computations, narrative text, equations, images, and rich media representations of objects. Each notebook document has its own kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Why-do-we-even-use-a-notebook-instead-of-..-lets-say-..-a-terminal-or-some-text-editor?&#34;&gt;Why do we even use a notebook instead of .. lets say .. a terminal or some text editor?&lt;a class=&#34;anchor-link&#34; href=&#34;#Why-do-we-even-use-a-notebook-instead-of-..-lets-say-..-a-terminal-or-some-text-editor?&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The notebook web application enables users to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit code in the browser, with automatic syntax highlighting, indentation, and tab completion/introspection.&lt;/li&gt;
&lt;li&gt;Run code from the browser, with the results of computations attached to the code which generated them.&lt;/li&gt;
&lt;li&gt;See the results of computations with rich media representations, such as HTML, $LaTeX$, PNG, SVG, PDF, etc.&lt;/li&gt;
&lt;li&gt;Create and use interactive JavaScript widgets, which bind interactive user interface controls and visualizations to reactive kernel side computations.&lt;/li&gt;
&lt;li&gt;Author narrative text using the Markdown markup language.&lt;/li&gt;
&lt;li&gt;Build hierarchical documents that are organized into sections with different levels of headings.&lt;/li&gt;
&lt;li&gt;Use different cell types, for example, to include mathematical equations using $LaTeX$ syntax in Markdown, which are rendered in-browser by MathJax.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;DIfferent-Cell-Types?&#34;&gt;DIfferent Cell Types?&lt;a class=&#34;anchor-link&#34; href=&#34;#DIfferent-Cell-Types?&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Notebooks consist of a linear sequence of cells. There are four basic cell types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Code cells:&lt;/strong&gt; Input and output of live code that is run in the kernel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown cells:&lt;/strong&gt; Narrative text with embedded LaTeX equations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heading cells:&lt;/strong&gt; 6 levels of hierarchical organization and formatting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raw cells:&lt;/strong&gt; Unformatted text that is included, without modification, when notebooks are converted to different formats using nbconvert
These cell types can be viewed by clicking &lt;code&gt;Cell -&amp;gt; Cell Type&lt;/code&gt; in menu bar&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;Working-with-Notebook&#34;&gt;Working with Notebook&lt;a class=&#34;anchor-link&#34; href=&#34;#Working-with-Notebook&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;This section will assume that you are using CUSP CDF. However following along on your local installation should be trivial.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;Dashboard&#34;&gt;Dashboard&lt;a class=&#34;anchor-link&#34; href=&#34;#Dashboard&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Once you have logged in to the jupyter hub, you should see a dashboard. The dashboard serves as a home page for the notebook displaying the notebooks and files in the current directory.
&lt;img src=&#34;/img/ucsl-images/00/localhost_dash.png&#34; alt=&#34;Jupyter notebook dashboard&#34; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;h5 id=&#34;New-Notebook&#34;&gt;New Notebook&lt;a class=&#34;anchor-link&#34; href=&#34;#New-Notebook&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Once you navigate to your home directories (from where you have opened this notebook), you can create a new notebook by clicking on New on top right corner and selecting &lt;code&gt;Python 2&lt;/code&gt; or &lt;code&gt;Python 3&lt;/code&gt;
&lt;img src=&#34;/img/ucsl-images/00/new_py2.png&#34; alt=&#34;Jupyter notebook dashboard&#34; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;UCSL bootcamp will be compatible with Python2 as well as Python3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jupyter Notebook has a modal user interface. This means that the keyboard does different things depending on which mode the Notebook is in. There are two modes: &lt;strong&gt;Edit&lt;/strong&gt; mode and &lt;strong&gt;Command&lt;/strong&gt; mode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;##### Edit Mode
Edit mode is indicated by a green (or some different color than when you are not editing the cell) cell border and a prompt showing in the editor area. When a cell is in edit mode, you can type into the cell, like a normal text editor. To enter the edit mode, navigate to the cell and press &lt;code&gt;Enter&lt;/code&gt;
&lt;img src=&#34;/img/ucsl-images/00/new_edit.png&#34; alt=&#34;Jupyter notebook dashboard&#34; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;##### Command Mode
Command mode is indicated by a grey cell border with a blue (or some different color than when you are editing the cell) left margin. To enter into command mode, press &lt;code&gt;Esc&lt;/code&gt; key. This will bring you out of the edit mode
&lt;img src=&#34;/img/ucsl-images/00/new_command.png&#34; alt=&#34;Jupyter notebook dashboard&#34; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;##### Keyboard Shortcuts
In command mode, the keyboard is mapped to a set of shortcuts that let you perform notebook and cell actions efficiently.
Its recommended learning the command mode shortcuts in the following rough order:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Basic navigation: enter, shift-enter, up/k, down/j&lt;/li&gt;
&lt;li&gt;Saving the notebook: s&lt;/li&gt;
&lt;li&gt;Change Cell types: y, m, 1-6, t (markdown in this case)&lt;/li&gt;
&lt;li&gt;Cell creation: a, b&lt;/li&gt;
&lt;li&gt;Cell editing: x, c, v, d, z&lt;/li&gt;
&lt;li&gt;Kernel operations: i, 0 (press twice)&lt;br&gt;&lt;br&gt;
This will help speed up your development time.
To know more about keyboard shortcuts, click: &lt;code&gt;Help -&amp;gt; Keyboard Shortcuts&lt;/code&gt; in the menu bar&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Closing-and-Deleting-a-Notebook&#34;&gt;Closing and Deleting a Notebook&lt;a class=&#34;anchor-link&#34; href=&#34;#Closing-and-Deleting-a-Notebook&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The notebooks that are currently open are shown in green icon on dashboard page. The notebooks will remain running until you explicitly shut them down. To do that, check the box next to the notebook that you want to close and observe the controls on top of the notebook.
&lt;img src=&#34;/img/ucsl-images/00/closing.png&#34; alt=&#34;Jupyter notebook dashboard&#34; align=&#39;center&#39;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To close the notebook, you can click on the &lt;code&gt;shutdown&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;To remove/ delete the notebook you can click on &lt;em&gt;recycle bin&lt;/em&gt; next to the shutdown option&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;h5 id=&#34;At-this-stage,-I-would-advise-taking-some-time-and-familiarizing-yourselves-with-the-Notebook,-UI-and-Cell-shortcuts.&#34;&gt;At this stage, I would advise taking some time and familiarizing yourselves with the Notebook, UI and Cell shortcuts.&lt;a class=&#34;anchor-link&#34; href=&#34;#At-this-stage,-I-would-advise-taking-some-time-and-familiarizing-yourselves-with-the-Notebook,-UI-and-Cell-shortcuts.&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;00---02-Introduction-to-Python-Syntax&#34;&gt;00 - 02 Introduction to Python Syntax&lt;a class=&#34;anchor-link&#34; href=&#34;#00---02-Introduction-to-Python-Syntax&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The syntax of the Python programming language is the set of rules that defines how a Python program will be written and interpreted by the system (and by yourself). Python was designed to be a highly readable language. It has uncluttered visual layout and uses English keywords frequently. Python aims towards simplicity and generality in the design of its syntax.&lt;/p&gt;
&lt;p&gt;In fact Python&#39;s syntax guidelines are encapsulated in the mantra &#34;There should be one and preferably only one obvious way to do it&#34;. You can read more about it in &lt;a href=&#34;www.python.org/dev/peps/pep-0020/&#34; title=&#34;The Zen of Python&#34;&gt;&lt;code&gt;The Zen of Python&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;Indentation&#34;&gt;Indentation&lt;a class=&#34;anchor-link&#34; href=&#34;#Indentation&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Python provides no braces to indicate blocks of code. Blocks of code are denoted by line indentation. The number of spaces or tabs in an indentation is variable but it is rigidly enforced. For example,&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a is 12 :) &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a is not 12 :( &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;a is 12 :)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If I don&#39;t respect the indentation, let&#39;s say, in else block of code.. let&#39;s see what happens&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a is 12 :) &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a is not 12 :( &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_text output_error&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;ansi-cyan-fg&#34;&gt;  File &lt;/span&gt;&lt;span class=&#34;ansi-green-fg&#34;&gt;&amp;#34;&amp;lt;ipython-input-2-22237de9583e&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;ansi-cyan-fg&#34;&gt;, line &lt;/span&gt;&lt;span class=&#34;ansi-green-fg&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;    print (&amp;#34;a is not 12 :( &amp;#34;)&lt;/span&gt;
        ^
&lt;span class=&#34;ansi-red-fg&#34;&gt;IndentationError&lt;/span&gt;&lt;span class=&#34;ansi-red-fg&#34;&gt;:&lt;/span&gt; expected an indented block
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Note: (python) Notebooks automatically indent your code so you don&#39;t have to. However when you write your own code in a regular text editor or in an &lt;a href=&#34;https://docs.python.org/3/library/idle.html&#34;&gt;idle&lt;/a&gt;, make sure to indent your code.&lt;/p&gt;
&lt;p&gt;Note: Cross-platform compatibility note: because of the nature of text editors on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for the indentation in a single source file. It should also be noted that different platforms may explicitly limit the maximum indentation level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, if we want to add any more lines in the condition blocks, the lines should all have same level of indentation inside if block or else block.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;Multi-line-Statements&#34;&gt;Multi-line Statements&lt;a class=&#34;anchor-link&#34; href=&#34;#Multi-line-Statements&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Statements in Python typically ends with a new line. However python allows the use of the line continuation character ( \ ) to denote that the line should continue. For example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello &lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_text output_error&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;ansi-cyan-fg&#34;&gt;  File &lt;/span&gt;&lt;span class=&#34;ansi-green-fg&#34;&gt;&amp;#34;&amp;lt;ipython-input-3-8498df2221f9&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;ansi-cyan-fg&#34;&gt;, line &lt;/span&gt;&lt;span class=&#34;ansi-green-fg&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;    a = &amp;#34;Hello&lt;/span&gt;
              ^
&lt;span class=&#34;ansi-red-fg&#34;&gt;SyntaxError&lt;/span&gt;&lt;span class=&#34;ansi-red-fg&#34;&gt;:&lt;/span&gt; EOL while scanning string literal
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;World&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;Hello World
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The above is an explicit line joining technique
Another way to tell python not to end is by putting the strings or variables within the brackets ( ), { }, [ ] without using the line continuation character. For example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;three&amp;#39;&lt;/span&gt;
       &lt;span class=&#34;s1&#34;&gt;&amp;#39;four&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;five&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[5]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;threefour&amp;#39;, &amp;#39;five&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;This is known as implicit line joining technique.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Did you notice, to print the variable &lt;code&gt;num&lt;/code&gt;, I didn&#39;t use &lt;code&gt;print&lt;/code&gt; function? This is possible only in notebook or other repl environments but won&#39;t work in the stand-alone code that you will write later
The different brackets mean different things. We will study about them in later chapters. This is just to demonstrate a way of using multi-line statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;Quotations&#34;&gt;Quotations&lt;a class=&#34;anchor-link&#34; href=&#34;#Quotations&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;You must have seen that in the above examples. we have used single and double quotes. Python accepts single, double and triple (&#39;&#39;&#39; or &#34;&#34;&#34;)quotes to denote string literals. Bear in mind that the start quote and end quote should be of same type. Strings are generally created by using single or double quotes (python treats single and double quotes as the same.) Triple quotes are used when the string literals span across multiple lines. Consider following examples:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;UCSL&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;instructor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Mohit&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;The UCSL at CUSP is a series of online sessions designed to build a &lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;common skillset and familiarity with techniques, concepts, and models for &lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;urban informatics computing. The online sessions focus on data explorations, &lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;programming skills and statistical methods needed for scientific computing &lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;in the field of Urban Informatics.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;UCSL
Mohit
The UCSL at CUSP is a series of online sessions designed to build a
common skillset and familiarity with techniques, concepts, and models for
urban informatics computing. The online sessions focus on data explorations,
programming skills and statistical methods needed for scientific computing
in the field of Urban Informatics.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;Comments&#34;&gt;Comments&lt;a class=&#34;anchor-link&#34; href=&#34;#Comments&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Comments are the statements that are not evaluated by python. It is generally used for improving the readability/ understanding of what the code does. There are basically 3 ways of doing it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;##### Block Comments
Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a &lt;code&gt;#&lt;/code&gt; and a single space. Paragraphs inside a block comment are separated by a line containing a single &lt;code&gt;#&lt;/code&gt;. &lt;blockquote&gt;&lt;p&gt;You can replace &lt;code&gt;#&lt;/code&gt; by putting the comment inside &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; in a &lt;strong&gt;non repl&lt;/strong&gt; environment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# I wont be evaluated&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[8]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;12&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;ul&gt;
&lt;li&gt;##### Inline Comments
An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space. Inline comments are unnecessary and in fact distracting if they state the obvious.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Setting x to 100 (this is unnecessary)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;Docstrings&#34;&gt;Docstrings&lt;a class=&#34;anchor-link&#34; href=&#34;#Docstrings&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Every function that you write should be accompanied with a Docstring that tells about the function.&lt;/p&gt;
&lt;p&gt;Docstrings are written between a triple quote (&#34;&#34;&#34; ...&amp;lt; docstring &amp;gt;...&#34;&#34;&#34;).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We&#39;ll learn about functions a bit later.. and will enforce having docstrings there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    This function will&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    perform .....&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__doc__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[11]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;\n    This function will\n    perform .....\n    &amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;docstrings are also printed when you type &amp;lt; &lt;code&gt;function_name&lt;/code&gt; &amp;gt; &lt;code&gt;?&lt;/code&gt;. Go ahead.. try typing &lt;code&gt;my_func?&lt;/code&gt; on the next line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[&amp;nbsp;]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>01-00 Introduction to Python</title>
      <link>/tutorials/ucsl/01-00-introduction-to-python/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-00-introduction-to-python/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---00-Introduction-to-Python&#34;&gt;01 - 00 Introduction to Python&lt;a class=&#34;anchor-link&#34; href=&#34;#01---00-Introduction-to-Python&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We mentioned the pros of using Python as our tool for performing urban science in the Introduction to Notebook and Beyond. In this introductory module we will discuss the basic semantics of the language and get our hands dirty by actually typing and executing the code blocks.&lt;/p&gt;
&lt;blockquote&gt;&lt;h5 id=&#34;Remeber:&#34;&gt;Remeber:&lt;a class=&#34;anchor-link&#34; href=&#34;#Remeber:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;To run a cell, you can press &lt;code&gt;Shift+Enter&lt;/code&gt; (to execute and go to next cell) or &lt;code&gt;Ctrl+Enter&lt;/code&gt; (to execute and stay on the same cell).&lt;/li&gt;
&lt;li&gt;To add an empty cell, press &lt;code&gt;Esc&lt;/code&gt; to get out of edit mode and press either &lt;code&gt;b&lt;/code&gt; key (to add it after the current cell) or &lt;code&gt;a&lt;/code&gt; key (to add it before the current cell). &lt;/li&gt;
&lt;li&gt;You can make edits to the code and play around with it. However you cannot save the edits made to this notebook if you are running it on CDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Python has following 6 built-in Data-Types:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Integer values&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Floating point values&lt;/td&gt;
&lt;td&gt;10.12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex&lt;/td&gt;
&lt;td&gt;Complex values&lt;/td&gt;
&lt;td&gt;1 + 3j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;Boolean values&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;String values&lt;/td&gt;
&lt;td&gt;&#34;Hello&#34;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NoneType&lt;/td&gt;
&lt;td&gt;None value&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;and 4 Data-Structures&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;Ordered collection of values&lt;/td&gt;
&lt;td&gt;[1, &#39;abc&#39;, 3, 1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;Unordered collection of unique values&lt;/td&gt;
&lt;td&gt;{1, &#39;abc&#39;, 3}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;Immutable Ordered collection&lt;/td&gt;
&lt;td&gt;(1, &#39;abc&#39;, 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict&lt;/td&gt;
&lt;td&gt;Unordered key. value pairs&lt;/td&gt;
&lt;td&gt;{&#39;abc&#39;: 1, &#39;def&#39;: 2}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;In this section we will learn about the above Python&#39;s built-in Data-Types and Data-Structures.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>01-01 Variables</title>
      <link>/tutorials/ucsl/01-01-variables/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-01-variables/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---01-Variables&#34;&gt;01 - 01 Variables&lt;a class=&#34;anchor-link&#34; href=&#34;#01---01-Variables&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As the name implies, a variable is something that can change. A variable is just a way of referring to a memory location used by a python program. Based on the datatype of the variable, the python interpreter allocates the memory and decides what can be stored in the reserved memory. This makes python a &lt;strong&gt;dynamically-typed&lt;/strong&gt; language.&lt;/p&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;If you are familiar with other programming languages like C, C++ or Java it might be tempting to consider variable as just a container to store data. However in Python, you can at best, think of variables as pointers. This is why you can &lt;em&gt;dynamically&lt;/em&gt; change the type of data that a variable is pointing at.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---01.01-Assigning-values-to-variables&#34;&gt;01 - 01.01 Assigning values to variables&lt;a class=&#34;anchor-link&#34; href=&#34;#01---01.01-Assigning-values-to-variables&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of the main differences between Python and strongly types languages like C++ or Java is the way it deals with the data types. In languages like C++ or Java, every variable must have a unique data type i.e if a variable is of type string it cannot store integers or floats. Moreover every variable has to be declared before it can be used, thus binding it to the data type that can be stored in it. Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when a value is assigned to a variable. This means that a variable that was used to store a string can now be used to store an integer. Try it out. Do something like this:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;I am in NYC&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;I am in NYC
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; is a string in the above case.&lt;/p&gt;
&lt;p&gt;Well.. don&#39;t take my word for it. Lets confirm&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[2]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;str&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/functions.html#type&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; is a built-in function that returns the datatype of anything.. and by anything, I mean absolutely anything (give it a spin!). It is one of the cool things in Python. We will talk about this and many other cool built-in functions in the later chapters.&lt;/p&gt;
&lt;p&gt;so now if I point our variable &lt;code&gt;var&lt;/code&gt; to, lets say, an integer.. it will simply work&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[3]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;int&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;So what are the &lt;strong&gt;rules&lt;/strong&gt; of naming a variable?&lt;/p&gt;
&lt;p&gt;Every language has some rules for naming the identifier of variables (aka the variable name). In Python, a valid identifier is a non-empty sequence of characters of any length with:&lt;/p&gt;
&lt;p&gt;The start of the character can be an underscore &#34;_&#34; or a capital or lower case letter. However it is generally recommended to use all upper case for global variables and all lower case for local variables.
The letters following the first letter can be a digit or a string.
Python is a case-sensitive language. Therefore, &lt;code&gt;var&lt;/code&gt; is not equal to &lt;code&gt;VAR&lt;/code&gt; or &lt;code&gt;vAr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Apart from above restrictions, python keywords cannot be used as identifier names. These are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;and&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;del&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;from&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;not&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;as&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;elif&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;global&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;or&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;with&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;assert&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;else&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;if&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pass&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;yield&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;break&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;except&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;import&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;print&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;class&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;exec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;raise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;continue&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;finally&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;is&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;return &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;def&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;for&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lambda&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---01.02-Multiple-Assignment&#34;&gt;01 - 01.02 Multiple Assignment&lt;a class=&#34;anchor-link&#34; href=&#34;#01---01.02-Multiple-Assignment&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python allows you to assign a single value to several variables simultaneously. For example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;or even assign different values to different variables:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Print the above variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>01-02 Strings</title>
      <link>/tutorials/ucsl/01-02-strings/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-02-strings/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---02-Python-Strings&#34;&gt;01 - 02 Python Strings&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02-Python-Strings&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A python string is usually a bit of text that you want to display or use or export out of the program that you are writing (to a file or over the network). Technically, strings are immutable &lt;code&gt;sequence&lt;/code&gt; of characters.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We will talk and learn more about sequences in Data Structures module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python has a built-in string class called &lt;code&gt;str&lt;/code&gt; with many handy features. Python knows you want something to be a string when you enclose the text with either single quotes ( &#39; ) or double quotes ( &#34; ). You must&#39;ve seen this in our previous tutorials. If not, check a very basic example below:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[13]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Contents of var: &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Type of var: &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;(&amp;#39;Contents of var: &amp;#39;, &amp;#39;Hello World&amp;#39;)
(&amp;#39;Type of var: &amp;#39;, &amp;lt;type &amp;#39;str&amp;#39;&amp;gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;A string literal can span multiple lines, to do that there must be a backslash ( &lt;code&gt;\&lt;/code&gt; ) at the end of each line to escape the newline because by default the return key on the keyboard is considered as the end of line. However if you do not feel comfortable using backslashes, you can put your text between triple quotes ( &lt;code&gt;&#34;&#34;&#34;&lt;/code&gt; ) or ( &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; ). If you don&#39;t want characters prefaced by &lt;code&gt;\&lt;/code&gt; to be interpreted as special characters, you can use raw strings by adding an alphabet&lt;code&gt;r&lt;/code&gt; before the first quote. A very basic example would be something like this:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[14]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;ame\of\dir&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# even using triple quotes won&amp;#39;t save you!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;C:
ame\of\dir
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[15]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:\name\of\dir&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;C:\name\of\dir
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---02.01-String-Concatenation&#34;&gt;01 - 02.01 String Concatenation&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02.01-String-Concatenation&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python strings are &#39;immutable&#39;. What it means is that they cannot be changed after they are created. So if we concatenate the two strings, python will take the two strings and build a new, third string, with the concatenated value of the first and the second string.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[16]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# String 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# String 2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Concatenate two string as String 3&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;HelloWorld
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Concatenation of strings will also happen when the string literals are placed next to each other.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[17]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;HelloWorld
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Concatenation can only be preformed on variables of same datatype. i.e a string concatenation can only be performed on two strings or two variables that have str as their datatype. If you try to perform string concatenation on a string and an integer, Python will trow a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[18]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_text output_error&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;TypeError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class=&#34;ansi-green-fg&#34;&gt;&amp;lt;ipython-input-18-37c827034c46&amp;gt;&lt;/span&gt; in &lt;span class=&#34;ansi-cyan-fg&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class=&#34;ansi-blue-fg&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ansi-green-intense-fg ansi-bold&#34;&gt;      1&lt;/span&gt; var1 &lt;span class=&#34;ansi-blue-fg&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ansi-blue-fg&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;span class=&#34;ansi-green-intense-fg ansi-bold&#34;&gt;      2&lt;/span&gt; var2 &lt;span class=&#34;ansi-blue-fg&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ansi-cyan-fg&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ansi-green-fg&#34;&gt;----&amp;gt; 3&lt;/span&gt;&lt;span class=&#34;ansi-red-fg&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ansi-green-fg&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;ansi-blue-fg&#34;&gt;(&lt;/span&gt;var1&lt;span class=&#34;ansi-blue-fg&#34;&gt;+&lt;/span&gt;var2&lt;span class=&#34;ansi-blue-fg&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;ansi-red-fg&#34;&gt;TypeError&lt;/span&gt;: cannot concatenate &amp;#39;str&amp;#39; and &amp;#39;int&amp;#39; objects&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---02.02-String-Indexing&#34;&gt;01 - 02.02 String Indexing&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02.02-String-Indexing&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Characters in a string can be accessed using the standard [ ] syntax. Python uses zero-based indexing which means that first character in a string will be indexed at &lt;code&gt;0th&lt;/code&gt; location. So, for example if the string is &#39;&lt;code&gt;Python&lt;/code&gt;&#39; then, its length can be obtained as&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[19]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[19]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;6&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;and its positional values can be obtained by&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[20]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[20]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;P&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[21]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[21]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;n&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Now, if we try to change the positional value to something else, we will get a &lt;code&gt;TypeError&lt;/code&gt; proving that strings are immutable&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[22]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_text output_error&#34;&gt;
&lt;pre&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&#34;ansi-red-fg&#34;&gt;TypeError&lt;/span&gt;                                 Traceback (most recent call last)
&lt;span class=&#34;ansi-green-fg&#34;&gt;&amp;lt;ipython-input-22-4e4c32b12db9&amp;gt;&lt;/span&gt; in &lt;span class=&#34;ansi-cyan-fg&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class=&#34;ansi-blue-fg&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ansi-green-fg&#34;&gt;----&amp;gt; 1&lt;/span&gt;&lt;span class=&#34;ansi-red-fg&#34;&gt; &lt;/span&gt;var1&lt;span class=&#34;ansi-blue-fg&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ansi-cyan-fg&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;ansi-blue-fg&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ansi-blue-fg&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ansi-blue-fg&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;

&lt;span class=&#34;ansi-red-fg&#34;&gt;TypeError&lt;/span&gt;: &amp;#39;str&amp;#39; object does not support item assignment&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Apart from obtaining positional values of &lt;code&gt;var1&lt;/code&gt; using (&lt;em&gt;positive&lt;/em&gt;) index values between &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; (or between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;len(var1)-1&lt;/code&gt;), we can also index it by entering negative index values&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[23]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[23]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;P&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[24]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[24]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;n&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;This works because when you enter a non negative index value, it is considered as indexed from &lt;strong&gt;left to right&lt;/strong&gt; and when you enter the negative index values (negative indexing starts from &lt;code&gt;-1&lt;/code&gt;), python&#39;s interpreter is intelligent enough to understand that you meant to get the value indexed from right to left.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       +---+---+---+---+---+---+
       | P | y | t | h | o | n |
       +---+---+---+---+---+---+
         0   1   2   3   4   5 
        -6  -5  -4  -3  -2  -1&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---02.03-String-Slicing&#34;&gt;01 - 02.03 String Slicing&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02.03-String-Slicing&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &#39;Slice&#39; syntax is a handy way to refer to sub-parts of strings. The slice &lt;code&gt;var1[start : end]&lt;/code&gt; is the elements beginning at start and extending up to end (&lt;strong&gt;not including end&lt;/strong&gt;). Look at the above Python string literals representation and work on following examples:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[25]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[25]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Pyt&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[26]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[26]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Pyt&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[27]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[27]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---02.04-String-Formatting&#34;&gt;01 - 02.04 String Formatting&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02.04-String-Formatting&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Everything that we have seen till now had a string that &lt;strong&gt;cannot&lt;/strong&gt; be modified but what if we now want to modify a few words of the string and leave the remaining string unmodified?&lt;/p&gt;
&lt;p&gt;For people familiar with C++, Python has a printf() - like facility to put together a string using &lt;code&gt;%&lt;/code&gt; operator. Python uses &lt;code&gt;%d&lt;/code&gt; operator to insert an integer, &lt;code&gt;%s&lt;/code&gt; for string and &lt;code&gt;%f&lt;/code&gt; for floating point. Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[28]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; World. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;%s World. %s %d %d %f
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[29]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Check&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[29]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Hello World. Check 1 2 3.000000&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;However, with the &lt;a href=&#34;https://www.python.org/dev/peps/pep-3101/&#34;&gt;PEP 3101&lt;/a&gt;, the &lt;code&gt;%&lt;/code&gt; operator has been replaced with a string method called &lt;code&gt;format&lt;/code&gt; which can take arbitrary number of arguments.&lt;/p&gt;
&lt;p&gt;According to this method, the &#34;fields to be replaced&#34; are surrounded by curly braces &lt;code&gt;{ }&lt;/code&gt;. The curly braces and the &#34;code&#34; inside will be substituted with a formatted value from the arguments passed to the &lt;code&gt;format&lt;/code&gt; method. Anything else, which is not contained in curly braces will be literally printed, i.e. without any changes.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[30]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{} World. {} {} {} {}&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# you can also do&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# text = &amp;#39;{0} World. {1} {2} {3} {4}&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;{} World. {} {} {} {}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[31]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Check&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[31]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Hello World. Check 1 2 3&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Notice a minor difference in the output of &lt;code&gt;text&lt;/code&gt; variable when we used &lt;code&gt;%&lt;/code&gt;.. it is the datatype of value &lt;code&gt;3&lt;/code&gt;. We want to pass the positional value as integer but want to make sure that it is formatted as a float in the final form. The way to do this is by specifying the type of value expected in the curly braces preceeded by a colon ( &lt;code&gt;:&lt;/code&gt; )&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[32]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{} World. {} {} {} {:.2f}&amp;#39;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# you can also do&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#text = &amp;#39;{val1} World. {val2} {val3} {val4} {val5:.2f}&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;{} World. {} {} {} {:.2f}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[33]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Check&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# if you uncomment the previous cell, then use this:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#text.format(val1=&amp;#39;Hello&amp;#39;, val2=&amp;#39;Check&amp;#39;, val3=1, val4=2, val5=3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[33]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Hello World. Check 1 2 3.00&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;We will learn more neat tricks about &lt;code&gt;format&lt;/code&gt; method as we proceed through the modules. Keep an eye out for such tricks..&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---02.05-Built-in-String-Methods&#34;&gt;01 - 02.05 Built-in String Methods&lt;a class=&#34;anchor-link&#34; href=&#34;#01---02.05-Built-in-String-Methods&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that we know about the string and some basic manipulation on strings, lets look at some more built-in methods that can be used.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.01-capitalize&#34;&gt;.. 02.05.01 capitalize&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.01-capitalize&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It returns a copy of the string with only its first character capitalized.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Remember the same string is not modified because strings are immutable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[34]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capitalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[34]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.02-center&#34;&gt;.. 02.05.02 center&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.02-center&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Return the &lt;em&gt;input string&lt;/em&gt; centered in a string of length width. Padding is done using the specified fill character (default is a space).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[35]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[35]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;!!python!!&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.03-count&#34;&gt;.. 02.05.03 count&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.03-count&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The method count() returns the number of occurrences of a sub-string in the range [start, end].&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[36]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[36]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.04-endswith&#34;&gt;.. 02.05.04 endswith&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.04-endswith&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;TRUE if the string ends with the specified suffix, otherwise FALSE.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[37]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[37]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.05-find&#34;&gt;.. 02.05.05 find&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.05-find&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It determines if the sub string occurs in string. Optionally between beg and end. If found, it returns the index value. Otherwise returns -1&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[38]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;This is a test string&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[38]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;2&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.06-rfind&#34;&gt;.. 02.05.06 rfind&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.06-rfind&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Same as find() but searches backwards in string&lt;/p&gt;
&lt;h4 id=&#34;..-02.05.07-index&#34;&gt;.. 02.05.07 index&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.07-index&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Same as find but raises an exception if sub string is not found.&lt;/p&gt;
&lt;h4 id=&#34;..-02.05.08-isalnum&#34;&gt;.. 02.05.08 isalnum&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.08-isalnum&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns true if the string has at least one character and all characters are alphanumeric and false otherwise.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[39]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Welcome2015&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isalnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[39]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.09-join&#34;&gt;.. 02.05.09 join&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.09-join&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Concatenates the string representations of elements in sequence into a string, with separator string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[40]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[40]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.10-strip&#34;&gt;.. 02.05.10 strip&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.10-strip&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns a copy of string in which all chars have been stripped from the beginning and the end of the string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[41]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.......python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lstrip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[41]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.11-rstrip&#34;&gt;.. 02.05.11 rstrip&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.11-rstrip&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Removes all trailing whitespaces in a string.&lt;/p&gt;
&lt;h4 id=&#34;..-02.05.12-max&#34;&gt;.. 02.05.12 max&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.12-max&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns the maximum alphabetical character from the string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[42]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# This is very helpful when used with integers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[42]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;y&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.13-min&#34;&gt;.. 02.05.13 min&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.13-min&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns the minimum alphabetical character from the string.&lt;/p&gt;
&lt;h4 id=&#34;..-02.05.14-replace&#34;&gt;.. 02.05.14 replace&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.14-replace&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns a copy of the string with all occurrences of sub string old by new. If the optional argument max is given, only the first count occurrences are replaced.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[43]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is Python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;was&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[43]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Thwas is Python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.15-rjust&#34;&gt;.. 02.05.15 rjust&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.15-rjust&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns a space-padded string with the original string right-justified to a total width of width column&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[44]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[44]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;$$$$Python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05.16-split&#34;&gt;.. 02.05.16 split&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05.16-split&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Returns a &lt;code&gt;list&lt;/code&gt; of all the words in the string separated by a separator string.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We will study about lists a little later.. for now, just remember that it is one of the data structure of python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[45]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython2&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is Python&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[45]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;This&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;Python&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;These are the methods that you will end up using mostly. However, there are many more built in methods that you can access by pressing &lt;code&gt;tab&lt;/code&gt; key on your keyboard after typing the variable name whose type is &lt;code&gt;str&lt;/code&gt;. Go on.. try it.&lt;/p&gt;
&lt;p&gt;For official documentation on Python Strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3.4/library/string.html&#34;&gt;for python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/library/string.html&#34;&gt;for python2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>01-03 Numeric Types</title>
      <link>/tutorials/ucsl/01-03-numeric-types/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-03-numeric-types/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---03-Numeric-Types&#34;&gt;01 - 03 Numeric Types&lt;a class=&#34;anchor-link&#34; href=&#34;#01---03-Numeric-Types&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In python there are basically 3 built-in Numeric Data-Types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;complex&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---03.01-int&#34;&gt;01 - 03.01 int&lt;a class=&#34;anchor-link&#34; href=&#34;#01---03.01-int&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Integers are the most basic numeric type in python. Any number that does not contain a decimal point is considered as an integer and is of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An interesting difference between the &lt;code&gt;int&lt;/code&gt; type in python and other languages is that they are variable precision. This means that the integer computation on other languages will overflow at either $2^{31}$ or at $2^{63}$ (based on whether you have 32 bit or 64 bit CPU architecture). However in python, you can perform computation on numbers that are larger than these. (Actually the precision of a number can increase till your compute runs out of memory)&lt;/p&gt;
&lt;p&gt;Lets test it&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# this will crash on C&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[1]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1329227995784915872903807060280344576&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---03.02-float&#34;&gt;01 - 03.02 float&lt;a class=&#34;anchor-link&#34; href=&#34;#01---03.02-float&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Floating point numbers contain the numbers with decimal point.. that is they can hold the result of fractions or exponential numbers.&lt;/p&gt;
&lt;p&gt;Any integer can be converted to float by passing it to the float constructor&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[2]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;2.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2e4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[3]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;20000.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---03.03-Complex&#34;&gt;01 - 03.03 Complex&lt;a class=&#34;anchor-link&#34; href=&#34;#01---03.03-Complex&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Complex numbers are the numbers with real and imaginary parts. Just like int or float, we can construct a complex number by passing the arguments to complex constructor&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;(2+3j)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;real&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[7]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;2.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[8]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;3.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conjugate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# complex conjugate of c_val&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[10]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;(2-3j)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Magnitude of a complex number:&lt;/p&gt;
&lt;p&gt;i.e. $\sqrt{(c.real^2 + c.imag^2)}$&lt;/p&gt;
&lt;p&gt;can be obtained by using &lt;code&gt;abs&lt;/code&gt; function&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[11]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;3.605551275463989&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;We shall take a deeper look at these datatypes and the operations that can be performed on them in the Operators module.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>01-04 Operators</title>
      <link>/tutorials/ucsl/01-04-operators/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-04-operators/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---04-Operators&#34;&gt;01 - 04 Operators&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04-Operators&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operators in python are the constructs which can manipulate the value of operands. Simply put when operators are used with one or more than one operand, they produce some result. Consider a basic mathematical addition &lt;code&gt;1&lt;/code&gt; &lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt; &lt;code&gt;2&lt;/code&gt; in this case, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are operands and &lt;strong&gt;&lt;code&gt;+&lt;/code&gt;&lt;/strong&gt; is the operator. Operands can also be variables.
Python supports following types of operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arithmetic Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Relational (Comparison) Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assignment Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logical Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bitwise Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Membership Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Identity Operators&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.01-Arithmetic-Operators&#34;&gt;01 - 04.01 Arithmetic Operators&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.01-Arithmetic-Operators&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;As the name suggests, Arithmetic Operators includes all the operators to perform basic arithmetic functions.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.02-Addition-(+)&#34;&gt;.. 01.02 Addition (+)&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.02-Addition-(+)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Addition operator adds the value of the operands on its either side.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[1]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.03-Subtraction-(-)&#34;&gt;.. 01.03 Subtraction (-)&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.03-Subtraction-(-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Subtracts right hand operand with the operand on the left hand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[2]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.04-Multiplication-(-*-)&#34;&gt;.. 01.04 Multiplication ( * )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.04-Multiplication-(-*-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Multiplies the operands on its either sides and outputs the product.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[3]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.05-Division-(-/-)&#34;&gt;.. 01.05 Division ( / )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.05-Division-(-/-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Divides left hand operand with the right hand operand and outputs the quotient of the division.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[4]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.06-Modulus-(-%-)&#34;&gt;.. 01.06 Modulus ( % )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.06-Modulus-(-%-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Divides left hand operand with the right hand operate and outputs the remainder of the division.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[5]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.07-Exponential-(-**-)&#34;&gt;.. 01.07 Exponential ( ** )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.07-Exponential-(-**-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Performs exponential operation on the operands. The left hand operand is &#39;raised to&#39; the right hand operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[6]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;256&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-01.08-Floor-Division-(-//-)&#34;&gt;.. 01.08 Floor Division ( // )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-01.08-Floor-Division-(-//-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Divides the left hand operand with the right hand operand and outputs the quotient of the division removing the digits after decimal point.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[7]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.02-Relational-Operators&#34;&gt;01 - 04.02 Relational Operators&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.02-Relational-Operators&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Relational Operators compare the operands on either side and identifies the relation between them. These are also known as Comparison Operators.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.01-Equal-to-(-==-)&#34;&gt;.. 02.01 Equal to ( == )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.01-Equal-to-(-==-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of the two operands are equal, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[9]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.02-Not-Equal-to-(-!=-)&#34;&gt;.. 02.02 Not Equal to ( != )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.02-Not-Equal-to-(-!=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of two operands are not equal, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[10]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;False&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.03-Greater-than-(-&amp;gt;-)&#34;&gt;.. 02.03 Greater than ( &amp;gt; )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.03-Greater-than-(-&amp;gt;-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of the operand on the left hand side of the operator is greater than the value of the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[11]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;False&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.04-Less-than-(-&amp;lt;-)&#34;&gt;.. 02.04 Less than ( &amp;lt; )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.04-Less-than-(-&amp;lt;-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of the operand on the left hand side of the operator is less than the value of the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[12]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[12]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;False&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-02.05-Greater-than-OR-Equal-to-(-&amp;gt;=-)&#34;&gt;.. 02.05 Greater than OR Equal to ( &amp;gt;= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-02.05-Greater-than-OR-Equal-to-(-&amp;gt;=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of the operand on the left hand side of the operator is greater than or equal to the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[13]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[13]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;02.06-Less-than-OR-Equal-to-(-&amp;lt;=-)&#34;&gt;02.06 Less than OR Equal to ( &amp;lt;= )&lt;a class=&#34;anchor-link&#34; href=&#34;#02.06-Less-than-OR-Equal-to-(-&amp;lt;=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If the value of the operand on the left hand side of the operator is less than or equal to the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[14]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[14]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.03-Assignment-Operators&#34;&gt;01 - 04.03 Assignment Operators&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.03-Assignment-Operators&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Assignment operator is responsible for assigning some value to a variable. Example a = 2 .We have been doing this for quite sometime now, but assignment operator can be used in many other ways.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.01-Equals-(-=-)&#34;&gt;.. 03.01 Equals ( = )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.01-Equals-(-=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Assigns the value from right hand side operand to the left hand side operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[15]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.02-Add-AND-(-+=-)&#34;&gt;.. 03.02 Add AND ( += )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.02-Add-AND-(-+=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It is logically a two step process. In first step, the right hand side operand is added to the left hand side operand. In second step, the output of the first step is assigned to the operand on the left hand side.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[16]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a + 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.03-Subtract-AND-(--=-)&#34;&gt;.. 03.03 Subtract AND ( -= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.03-Subtract-AND-(--=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It is also a two step process where the right operand is subtracted from the left operand and the result is assigned to the left operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[17]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a - 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.04-Multiply-AND-(-*=-)&#34;&gt;.. 03.04 Multiply AND ( *= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.04-Multiply-AND-(-*=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The right operand is multiplied with the left operand and the result is assigned to the left operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[18]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a * 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.05-Divide-AND-(-/=-)&#34;&gt;.. 03.05 Divide AND ( /= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.05-Divide-AND-(-/=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The left operand is divided by the right operand and the quotient is assigned to the left operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[19]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a / 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.06-Modulus-AND-(-%=-)&#34;&gt;.. 03.06 Modulus AND ( %= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.06-Modulus-AND-(-%=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It takes the modulus of the two operands and assigns the result to the left operand&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[20]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a % 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.07-Exponent-AND-(-**=-)&#34;&gt;.. 03.07 Exponent AND ( **= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.07-Exponent-AND-(-**=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It performs the exponential operation on the two operands and assigns the value to the left operand&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[21]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a ** 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-03.08-Floor-Division-AND-(-//=-)&#34;&gt;.. 03.08 Floor Division AND ( //= )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-03.08-Floor-Division-AND-(-//=-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It performs floor division and assigns the quotient to the left operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[22]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# It is equivalent to a = a // 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.04-Bitwise-Operator&#34;&gt;01 - 04.04 Bitwise Operator&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.04-Bitwise-Operator&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Bitwise operator works on bits and performs operations bit by bit. Before we jump into the operator, lets revise the concept of Bits. At the smallest scale in computers, the information is stored in bits. Consider bit as a smallest unit of storage, just like an atom. A bit can only store binary values i.e 0&#39;s or 1&#39;s (but not both). n bits can store 2 to the power of n values (n 0&#39;s or 1&#39;s). Practically a bit is  very small for storage purposes, thus we deal with bytes which is equal to 8 bits. Then comes KiloBytes and MegaBytes and so on.. To understand the working of bitwise operators, we need to convert the operands to bits.&lt;/p&gt;
&lt;p&gt;To understand the conversion between decimal and binary numbers, watch this video:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https:/youtube.com/v/H4BstqvgBow&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/H4BstqvgBow/0.jpg&#34; alt=&#34;IMAGE ALT TEXT HERE&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;For examples below, we will be using a, b = 6, 10. In python binary equivalent can be obtained by using a built-in function bin() which basically converts the integer to binary representation. If you followed the tutorial video above you must be writing full 8-bit representation for even a small integer. Python&#39;s bin() however only prints the bits that are necessary for representing the integer. For example,&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[23]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# To print the binary equivalent of integer 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[23]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b110&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;It did not print leading zeros (0b00000110)&lt;/p&gt;
&lt;p&gt;The leading 0b is for python to understand that the string representation means a binary number and not a regular string. Lets dive into the bitwise operators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Let&#39;s get going with our examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[24]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.01-Binary-AND-(-&amp;amp;-)&#34;&gt;.. 04.01 Binary AND ( &amp;amp; )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.01-Binary-AND-(-&amp;amp;-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if and only if both the operands have 1 at same bit location&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[25]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[25]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b10&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.02-Binary-OR-(-|-)&#34;&gt;.. 04.02 Binary OR ( | )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.02-Binary-OR-(-|-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;(The key above Return/ Enter key)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if both the operands do not have 0 at same bit location.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[26]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[26]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b1110&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.03-Binary-XOR-(-^-)&#34;&gt;.. 04.03 Binary XOR ( ^ )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.03-Binary-XOR-(-^-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if and only if both the operands do not have same bit value at same location.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[27]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[27]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b1100&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.04-Binary-One&#39;s-Complement-(-~-)&#34;&gt;.. 04.04 Binary One&#39;s Complement ( ~ )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.04-Binary-One&#39;s-Complement-(-~-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator uses single operand and toggles the bit value at every location.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[28]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[28]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;-0b111&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.05-Binary-Left-Shift-(-&amp;lt;&amp;lt;-)&#34;&gt;.. 04.05 Binary Left Shift ( &amp;lt;&amp;lt; )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.05-Binary-Left-Shift-(-&amp;lt;&amp;lt;-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator shifts the bit location of the left operand towards left by the number of bits specified by the right operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[29]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[29]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b11000&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-04.06-Binary-Right-Shift-(-&amp;gt;&amp;gt;-)&#34;&gt;.. 04.06 Binary Right Shift ( &amp;gt;&amp;gt; )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-04.06-Binary-Right-Shift-(-&amp;gt;&amp;gt;-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Operator shifts the bit location of the left operand towards right by the number of bits specified by the right operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[30]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[30]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;0b1&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.05-Logical-Operators&#34;&gt;01 - 04.05 Logical Operators&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.05-Logical-Operators&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Python supports three logical operators viz AND, OR and NOT.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;05.01-AND-(-and-)&#34;&gt;05.01 AND ( and )&lt;a class=&#34;anchor-link&#34; href=&#34;#05.01-AND-(-and-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If both the operands are true, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;05.02-OR-(-or-)&#34;&gt;05.02 OR ( or )&lt;a class=&#34;anchor-link&#34; href=&#34;#05.02-OR-(-or-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;If any of the two operands are true, the condition becomes true.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;05.03-NOT-(not)&#34;&gt;05.03 NOT (not)&lt;a class=&#34;anchor-link&#34; href=&#34;#05.03-NOT-(not)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Reverses the logical state of the operand.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.06-Membership-Operator&#34;&gt;01 - 04.06 Membership Operator&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.06-Membership-Operator&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;This operator basically tests if the two operands are pointing at the same object or not. There are two types of membership operators:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-06.01-is&#34;&gt;.. 06.01 is&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.01-is&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It evaluates to true if the operands on both the sides of the operator point to the same object.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[31]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[32]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[32]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[33]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[33]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;&lt;strong&gt;So, does this mean that &lt;code&gt;==&lt;/code&gt; is same as &lt;code&gt;is&lt;/code&gt; operator? &lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[34]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[34]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4370377680&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[35]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[35]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4370377680&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Python keeps an array of integer objects for all integers between -5 and 256, when you create an &lt;code&gt;int&lt;/code&gt; in that range you actually just get back a reference to the existing object!&lt;/p&gt;
&lt;p&gt;This means that if you check the &lt;code&gt;id()&lt;/code&gt; for any integer between -5 and 256 (both included), they will turn out to be the same everytime.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[36]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[36]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4370380560&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[37]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[37]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4370380560&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Now if I try to find the &lt;code&gt;id()&lt;/code&gt; for any integer &lt;em&gt;except&lt;/em&gt; between -5 and 256, I will get different id&#39;s everytime&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(try running the following two cells multiple times and see the different id&#39;s being returned everytime)&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[38]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[38]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4401733840&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[39]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[39]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;4401734032&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;For more information you can refer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers&#34;&gt;Stackoverflow&lt;/a&gt; question as pointed out by Ben Miller (&lt;em&gt;Student&lt;/em&gt; NYU CUSP 2017 Cohort).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong&#34;&gt;Python C-API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-06.02-Is-Not&#34;&gt;.. 06.02 Is Not&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.02-Is-Not&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It evaluates to true if both the operands do not point to the same object.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[40]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[40]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;False&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---04.07-Identity-Operator&#34;&gt;01 - 04.07 Identity Operator&lt;a class=&#34;anchor-link&#34; href=&#34;#01---04.07-Identity-Operator&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It is same as the python&#39;s Membership operator.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Exercise:&#34;&gt;Exercise:&lt;a class=&#34;anchor-link&#34; href=&#34;#Exercise:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What will be the output of 3 / 2 ?
Is the output of 3.0/2 and 3 / 2 the same? Why or Why not?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is &#39;Six&#39; == &#39;six&#39; ?If not, why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try assigning &lt;code&gt;a&lt;/code&gt; to the power of &lt;code&gt;2&lt;/code&gt;, to the power of &lt;code&gt;2&lt;/code&gt;, to the power of &lt;code&gt;2&lt;/code&gt;. (i.e. $a = {{a^2}^2}^2 $)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Implement your own decimal to 8-bit binary converter. Convert decimal number 88 and see if the output is 01011000 .&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[41]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[42]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[42]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[43]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[43]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;What is the difference between &#39; == &#39; and &#39; is &#39; operator? Are they the same?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>01-05 Control Flow</title>
      <link>/tutorials/ucsl/01-05-control-flow/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/01-05-control-flow/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---05-Control-Flow&#34;&gt;01 - 05 Control Flow&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05-Control-Flow&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Generally, a program is executed sequentially and once executed it is not repeated again. There may be a situation when you need to execute a piece of code n number of times, or maybe even execute certain piece of code based on a particular condition.. this is where the control flow statements come in.&lt;/p&gt;
&lt;p&gt;In this module, we will be covering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conditional statements -- &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elif&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Loop statements -- &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Loop control statetements -- &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;pass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;01---05.01-Conditional-Statements&#34;&gt;01 - 05.01 Conditional Statements&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05.01-Conditional-Statements&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Conditionals statements are used to change the flow of execution. You can use the relational operators, logical operators and membership operators for performing condition checks&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Best Match&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Close Enough&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;This is Blasphemy!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;Best Match
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The logic is very simple.. &lt;em&gt;&lt;code&gt;if&lt;/code&gt;&lt;/em&gt; &amp;lt; &lt;code&gt;condition_is_met&lt;/code&gt; &amp;gt;, &lt;em&gt;&lt;code&gt;then&lt;/code&gt;&lt;/em&gt; do something; &lt;em&gt;&lt;code&gt;else&lt;/code&gt;&lt;/em&gt; do something else.&lt;/p&gt;
&lt;p&gt;Python adopts the &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; clause as it is used in many languages.. However the &lt;code&gt;elif&lt;/code&gt; part is unique to python. &lt;code&gt;elif&lt;/code&gt; simply is a contraction for &lt;code&gt;else if&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---05.02-Loop-Statements&#34;&gt;01 - 05.02 Loop Statements&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05.02-Loop-Statements&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These statements are used when we want to execute a piece of code multiple times. Python has two types of loops -- &lt;code&gt;for&lt;/code&gt; loop and &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;0
1
2
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;In &lt;code&gt;for&lt;/code&gt; loop, we specify the variable we want to use, the &lt;code&gt;iterator&lt;/code&gt; we want to loop over, and use the &lt;code&gt;in&lt;/code&gt; (membership) operator to link them together.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;2
1
0
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;As you can see, they both serve different purposes. For loop is used when you want to run something for fixed amount of times, whereas while loop can theoretically run forever (if you use something like &lt;code&gt;while True:&lt;/code&gt; .. &lt;em&gt;dont!&lt;/em&gt; ).&lt;/p&gt;
&lt;p&gt;One of the most commonly used &lt;code&gt;iterator&lt;/code&gt; with for loop is the &lt;code&gt;range&lt;/code&gt; object which is used to generate the sequence of numbers&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[4]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; requires the &lt;em&gt;stop&lt;/em&gt; argument. It can also accept &lt;em&gt;start&lt;/em&gt; (at first position) and &lt;em&gt;step&lt;/em&gt; (at third position) as arguments but if not passed, it creates a sequence of numbers from &lt;code&gt;0&lt;/code&gt; till &lt;code&gt;stop - 1&lt;/code&gt;. Remember, the &lt;em&gt;stop&lt;/em&gt; is not included in the output&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# With start and stop&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[5]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# With start, stop and step&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[6]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[2, 4, 6, 8, 10, 12, 14, 16, 18]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;When you have an iterator of iterators .. for example a list of lists .. then you can use what is known as nested loops to flatten the list.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# This is not the best way.. but for the sake of completion of&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# topic, this example is included.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;0
1
2
3
4
5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---05.03-Loop-Control-Statements&#34;&gt;01 - 05.03 Loop Control Statements&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05.03-Loop-Control-Statements&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Loop control statements change the executing of loop from its normal sequence.&lt;/p&gt;
&lt;h4 id=&#34;..-05.03.01-Break&#34;&gt;.. 05.03.01 Break&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.03.01-Break&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;It terminates the current loop and resumes the execution at the next statement. The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. The break statement can be used in both while and for loops.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Condition satisfied&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# What would happen if this is placed before if condition?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;1
2
3
4
Condition satisfied
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.03.02-Continue&#34;&gt;.. 05.03.02 Continue&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.03.02-Continue&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Continue statement returns the control to the beginning of the loop. The continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Condition satisfied&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;whatever.. I won&amp;#39;t get printed anyways.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;1
2
3
4
Condition satisfied
6
7
8
9
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.03.03-Pass&#34;&gt;.. 05.03.03 Pass&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.03.03-Pass&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Pass is used when a statement is required syntactically but performs a null operation i.e. nothing happens when the statement is executed.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Condition satisfied&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;1
2
3
4
Condition satisfied
5
6
7
8
9
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;As you can see execution of pass statement had no effect on the flow of the code. It wouldn&#39;t have mattered if it was not there.&lt;/p&gt;
&lt;p&gt;It is generally used as a temporary placeholder for an unimplemented logic. For example lets say you have written a function (we&#39;ll learn about functions a little later) and want to test the remaining part of code without actually running your function.. You can use pass statement in such cases. Python interpreter will read that and skip that part and get on with further execution.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;01---05.04-Loops-with-else&#34;&gt;01 - 05.04 Loops with else&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05.04-Loops-with-else&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python&#39;s Loop statements can be accompanies with an else block in cases where a certain block of code needs to be executed after the loop has successfully completed its execution i.e. iff the loop didn&#39;t &lt;code&gt;break&lt;/code&gt; out in the middle of execution&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;best&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Excellent&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Couldn&amp;#39;t find the best match&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;Couldn&amp;#39;t find the best match
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Now if we change the &lt;code&gt;best&lt;/code&gt; to something less than &lt;code&gt;10&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[12]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;best&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Excellent&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Couldn&amp;#39;t find the best match&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;Excellent
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;You can implement similar functionality using the &lt;code&gt;while&lt;/code&gt; loop&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>02-00 Python in Practice</title>
      <link>/tutorials/ucsl/02-00-python-in-practice/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/02-00-python-in-practice/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;02---00-Python-in-Practice&#34;&gt;02 - 00 Python in Practice&lt;a class=&#34;anchor-link&#34; href=&#34;#02---00-Python-in-Practice&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the previous modules, we learnt about python&#39;s built-in &#39;simple&#39; types. In this module, we will learn about the different ways in which the data of those types can be organized, so that it can be used (algorithmically) efficiently.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;we have already covered &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;complex&lt;/code&gt;. Here, we will also introduce the remaining two -- &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; python&#39;s built-in types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will also take a look at how to reduce code duplication and improve code readability by using Functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally we will look at Exception Handling in which we will learn about ways of making our code handle the errors without crashing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Data-Structures&#34;&gt;Data Structures&lt;a class=&#34;anchor-link&#34; href=&#34;#Data-Structures&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Python&#39;s most basic data structure is the &lt;code&gt;sequence&lt;/code&gt;. Each element of a sequence is assigned a number known as index number. Different types of sequences in Python are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Text sequence types e.g. &lt;code&gt;str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Binary sequence types e.g. &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python has several built-in data structures (or compound types) that act as containers and hold the other types. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>02-01 Lists</title>
      <link>/tutorials/ucsl/02-01-lists/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/02-01-lists/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;Data-Structures&#34;&gt;Data Structures&lt;a class=&#34;anchor-link&#34; href=&#34;#Data-Structures&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the previous modules, we learnt about python&#39;s built-in &#39;simple&#39; types. In this module, we will learn about the different ways in which the data of those types can be organized, so that it can be used (algorithmically) efficiently.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;we have already covered &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;complex&lt;/code&gt;. Here, we will also introduce the remaining two -- &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; python&#39;s built-in types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python&#39;s most basic data structure is the &lt;code&gt;sequence&lt;/code&gt;. Each element of a sequence is assigned a number known as index number. Different types of sequences in Python are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Text sequence types e.g. &lt;code&gt;str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Binary sequence types e.g. &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python has several built-in data structures (or compound types) that act as containers and hold the other types. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---05-Lists&#34;&gt;01 - 05 Lists&lt;a class=&#34;anchor-link&#34; href=&#34;#01---05-Lists&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; is the most versatile datatype available in Python which can be written as a &lt;code&gt;list&lt;/code&gt; of comma-separated values between square brackets. Creating a list is as simple as putting different items separated by comma between square brackets.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Notice the mix data types&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Contents of my_list: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Type: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;Contents of my_list: [&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415].
Type: &amp;lt;type &amp;#39;list&amp;#39;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;\n&lt;/code&gt; is the escape character for line break&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python is zero-index based, thus to get the first item we simply ask for the item/ element on the 0th index.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[2]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Python&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;We will now briefly go over the basic list manipulations (which are similar to strings) and then look at some more methods that makes lists unique.&lt;/p&gt;
&lt;h4 id=&#34;..-05.01-Slicing-the-List&#34;&gt;.. 05.01 Slicing the List&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.01-Slicing-the-List&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A shallow copy of the list is performed and a new list is created containing the requested elements.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Performs shallow copy and returns a **new** list with first two elements&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# [:2] means between start=0 and stop=2 index values (excluding stop)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[3]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The slicing can also  be done to get the &lt;strong&gt;n-th&lt;/strong&gt; value from a list by passing n as the third argument.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[4]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;Julia&amp;#39;, 3.1415]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Remember, it doesn&amp;#39;t include the nth index value when traversing a list.&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Take every element between index value -3 and -2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[5]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;Julia&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.02-Updating-the-List&#34;&gt;.. 05.02 Updating the List&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.02-Updating-the-List&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Unlike strings and tuples which are immutable, elements in list can be changed without having to create a new list, thus making it mutable.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Java&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Original Contents: &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Original Length of array: &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Remove some elements/ changing the size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Modified Contents: &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Modified Length of array: &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;(&amp;#39;Original Contents: \n&amp;#39;, [&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, &amp;#39;Java&amp;#39;, 3.1415])
(&amp;#39;Original Length of array: \n&amp;#39;, 4)
(&amp;#39;Modified Contents: \n&amp;#39;, [&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;])
(&amp;#39;Modified Length of array: \n&amp;#39;, 2)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.03-Appending-to-the-List&#34;&gt;.. 05.03 Appending to the List&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.03-Appending-to-the-List&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;New items can be easily added to the list by using the &lt;code&gt;append()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C++&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# It will append the item to the end of the list&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415, &amp;#39;C++&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.04-Copying-Lists&#34;&gt;.. 05.04 Copying Lists&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.04-Copying-Lists&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There are many ways to create a copy of the lists in python. Lets take a look at few techniques:&lt;/p&gt;
&lt;h5 id=&#34;using-copy-package&#34;&gt;using copy package&lt;a class=&#34;anchor-link&#34; href=&#34;#using-copy-package&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;copy packages is packaged with the python so you don&#39;t have to install it externally to use it. So what is the reason of creating a separate package? From our first week&#39;s session on variables, we know that it is very easy to create copy of objects,right? We do know one thing for sure that assignment statements ( &#39;=&#39; ) in python do not copy the objects, they merely create bindings between the target and the object, right? It so happens that for collections that are mutable or contains mutable items, a copy is sometimes needed so that one can change the content of the mutable item without changing the other. There are actually two ways of creating a copy of an object viz: shallow copy and deep copy. In shallow copy, python constructs a new object and then inserts references to into it that are found in the original list, whereas deepcopy, as you must&#39;ve guessed it, creates an object and copies everything. (If you are curious to know more about it, head over the &lt;a href=&#34;https://docs.python.org/3.4/library/copy.html&#34;&gt;&lt;code&gt;official documentation&lt;/code&gt;&lt;/a&gt; )&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;copy&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Shallow copy.. Fast&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deepcopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Deep copy.. Slower&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;using-slice&#34;&gt;using slice&lt;a class=&#34;anchor-link&#34; href=&#34;#using-slice&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;using-list-constructor&#34;&gt;using list constructor&lt;a class=&#34;anchor-link&#34; href=&#34;#using-list-constructor&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# when list method takes a list as a parameter, it creates a copy of that list&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.05-Delete-List-Elements&#34;&gt;.. 05.05 Delete List Elements&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.05-Delete-List-Elements&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To remove the list elements, one has two options to either use del statement or lists&#39;s remove method ( will be discussed later ).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;del&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[11]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[1, 2, 3, 4]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.06-Nested-Lists&#34;&gt;.. 05.06 Nested Lists&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.06-Nested-Lists&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;It is also possible to create a list of the lists.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[12]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[12]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[[1, 2, 3, 4, 5], [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;]]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.07-List-Concatenation,-Repetition,-Membership:&#34;&gt;.. 05.07 List Concatenation, Repetition, Membership:&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.07-List-Concatenation,-Repetition,-Membership:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;These are simple list manipulation methods similar to strings. Take a look at following example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[13]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# List Concatenation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[13]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[1, 2, 3, 4, 5, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[14]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# List Repition&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[14]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[15]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Membership operator, returns true if member of list&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[15]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.08-Traversing-a-list:&#34;&gt;.. 05.08 Traversing a list:&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.08-Traversing-a-list:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The most straightforward way to traverse a list is using loops:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We will look at loops in detail in loops module&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;for-loop:&#34;&gt;for loop:&lt;a class=&#34;anchor-link&#34; href=&#34;#for-loop:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[16]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Lets traverse using the index numbers&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[17]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# start from 0 and go till the length of the list.&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my_list[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;] : &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;my_list[0] : 1
my_list[1] : 2
my_list[2] : 3
my_list[3] : 4
my_list[4] : 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;While-loop:&#34;&gt;While loop:&lt;a class=&#34;anchor-link&#34; href=&#34;#While-loop:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Just like for loop, we can traverse the list based on its index numbers (again, we&#39;ll learn about loops in next module):&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[18]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# till index is less than length of list&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my_list[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;] : &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# increment index by 1 at every iteration&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;my_list[0] : 1
my_list[1] : 2
my_list[2] : 3
my_list[3] : 4
my_list[4] : 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.09-enumerate(-)&#34;&gt;.. 05.09 enumerate( )&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.09-enumerate(-)&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Python has a built-in method called enumerate which returns both index value and value of list ( or any other iterable object).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[19]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;my_list[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;] : &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;my_list[0] : 1
my_list[1] : 2
my_list[2] : 3
my_list[3] : 4
my_list[4] : 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;05.10-List-Comprehension&#34;&gt;05.10 List Comprehension&lt;a class=&#34;anchor-link&#34; href=&#34;#05.10-List-Comprehension&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;List comprehension is a syntactic way of creating a list based on the existing list, just like we did in copying the lists above. 
The basic structure of the syntax includes a for loop that traverses the list and evaluates a condition using if.. else condition and stores the output of the condition as a new list. Lets take a look at a quick example.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[20]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[2, 4]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;We simply create a list &lt;code&gt;my_list1&lt;/code&gt; from the elements in &lt;code&gt;my_list&lt;/code&gt; that are completely divisible by 2.&lt;/p&gt;
&lt;p&gt;There are many ways in which the list comprehension can be used. It is just a shorthand of writing better readable code.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;05.11-Built--in-List-Functions-and-Methods:&#34;&gt;05.11 Built- in List Functions and Methods:&lt;a class=&#34;anchor-link&#34; href=&#34;#05.11-Built--in-List-Functions-and-Methods:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Python provides following methods for lists:&lt;/p&gt;
&lt;h5 id=&#34;max:&#34;&gt;max:&lt;a class=&#34;anchor-link&#34; href=&#34;#max:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the elements from the list with maximum value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[21]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[21]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;3&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;What do you think will happen if we compare a list of the lists (nested list)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;min:&#34;&gt;min:&lt;a class=&#34;anchor-link&#34; href=&#34;#min:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the element from the list with minimum value.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[22]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[22]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list:&#34;&gt;list:&lt;a class=&#34;anchor-link&#34; href=&#34;#list:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method takes sequence types and converts them to lists. This is also used to convert a tuple to list.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[23]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# iterable as a tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[23]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;The above line might be a little confusing. &lt;code&gt;list&lt;/code&gt; is a built-in function which can either create an empty list if it is called with no parameters, or create a new list of the iterable/ sequence that it is given as an input. That means that list can at most 1 argument. Thus we have to put our elements in a circular bracket (which makes it a &lt;code&gt;tuple&lt;/code&gt;, btw) and then pass it as an argument to list method.&lt;/p&gt;
&lt;h5 id=&#34;list.count(obj):&#34;&gt;list.count(obj):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.count(obj):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the number of times the object, that is passed as a parameter, occurs in the list.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[24]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[24]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.extend(seq):&#34;&gt;list.extend(seq):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.extend(seq):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method appends the contents of a sequence to a list.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Equivalent operation using slicing -- &lt;code&gt;my_list1[len(my_list1):] = my_list2&lt;/code&gt; and print &lt;code&gt;my_list1&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[25]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C++&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Java&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.7182&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415, &amp;#39;C++&amp;#39;, &amp;#39;Java&amp;#39;, 2, 2.7182]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.index(obj):&#34;&gt;list.index(obj):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.index(obj):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the lowest index in the list that object appears.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[26]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[26]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.insert(index,-obj):&#34;&gt;list.insert(index, obj):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.insert(index,-obj):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method is used to insert the object at the offset index.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[27]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.7182&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 2.7182, 3.1415]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.pop(obj-=-list[-1]):&#34;&gt;list.pop(obj = list[-1]):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.pop(obj-=-list[-1]):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method removes and returns the removed object from the list. If you don&#39;t pass the argument to the function, it will by default &lt;code&gt;pop&lt;/code&gt; the last element from the list&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[28]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# pop the last element&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[28]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;&amp;#39;Julia&amp;#39;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.remove(obj):&#34;&gt;list.remove(obj):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.remove(obj):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method is used to remove the object from the list. The &lt;code&gt;object&lt;/code&gt; to be removed should be passed as an argument to the function. Unlike pop, this does not return anything.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[29]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[&amp;#39;Python&amp;#39;, 1, 3.1415]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.reverse():&#34;&gt;list.reverse():&lt;a class=&#34;anchor-link&#34; href=&#34;#list.reverse():&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method reverses the objects of list in place&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[30]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;[3.1415, 1, &amp;#39;Julia&amp;#39;, &amp;#39;Python&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;list.sort([func]):&#34;&gt;list.sort([func]):&lt;a class=&#34;anchor-link&#34; href=&#34;#list.sort([func]):&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method sorts objects of list by using the compare function passed as optional parameter. You can also sort the string in reverse by passing the optional parameter &lt;code&gt;reverse=True&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[31]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Sorted:         &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Reverse Sorted: &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;(&amp;#39;Sorted:         &amp;#39;, [1, 2, 6, 7, 9])
(&amp;#39;Reverse Sorted: &amp;#39;, [9, 7, 6, 2, 1])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h4 id=&#34;..-05.12-Performance-Characteristics:&#34;&gt;.. 05.12 Performance Characteristics:&lt;a class=&#34;anchor-link&#34; href=&#34;#..-05.12-Performance-Characteristics:&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The list has following performance characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The list object stores pointers to objects, not the actual objects themselves. The size of a list in memory depends on the number of objects in the list, not the size of the objects.&lt;/li&gt;
&lt;li&gt;The time needed to get or set an individual item is constant, no matter what the size of the list is (also known as ‚Äú&lt;code&gt;O(1)&lt;/code&gt;‚Äù behaviour).&lt;/li&gt;
&lt;li&gt;The time needed to append an item to the list is ‚Äúamortized constant‚Äù; whenever the list needs to allocate more memory, it allocates room for a few items more than it actually needs, to avoid having to reallocate on each call (this assumes that the memory allocator is fast; for huge lists, the allocation overhead may push the behaviour towards &lt;code&gt;O(n\*n)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The time needed to insert an item depends on the size of the list, or more exactly, how many items that are to the right of the inserted item (&lt;code&gt;O(n)&lt;/code&gt;). In other words, inserting items at the end is fast, but inserting items at the beginning can be relatively slow, if the list is large.&lt;/li&gt;
&lt;li&gt;The time needed to remove an item is about the same as the time needed to insert an item at the same location; removing items at the end is fast, removing items at the beginning is slow.&lt;/li&gt;
&lt;li&gt;The time needed to reverse a list is proportional to the list size (&lt;code&gt;O(n)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The time needed to sort a list varies; the worst case is &lt;code&gt;O(n log n)&lt;/code&gt;, but typical cases are often a lot better than that.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

</description>
    </item>
    
    <item>
      <title>02-02 Tuples</title>
      <link>/tutorials/ucsl/02-02-tuples/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/ucsl/02-02-tuples/</guid>
      <description>&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h2 id=&#34;01---06-Tuples&#34;&gt;01 - 06 Tuples&lt;a class=&#34;anchor-link&#34; href=&#34;#01---06-Tuples&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Python tuple is much like a list except that it is immutable or unchangeable once created. Tuples use parentheses and creating them is as easy as putting different items separated by a comma between parentheses.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[1]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;tuple&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Pretty easy.. so the next question is why do we need a new datatype? The answer can be summed up in three points:&lt;/p&gt;
&lt;p&gt;Tuples are faster than lists. If you ever defined a set of constant values and all you ever want to do is read those values, you should use tuples instead of lists
Safer Code. Tuples are like &#39;write-protected&#39; lists so that the data cannot be changed by accident.
Tuples are using in string formatting (we will see this in some examples below)&lt;/p&gt;
&lt;h3 id=&#34;..-06.01-Creating-a-Tuple&#34;&gt;.. 06.01 Creating a Tuple&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.01-Creating-a-Tuple&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We already saw one example above on how to create tuples with multiple items but to create a tuple with a single item, you need to include a comma after the first item.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;See what happens when you don&#39;t enter comma. What is the &lt;code&gt;type&lt;/code&gt; of such object?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;..-06.02-Slicing-the-Tuple&#34;&gt;.. 06.02 Slicing the Tuple&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.02-Slicing-the-Tuple&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Slicing a tuple is similar to slicing a list.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# -ve sign indicates -ve indexing. So start from right and skip 2 elements&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[::&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;(&amp;#39;Python&amp;#39;,)
(3.1415, &amp;#39;Julia&amp;#39;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;From above example we can observe that just like lists, slicing a tuple returns a new shallow copied tuple containing the requested items.&lt;/p&gt;
&lt;h3 id=&#34;..-06.03-Tuple-Concatentation,-Repetition,-Membership&#34;&gt;.. 06.03 Tuple Concatentation, Repetition, Membership&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.03-Tuple-Concatentation,-Repetition,-Membership&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Tuples are immutable objects which means that yo cannot update, append, remove, modify the items in the tuple. However what you can do is take items from different tuples and create new tuples with those. Let&#39;s take a look at some examples:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Tuple Concatentation&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[4]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;(1, 2, 3, 4, 5, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Tuple Repetition&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[5]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Membership operator, returns true if member of tuple&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[6]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;True&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;06.04-Nested-Tuples&#34;&gt;06.04 Nested Tuples&lt;a class=&#34;anchor-link&#34; href=&#34;#06.04-Nested-Tuples&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It is also possible to create a tuple of tuples or tuple of lists.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1415&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# List of tuples is possible too!&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Concatenating the list and converting to tuple. &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Then adding two tuples and storing it in another tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[7]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;(&amp;#39;Python&amp;#39;, &amp;#39;Julia&amp;#39;, 1, 3.1415, (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;), 1, 2, 3, 4, 5)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;lt;img src=&#34;./images/addnl_info.png&#34;, width=30, height=30, align=&#39;left&#39;&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember, we cannot concatenate a &lt;code&gt;list&lt;/code&gt; and a &lt;code&gt;tuple&lt;/code&gt; so we concatenate two lists and convert the new list into tuple by using the tuple built-in function. Then we concatenate that to tuple1 and store the new tuple as tuple2.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;..-06.05-Traversing-a-Tuple&#34;&gt;.. 06.05 Traversing a Tuple&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.05-Traversing-a-Tuple&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Tuples can be traversed using the index value of the items. The most straightforward way of traversing a tuple is by using loops.
Example: (extending the above example and using the items of tuple2)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ind&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;tuple2[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{0[0]}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;]: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{0[1]}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt&#34;&gt;&lt;/div&gt;


&lt;div class=&#34;output_subarea output_stream output_stdout output_text&#34;&gt;
&lt;pre&gt;tuple2[0]: Python
tuple2[1]: Julia
tuple2[2]: 1
tuple2[3]: 3.1415
tuple2[4]: (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;)
tuple2[5]: (&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;)
tuple2[6]: 1
tuple2[7]: 2
tuple2[8]: 3
tuple2[9]: 4
tuple2[10]: 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Almost everything that we did in lists apply over here. Ofcourse, except for the fact that we can modify the lists items but not the tuples. Remember, tuples are immutable.&lt;/p&gt;
&lt;h4 id=&#34;..-06.06-Tuple-Comprehension&#34;&gt;.. 06.06 Tuple Comprehension&lt;a class=&#34;anchor-link&#34; href=&#34;#..-06.06-Tuple-Comprehension&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We know that list comprehension is performed using a for loop that traverses the list and evaluates a condition using if.. else condition and creates a new list with the output. So for tuples it should be same as the list, right? Let&#39;s see:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Same example as in list comprehension&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;2&lt;/span&gt; == 0)
&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[9]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;generator&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[10]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;2&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;p&gt;Remember when we talked about list comprehension and got all happy looking at such an easier way to create new lists? It so happens that the &#39;comprehension&#39; for lists and dictionaries is just a syntactic sugar to use a generator expression that outputs a specific type.&lt;/p&gt;
&lt;p&gt;We learned the basics about generators when we saw &lt;code&gt;range&lt;/code&gt; function. List comprehension, under the covers, creates a generator expression that outputs a list (just like we did above using next() method). Now that you know the truth behind the comprehension you might feel that you don&#39;t need list comprehension but believe me, it is awfully handy for lists when you start writing your codes in python using lists. So if you want  to use comprehension in tuples, you will get a generator expression and you can obtain your results using the next method. This also doesn&#39;t require the invention of another brace or bracket.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;How do you obtain all the elements of generator without using loops? &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h3 id=&#34;06.07-Built-in-Tuple-Functions-and-Methods&#34;&gt;06.07 Built-in Tuple Functions and Methods&lt;a class=&#34;anchor-link&#34; href=&#34;#06.07-Built-in-Tuple-Functions-and-Methods&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python provides following methods for tuples:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;tuple.count()&#34;&gt;tuple.count()&lt;a class=&#34;anchor-link&#34; href=&#34;#tuple.count()&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the number of times the object, that is passed as a parameter, occurs in the tuple.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[11]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing text_cell rendered&#34;&gt;&lt;div class=&#34;prompt input_prompt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
&lt;div class=&#34;text_cell_render border-box-sizing rendered_html&#34;&gt;
&lt;h5 id=&#34;tuple.index()&#34;&gt;tuple.index()&lt;a class=&#34;anchor-link&#34; href=&#34;#tuple.index()&#34;&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This method returns the lowest index in the tuple that object appears at.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;cell border-box-sizing code_cell rendered&#34;&gt;
&lt;div class=&#34;input&#34;&gt;
&lt;div class=&#34;prompt input_prompt&#34;&gt;In&amp;nbsp;[12]:&lt;/div&gt;
&lt;div class=&#34;inner_cell&#34;&gt;
    &lt;div class=&#34;input_area&#34;&gt;
&lt;div class=&#34; highlight hl-ipython3&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;output_wrapper&#34;&gt;
&lt;div class=&#34;output&#34;&gt;


&lt;div class=&#34;output_area&#34;&gt;

&lt;div class=&#34;prompt output_prompt&#34;&gt;Out[12]:&lt;/div&gt;




&lt;div class=&#34;output_text output_subarea output_execute_result&#34;&gt;
&lt;pre&gt;2&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
 

</description>
    </item>
    
  </channel>
</rss>
