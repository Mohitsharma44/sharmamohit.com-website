<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mohit Sharma</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Mohit Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Aug 2015 01:34:02 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CitySynth</title>
      <link>http://localhost:1313/My_Projects/CitySynth/</link>
      <pubDate>Sat, 29 Aug 2015 01:34:02 -0400</pubDate>
      
      <guid>http://localhost:1313/My_Projects/CitySynth/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using_3rd_Party_API</title>
      <link>http://localhost:1313/Talks/Using_3rd_Party_API/</link>
      <pubDate>Sat, 29 Aug 2015 01:31:14 -0400</pubDate>
      
      <guid>http://localhost:1313/Talks/Using_3rd_Party_API/</guid>
      <description></description>
    </item>
    
    <item>
      <title>about_me</title>
      <link>http://localhost:1313/About_Me/about_me/</link>
      <pubDate>Sat, 29 Aug 2015 01:30:25 -0400</pubDate>
      
      <guid>http://localhost:1313/About_Me/about_me/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python_Pandas</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Pandas/</link>
      <pubDate>Sat, 15 Aug 2015 06:59:38 +0000</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Pandas/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Pandas&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt; is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.
Pandas provides high-performance, easy-to-use data structures and data analysis tools for the Python programming language. To get started with pandas, you will need to get comfortable with its two workhorse data structures: Series and DataFrame.&lt;/p&gt;

&lt;h2 id=&#34;series:77ccdc8aecae1fc4c165444157437890&#34;&gt;Series&lt;/h2&gt;

&lt;p&gt;Pandas Series is a one-dimensional array-like object that has index and value just like Numpy. Infact if you view the type of the &lt;code&gt;values&lt;/code&gt; of series object, you will see that it indeed is &lt;code&gt;numpy.ndarray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can assign name to pandas Series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import pandas as pd
import numpy as np
%matplotlib inline


ob = pd.Series([8,7,6,5], name=&#39;test_data&#39;)
print &#39;Name: &#39;,ob.name
print &#39;Data:\n&#39;,ob
print &#39;Type of Object: &#39;,type(ob)
print &#39;Type of elements:&#39;,type(ob.values)

Name:  test_data
Data:
0    8
1    7
2    6
3    5
Name: test_data, dtype: int64
Type of Object:  &amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
Type of elements: &amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use your numpy array and convert them to Series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ob = pd.Series(np.linspace(5, 8, num=4, dtype=int)[::-1]) # np.linspace(5,8,num=4,dtype=int) = Evenly spaced integers 
# between 5 to 8 (reversed)
print ob
print type(ob)

0    8
1    7
2    6
3    5
dtype: int64
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also provide custom index to the values and just like in Numpy, access them with the index.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ob = pd.Series([8,7,6,5], index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])
print ob[&#39;b&#39;]

7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pandas Series is more like an fixed size dictionary whose mapping of index-value is preserved when array operations are applied to them. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print ob[(ob&amp;gt;4) &amp;amp; (ob&amp;lt;8)] # select all the values greater than 4 and less than 8
# or lets apply numpy&#39;s exp function to calculate exponential of all elements 
#print np.exp(ob)

b    7
c    6
d    5
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This also means that if you have a dictionary, you can easily convert that into pandas series.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;State1&#39;: &#39;Alabama&#39;, &#39;State2&#39;: &#39;California&#39;, &#39;State3&#39;: &#39;New Jersey&#39;, &#39;State4&#39;: &#39;New York&#39;}
ob = pd.Series(states_dict)
print ob
print type(ob)

State1       Alabama
State2    California
State3    New Jersey
State4      New York
dtype: object
&amp;lt;class &#39;pandas.core.series.Series&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like dictionaries, you can also change the index..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ob.index = [&#39;AL&#39;,&#39;CA&#39;,&#39;NJ&#39;,&#39;NY&#39;]
print ob

AL       Alabama
CA    California
NJ    New Jersey
NY      New York
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or use dictionary&amp;rsquo;s method to get the label..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ob.get(&#39;CA&#39;, np.nan)




&#39;California&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dataframe:77ccdc8aecae1fc4c165444157437890&#34;&gt;Dataframe&lt;/h2&gt;

&lt;p&gt;Dataframe is something like spreadsheet or a sql table. It is basically a 2 dimensional labelled data structure with columns of potentially different datatype. Like Series, DataFrame accepts many different kinds of input:
* Dict of 1D ndarrays, lists, dicts, or Series
* 2-D numpy.ndarray
* &lt;a href=&#34;http://docs.scipy.org/doc/numpy/user/basics.rec.html&#34; title=&#34;Structured or record ndarray&#34;&gt;&lt;code&gt;Structured or record ndarray&lt;/code&gt;&lt;/a&gt;
* A Series
* Another DataFrame&lt;/p&gt;

&lt;p&gt;Compared with other such DataFrame-like structures you may have used before (like &lt;code&gt;R’s&lt;/code&gt; &lt;code&gt;data.frame&lt;/code&gt;), row- oriented and column-oriented operations in DataFrame are treated roughly symmetrically. Under the hood, the data is stored as one or more two-dimensional blocks rather than a list, dict, or some other collection of one-dimensional arrays.&lt;/p&gt;

&lt;h3 id=&#34;creating-dataframes-from-dictionaries:77ccdc8aecae1fc4c165444157437890&#34;&gt;Creating Dataframes from dictionaries&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;data = {&#39;one&#39; : pd.Series([1., 2., 3.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]),
    &#39;two&#39; : pd.Series([1., 2., 3., 4.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])}


df = pd.DataFrame(data)
print &#39;Dataframe:\n&#39;,df
print &#39;Type of Object:&#39;,type(df)
print &#39;Type of elements:&#39;,type(df.values)

Dataframe:
   one  two
a    1    1
b    2    2
c    3    3
d  NaN    4
Type of Object: &amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
Type of elements: &amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Another way to construct dataframe from dictionaries is by using &lt;code&gt;DataFrame.from_dict&lt;/code&gt; function. &lt;code&gt;DataFrame.from_dict&lt;/code&gt; takes a dict of dicts or a dict of array-like sequences and returns a DataFrame. It operates like the DataFrame constructor except for the orient parameter which is &amp;lsquo;columns&amp;rsquo; by default, but which can be set to &amp;lsquo;index&amp;rsquo; in order to use the dict keys as row labels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like Series, you can access index, values and also columns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &#39;Index: &#39;,df.index
print &#39;Columns: &#39;,df.columns
print &#39;Values of Column one: &#39;,df[&#39;one&#39;].values
print &#39;Values of Column two: &#39;,df[&#39;two&#39;].values

Index:  Index([u&#39;a&#39;, u&#39;b&#39;, u&#39;c&#39;, u&#39;d&#39;], dtype=&#39;object&#39;)
Columns:  Index([u&#39;one&#39;, u&#39;two&#39;], dtype=&#39;object&#39;)
Values of Column one:  [  1.   2.   3.  nan]
Values of Column two:  [ 1.  2.  3.  4.]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-dataframe-from-list-of-dictionaries:77ccdc8aecae1fc4c165444157437890&#34;&gt;Creating dataframe from list of dictionaries&lt;/h3&gt;

&lt;p&gt;As with Series, if you pass a column that isn’t contained in data, it will appear with NaN values in the result&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df2 = pd.DataFrame([{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;:3, &#39;d&#39;:None}, {&#39;a&#39;: 2, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}],
                   index=[&#39;one&#39;, &#39;two&#39;])
print &#39;Dataframe: \n&#39;,df2

# Ofcourse you can also transpose the result:

print &#39;\nTransposed Dataframe: \n&#39;,df2.T

Dataframe: 
     a  b  c   d
one  1  2  3 NaN
two  2  2  3   4

Transposed Dataframe: 
   one  two
a    1    2
b    2    2
c    3    3
d  NaN    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assigning a column that doesn’t exist will create a new column.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df[&#39;three&#39;] = None
print &#39;Added third column: \n&#39;,df

# The del keyword will delete columns as with a dict:
del df[&#39;three&#39;]
print &#39;\nDeleted third column: \n&#39;,df

Added third column: 
   one  two three
a    1    1  None
b    2    2  None
c    3    3  None
d  NaN    4  None

Deleted third column: 
   one  two
a    1    1
b    2    2
c    3    3
d  NaN    4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each Index has a number of methods and properties for set logic and answering other common questions about the data it contains.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;append&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Concatenate with additional Index objects, producing a new Index&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute set difference as an Index&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute set intersection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;union&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute set union&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;isin&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute boolean array indicating whether each value is contained in the passed collection&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute new Index with element at index i deleted&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute new index by deleting passed values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute new Index by inserting element at index i&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;is_monotonic&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Returns True if each element is greater than or equal to the previous element&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;is_unique&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Returns True if the Index has no duplicate values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Compute the array of unique values in the Index&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print 1 in df.one.values
print &#39;one&#39; in df.columns

True
True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reindexing:77ccdc8aecae1fc4c165444157437890&#34;&gt;Reindexing&lt;/h2&gt;

&lt;p&gt;A critical method on pandas objects is reindex, which means to create a new object with the data conformed to a new index.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data = {&#39;one&#39; : pd.Series([1., 2., 3.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]),
    &#39;two&#39; : pd.Series([1., 2., 3., 4.], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])}
df = pd.DataFrame(data)
print df

   one  two
a    1    1
b    2    2
c    3    3
d  NaN    4



print df.reindex([&#39;d&#39;,&#39;c&#39;,&#39;b&#39;,&#39;a&#39;])  # Reindex in descending order.

   one  two
d  NaN    4
c    3    3
b    2    2
a    1    1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you &lt;code&gt;reindex&lt;/code&gt; with more number of rows than in the dataframe, it will return the dataframe with new row whose values are &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print df.reindex([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;])

   one  two
a    1    1
b    2    2
c    3    3
d  NaN    4
e  NaN  NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reindexing is also useful when you want to introduce any missing values. For example in our case, look at column &lt;code&gt;one&lt;/code&gt; and row &lt;code&gt;d&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df.reindex([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], fill_value=0)
# Guess why the df[&#39;one&#39;][&#39;d&#39;] was not filled with 0 ?
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;th&gt;two&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;d&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;e&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;For ordered data like time series, it may be desirable to do some interpolation or filling of values when &lt;code&gt;reindex&lt;/code&gt;ing. The method option allows us to do this, using a &lt;code&gt;method&lt;/code&gt; such as &lt;code&gt;ffill&lt;/code&gt; which forward fills the values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df.reindex([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], method=&#39;ffill&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;th&gt;two&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;d&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;e&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;There are basically two different types of method (interpolation) options:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ffill&lt;/code&gt; or &lt;code&gt;pad&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fill (or carry) values forward&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;bfill&lt;/code&gt; or &lt;code&gt;backfill&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fill (or carry) values backward&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Reindexing has following arguments:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;index&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New sequence to use as index. Can be Index instance or any other sequence-like Python data structure. An Index will be used exactly as is without any copying&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Interpolation (fill) method, see above table for options.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Substitute value to use when introducing missing data by reindexing.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;limit&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;When forward- or backfilling, maximum size gap to fill&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Match simple Index on level of MultiIndex, otherwise select subset of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Do not copy underlying data if new index is equivalent to old index. True by default (i.e. always copy data)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;dropping-entries:77ccdc8aecae1fc4c165444157437890&#34;&gt;Dropping Entries&lt;/h2&gt;

&lt;p&gt;Dropping one or more entries from an axis is easy if you have an index array or list without those entries.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Drop row c and row a
df.drop([&#39;c&#39;, &#39;a&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;th&gt;two&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;d&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;# Drop column two
df.drop([&#39;two&#39;], axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;d&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;indexing-selection-sorting-and-filtering:77ccdc8aecae1fc4c165444157437890&#34;&gt;Indexing, selection, Sorting and filtering&lt;/h2&gt;

&lt;p&gt;Series indexing works analogously to NumPy array indexing, except you can use the Series’s index values instead of only integers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print df
# Slicing and selecting only row 0 and row 4
df[&#39;one&#39;][[&#39;a&#39;, &#39;d&#39;]]

   one  two
a    1    1
b    2    2
c    3    3
d  NaN    4





a     1
d   NaN
Name: one, dtype: float64




# Slicing df from row b to row 4
df[&#39;one&#39;][&#39;b&#39;:&#39;d&#39;]




b     2
c     3
d   NaN
Name: one, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you observe the above command (and the one above it), you will see that slicing with labels behaves differently than normal Python slicing in that the endpoint is inclusive.&lt;/p&gt;

&lt;p&gt;For DataFrame label-indexing on the rows, there is a special indexing field &lt;code&gt;ix&lt;/code&gt;. It enables you to select a subset of the rows and columns from a DataFrame with NumPy- like notation plus axis labels. It is a less verbose way to do the reindexing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df.ix[[&#39;a&#39;,&#39;c&#39;],[&#39;one&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;df.ix[df.one &amp;gt; 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;th&gt;two&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;There are many ways to select and rearrange the data contained in a pandas object. Some indexing options can be seen in below table:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Indexing Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;df[val]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Select single column or sequence of columns from the DataFrame. Special case con- veniences: boolean array (filter rows), slice (slice rows), or boolean DataFrame (set values based on some criterion).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;df.ix[val]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Selects single row of subset of rows from the DataFrame.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;df.ix[:, val]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Selects single column of subset of columns.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;df.ix[val1, val2]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Select both rows and columns.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;reindex method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Conform one or more axes to new indexes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;xs method&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Select single row or column as a Series by label.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;icol, irowmethods&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Select single column or row, respectively, as a Series by integer location.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;get_value, set_value methods&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Select single value by row and column label.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can sort a data frame or series (by some criteria) using the built-in functions. To sort lexicographically by row or column index, use the sort_index method, which returns a new, sorted object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dt = pd.Series(np.random.randint(3, 10, size=7), index=[&#39;g&#39;,&#39;c&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;d&#39;,&#39;f&#39;])
print &#39;Original Data: \n&#39;, dt
print &#39;Sorted by Index: \n&#39;,dt.sort_index()

Original Data: 
g    6
c    9
a    9
b    5
e    3
d    8
f    7
dtype: int64
Sorted by Index: 
a    9
b    5
c    9
d    8
e    3
f    7
g    6
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-alignment-and-arithmetic:77ccdc8aecae1fc4c165444157437890&#34;&gt;Data alignment and arithmetic&lt;/h2&gt;

&lt;p&gt;Data alignment between DataFrame objects automatically align on both the columns and the index (row labels). The resulting object will have the union of the column and row labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df1 = pd.DataFrame(np.random.randn(10, 4), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;])
df2 = pd.DataFrame(np.random.randn(7, 3), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;])
print &#39;df1:\n&#39;,df1
print &#39;df2:\n&#39;,df2
print &#39;Sum:\n&#39;,df1.add(df2)

df1:
          A         B         C         D
0 -1.869235  0.114255  0.816411 -0.297434
1  0.112815  0.660802  1.037941  0.576426
2  1.041494 -0.078062 -0.972924 -0.568679
3 -2.785414  1.578352  0.924656  0.226743
4 -0.429171  0.321302  0.183773  0.850985
5 -0.536632  0.500795  1.429295 -1.099967
6  0.592204  0.392437  0.174914 -0.009833
7  0.425151  0.453137 -1.347765  1.300194
8  0.081314 -0.324954  0.347301  1.892119
9  1.738767  1.396856  0.326706 -0.741861
df2:
          A         B         C
0 -0.074048  0.530960 -1.013815
1  0.709423 -0.953860 -0.270428
2  0.215185  1.276945 -1.479264
3 -1.376585 -0.417693  0.039363
4  0.305415  0.403303  1.495533
5  1.983297 -0.363862  1.657616
6  0.673487  1.211236 -0.347881
Sum:
          A         B         C   D
0 -1.943283  0.645215 -0.197403 NaN
1  0.822238 -0.293058  0.767512 NaN
2  1.256679  1.198883 -2.452188 NaN
3 -4.161999  1.160658  0.964019 NaN
4 -0.123756  0.724605  1.679306 NaN
5  1.446665  0.136932  3.086912 NaN
6  1.265692  1.603673 -0.172967 NaN
7       NaN       NaN       NaN NaN
8       NaN       NaN       NaN NaN
9       NaN       NaN       NaN NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in arithmetic operations between differently-indexed objects, you might want to fill with a special value, like 0, when an axis label is found in one object but not the other:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &#39;Sum:\n&#39;,df1.add(df2, fill_value=0)

Sum:
          A         B         C         D
0 -1.943283  0.645215 -0.197403 -0.297434
1  0.822238 -0.293058  0.767512  0.576426
2  1.256679  1.198883 -2.452188 -0.568679
3 -4.161999  1.160658  0.964019  0.226743
4 -0.123756  0.724605  1.679306  0.850985
5  1.446665  0.136932  3.086912 -1.099967
6  1.265692  1.603673 -0.172967 -0.009833
7  0.425151  0.453137 -1.347765  1.300194
8  0.081314 -0.324954  0.347301  1.892119
9  1.738767  1.396856  0.326706 -0.741861
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly you can perform subtracion, multiplication and division.&lt;/p&gt;

&lt;p&gt;When doing an operation between DataFrame and Series, the default behavior is to align the Series index on the DataFrame columns, thus broadcasting (just like in numpy) row-wise.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print df1.loc[0]
print &#39;Sum: \n&#39;,df1.sub(df1.loc[0])

A   -1.869235
B    0.114255
C    0.816411
D   -0.297434
Name: 0, dtype: float64
Sum: 
          A         B         C         D
0  0.000000  0.000000  0.000000  0.000000
1  1.982050  0.546547  0.221530  0.873859
2  2.910729 -0.192316 -1.789335 -0.271245
3 -0.916179  1.464097  0.108245  0.524177
4  1.440064  0.207047 -0.632639  1.148418
5  1.332603  0.386540  0.612884 -0.802533
6  2.461440  0.278182 -0.641497  0.287601
7  2.294386  0.338882 -2.164176  1.597627
8  1.950549 -0.439209 -0.469110  2.189553
9  3.608003  1.282602 -0.489706 -0.444427
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the special case of working with time series data, and the DataFrame index also contains dates, the broadcasting will be column-wise:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ind1 = pd.date_range(&#39;08/1/2015&#39;, periods=10)
df1.set_index(ind1)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-01&lt;/th&gt;
      &lt;td&gt;-1.869235&lt;/td&gt;
      &lt;td&gt;0.114255&lt;/td&gt;
      &lt;td&gt;0.816411&lt;/td&gt;
      &lt;td&gt;-0.297434&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-02&lt;/th&gt;
      &lt;td&gt;0.112815&lt;/td&gt;
      &lt;td&gt;0.660802&lt;/td&gt;
      &lt;td&gt;1.037941&lt;/td&gt;
      &lt;td&gt;0.576426&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-03&lt;/th&gt;
      &lt;td&gt;1.041494&lt;/td&gt;
      &lt;td&gt;-0.078062&lt;/td&gt;
      &lt;td&gt;-0.972924&lt;/td&gt;
      &lt;td&gt;-0.568679&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-04&lt;/th&gt;
      &lt;td&gt;-2.785414&lt;/td&gt;
      &lt;td&gt;1.578352&lt;/td&gt;
      &lt;td&gt;0.924656&lt;/td&gt;
      &lt;td&gt;0.226743&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-05&lt;/th&gt;
      &lt;td&gt;-0.429171&lt;/td&gt;
      &lt;td&gt;0.321302&lt;/td&gt;
      &lt;td&gt;0.183773&lt;/td&gt;
      &lt;td&gt;0.850985&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-06&lt;/th&gt;
      &lt;td&gt;-0.536632&lt;/td&gt;
      &lt;td&gt;0.500795&lt;/td&gt;
      &lt;td&gt;1.429295&lt;/td&gt;
      &lt;td&gt;-1.099967&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-07&lt;/th&gt;
      &lt;td&gt;0.592204&lt;/td&gt;
      &lt;td&gt;0.392437&lt;/td&gt;
      &lt;td&gt;0.174914&lt;/td&gt;
      &lt;td&gt;-0.009833&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-08&lt;/th&gt;
      &lt;td&gt;0.425151&lt;/td&gt;
      &lt;td&gt;0.453137&lt;/td&gt;
      &lt;td&gt;-1.347765&lt;/td&gt;
      &lt;td&gt;1.300194&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-09&lt;/th&gt;
      &lt;td&gt;0.081314&lt;/td&gt;
      &lt;td&gt;-0.324954&lt;/td&gt;
      &lt;td&gt;0.347301&lt;/td&gt;
      &lt;td&gt;1.892119&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-08-10&lt;/th&gt;
      &lt;td&gt;1.738767&lt;/td&gt;
      &lt;td&gt;1.396856&lt;/td&gt;
      &lt;td&gt;0.326706&lt;/td&gt;
      &lt;td&gt;-0.741861&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;using-numpy-functions-on-dataframe:77ccdc8aecae1fc4c165444157437890&#34;&gt;Using Numpy functions on DataFrame&lt;/h2&gt;

&lt;p&gt;Elementwise NumPy &lt;code&gt;ufuncs&lt;/code&gt; like &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &amp;hellip; and various other NumPy functions can be used on DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;np.abs(df1)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.869235&lt;/td&gt;
      &lt;td&gt;0.114255&lt;/td&gt;
      &lt;td&gt;0.816411&lt;/td&gt;
      &lt;td&gt;0.297434&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.112815&lt;/td&gt;
      &lt;td&gt;0.660802&lt;/td&gt;
      &lt;td&gt;1.037941&lt;/td&gt;
      &lt;td&gt;0.576426&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1.041494&lt;/td&gt;
      &lt;td&gt;0.078062&lt;/td&gt;
      &lt;td&gt;0.972924&lt;/td&gt;
      &lt;td&gt;0.568679&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2.785414&lt;/td&gt;
      &lt;td&gt;1.578352&lt;/td&gt;
      &lt;td&gt;0.924656&lt;/td&gt;
      &lt;td&gt;0.226743&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0.429171&lt;/td&gt;
      &lt;td&gt;0.321302&lt;/td&gt;
      &lt;td&gt;0.183773&lt;/td&gt;
      &lt;td&gt;0.850985&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;0.536632&lt;/td&gt;
      &lt;td&gt;0.500795&lt;/td&gt;
      &lt;td&gt;1.429295&lt;/td&gt;
      &lt;td&gt;1.099967&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;0.592204&lt;/td&gt;
      &lt;td&gt;0.392437&lt;/td&gt;
      &lt;td&gt;0.174914&lt;/td&gt;
      &lt;td&gt;0.009833&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;0.425151&lt;/td&gt;
      &lt;td&gt;0.453137&lt;/td&gt;
      &lt;td&gt;1.347765&lt;/td&gt;
      &lt;td&gt;1.300194&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;0.081314&lt;/td&gt;
      &lt;td&gt;0.324954&lt;/td&gt;
      &lt;td&gt;0.347301&lt;/td&gt;
      &lt;td&gt;1.892119&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1.738767&lt;/td&gt;
      &lt;td&gt;1.396856&lt;/td&gt;
      &lt;td&gt;0.326706&lt;/td&gt;
      &lt;td&gt;0.741861&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;np.asarray(df1)  # Convert input to numpy array




array([[-1.86923522,  0.11425481,  0.81641128, -0.29743373],
       [ 0.11281503,  0.66080205,  1.03794085,  0.57642562],
       [ 1.04149359, -0.07806151, -0.97292403, -0.56867919],
       [-2.78541399,  1.57835165,  0.92465601,  0.22674327],
       [-0.4291715 ,  0.32130162,  0.18377266,  0.8509845 ],
       [-0.53663223,  0.5007948 ,  1.42929534, -1.09996685],
       [ 0.59220433,  0.39243689,  0.17491424, -0.00983318],
       [ 0.42515075,  0.4531367 , -1.34776521,  1.30019367],
       [ 0.08131366, -0.32495414,  0.34730131,  1.89211945],
       [ 1.73876733,  1.39685642,  0.32670562, -0.74186091]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another frequent operation is applying a function on 1D arrays to each column or row. DataFrame’s apply method does exactly this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def fn(x):
    return pd.Series([x.min(), x.max()], index=[&#39;min&#39;, &#39;max&#39;])  # Get max and min of the columns

#fn = lambda x: x - x.min()  # Subtract the minimum of the column from each element of that column
df1.apply(fn)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;-2.785414&lt;/td&gt;
      &lt;td&gt;-0.324954&lt;/td&gt;
      &lt;td&gt;-1.347765&lt;/td&gt;
      &lt;td&gt;-1.099967&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;1.738767&lt;/td&gt;
      &lt;td&gt;1.578352&lt;/td&gt;
      &lt;td&gt;1.429295&lt;/td&gt;
      &lt;td&gt;1.892119&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Element-wise Python functions can be used, too. Suppose you wanted to format the dataframe elements in floating point format with accuracy of only 3 decimal places. You can do this with applymap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fmt = lambda x: &amp;quot;{:.3f}&amp;quot;.format(x)
df1.applymap(fmt)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;-1.869&lt;/td&gt;
      &lt;td&gt;0.114&lt;/td&gt;
      &lt;td&gt;0.816&lt;/td&gt;
      &lt;td&gt;-0.297&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.113&lt;/td&gt;
      &lt;td&gt;0.661&lt;/td&gt;
      &lt;td&gt;1.038&lt;/td&gt;
      &lt;td&gt;0.576&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1.041&lt;/td&gt;
      &lt;td&gt;-0.078&lt;/td&gt;
      &lt;td&gt;-0.973&lt;/td&gt;
      &lt;td&gt;-0.569&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;-2.785&lt;/td&gt;
      &lt;td&gt;1.578&lt;/td&gt;
      &lt;td&gt;0.925&lt;/td&gt;
      &lt;td&gt;0.227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;-0.429&lt;/td&gt;
      &lt;td&gt;0.321&lt;/td&gt;
      &lt;td&gt;0.184&lt;/td&gt;
      &lt;td&gt;0.851&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;-0.537&lt;/td&gt;
      &lt;td&gt;0.501&lt;/td&gt;
      &lt;td&gt;1.429&lt;/td&gt;
      &lt;td&gt;-1.100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;0.592&lt;/td&gt;
      &lt;td&gt;0.392&lt;/td&gt;
      &lt;td&gt;0.175&lt;/td&gt;
      &lt;td&gt;-0.010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;0.425&lt;/td&gt;
      &lt;td&gt;0.453&lt;/td&gt;
      &lt;td&gt;-1.348&lt;/td&gt;
      &lt;td&gt;1.300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;0.081&lt;/td&gt;
      &lt;td&gt;-0.325&lt;/td&gt;
      &lt;td&gt;0.347&lt;/td&gt;
      &lt;td&gt;1.892&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1.739&lt;/td&gt;
      &lt;td&gt;1.397&lt;/td&gt;
      &lt;td&gt;0.327&lt;/td&gt;
      &lt;td&gt;-0.742&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;The reason for the name &lt;code&gt;applymap&lt;/code&gt; is that Series has a &lt;code&gt;map&lt;/code&gt; method for applying an element-wise function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;loading-data:77ccdc8aecae1fc4c165444157437890&#34;&gt;Loading Data&lt;/h2&gt;

&lt;p&gt;You can read data from a CSV file using the read_csv function. By default, it assumes that the fields are comma-separated.
Pandas supports following file formats:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;read_csv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Load delimited data from a file, URL, or file-like object. Use comma as default delimiter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;read_table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Load delimited data from a file, URL, or file-like object. Use tab (&amp;rsquo;\t&amp;rsquo;) as default delimiter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;read_fwf&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Read data in fixed-width column format (that is, no delimiters)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;read_clipboard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Version of read_table that reads data from the clipboard. Useful for converting tables from web pages.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let&amp;rsquo;s try loading some citibike data that you used for your challenge #2 using pandas. (We will also use the same technique later on for loading big file like the one you had to use for Core Challenge). If you do not have the csv file from Challenge #2, you can download it again from here: &lt;a href=&#34;http://sharmamohit.com/misc_files/dec-2week-2014.csv&#34; title=&#34;dec-2week-2014&#34;&gt;&lt;code&gt;Dec-2week-2014.csv&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dec = pd.read_csv(&#39;dec-2week-2014.csv&#39;)
dec.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;tripduration&lt;/th&gt;
      &lt;th&gt;start station id&lt;/th&gt;
      &lt;th&gt;start station latitude&lt;/th&gt;
      &lt;th&gt;start station longitude&lt;/th&gt;
      &lt;th&gt;end station id&lt;/th&gt;
      &lt;th&gt;end station latitude&lt;/th&gt;
      &lt;th&gt;end station longitude&lt;/th&gt;
      &lt;th&gt;bikeid&lt;/th&gt;
      &lt;th&gt;birth year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
      &lt;td&gt;187314.000000&lt;/td&gt;
      &lt;td&gt;192260.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;746.854666&lt;/td&gt;
      &lt;td&gt;436.637116&lt;/td&gt;
      &lt;td&gt;40.735708&lt;/td&gt;
      &lt;td&gt;-73.990421&lt;/td&gt;
      &lt;td&gt;437.083829&lt;/td&gt;
      &lt;td&gt;40.735578&lt;/td&gt;
      &lt;td&gt;-73.990647&lt;/td&gt;
      &lt;td&gt;18141.270124&lt;/td&gt;
      &lt;td&gt;1975.495451&lt;/td&gt;
      &lt;td&gt;1.169874&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;2997.200035&lt;/td&gt;
      &lt;td&gt;318.126922&lt;/td&gt;
      &lt;td&gt;0.018599&lt;/td&gt;
      &lt;td&gt;0.011611&lt;/td&gt;
      &lt;td&gt;321.761738&lt;/td&gt;
      &lt;td&gt;0.018638&lt;/td&gt;
      &lt;td&gt;0.011726&lt;/td&gt;
      &lt;td&gt;2061.113390&lt;/td&gt;
      &lt;td&gt;11.737892&lt;/td&gt;
      &lt;td&gt;0.439104&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;60.000000&lt;/td&gt;
      &lt;td&gt;72.000000&lt;/td&gt;
      &lt;td&gt;40.680342&lt;/td&gt;
      &lt;td&gt;-74.017134&lt;/td&gt;
      &lt;td&gt;72.000000&lt;/td&gt;
      &lt;td&gt;40.680342&lt;/td&gt;
      &lt;td&gt;-74.017134&lt;/td&gt;
      &lt;td&gt;14529.000000&lt;/td&gt;
      &lt;td&gt;1899.000000&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt;348.000000&lt;/td&gt;
      &lt;td&gt;307.000000&lt;/td&gt;
      &lt;td&gt;40.724055&lt;/td&gt;
      &lt;td&gt;-73.998393&lt;/td&gt;
      &lt;td&gt;307.000000&lt;/td&gt;
      &lt;td&gt;40.723627&lt;/td&gt;
      &lt;td&gt;-73.999061&lt;/td&gt;
      &lt;td&gt;16387.000000&lt;/td&gt;
      &lt;td&gt;1967.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt;529.000000&lt;/td&gt;
      &lt;td&gt;417.000000&lt;/td&gt;
      &lt;td&gt;40.737262&lt;/td&gt;
      &lt;td&gt;-73.990617&lt;/td&gt;
      &lt;td&gt;414.000000&lt;/td&gt;
      &lt;td&gt;40.737050&lt;/td&gt;
      &lt;td&gt;-73.990741&lt;/td&gt;
      &lt;td&gt;18135.000000&lt;/td&gt;
      &lt;td&gt;1977.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt;816.000000&lt;/td&gt;
      &lt;td&gt;491.000000&lt;/td&gt;
      &lt;td&gt;40.750380&lt;/td&gt;
      &lt;td&gt;-73.981948&lt;/td&gt;
      &lt;td&gt;490.000000&lt;/td&gt;
      &lt;td&gt;40.750200&lt;/td&gt;
      &lt;td&gt;-73.981948&lt;/td&gt;
      &lt;td&gt;19911.000000&lt;/td&gt;
      &lt;td&gt;1985.000000&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;732149.000000&lt;/td&gt;
      &lt;td&gt;3002.000000&lt;/td&gt;
      &lt;td&gt;40.771522&lt;/td&gt;
      &lt;td&gt;-73.950048&lt;/td&gt;
      &lt;td&gt;3002.000000&lt;/td&gt;
      &lt;td&gt;40.771522&lt;/td&gt;
      &lt;td&gt;-73.950048&lt;/td&gt;
      &lt;td&gt;21690.000000&lt;/td&gt;
      &lt;td&gt;1998.000000&lt;/td&gt;
      &lt;td&gt;2.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;As we can see, the &lt;code&gt;describe()&lt;/code&gt; method produces some very useful statistics about the csv data that we loaded.&lt;/p&gt;

&lt;p&gt;The parser functions have many additional arguments to help you handle the wide variety of exception file formats that occur&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;String indicating filesystem location, URL, or file-like object&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sep&lt;/code&gt; or &lt;code&gt;delimiter&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Character sequence or regular expression to use to split fields in each row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Row number to use as column names. Defaults to 0 (first row), but should be None if there is no header row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;index_col&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Column numbers or names to use as the row index in the result. Can be a single name/number or a list of them for a hierarchical index&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;names&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;List of column names for result, combine with header=None&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;skiprows&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows at beginning of file to ignore or list of row numbers (starting from 0) to skip&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;na_values&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sequence of values to replace with NA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Character or characters to split comments off the end of lines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;parse_dates&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Attempt to parse data to datetime; False by default. If True, will attempt to parse all columns. Otherwise can specify a list of column numbers or name to parse. If element of list is tuple or list, will combine multiple columns together and parse to date (for example if date/time split across two columns)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;keep_date_col&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;If joining columns to parse date, drop the joined columns. Default True&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;converters&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dict containing column number of name mapping to functions. For example {&amp;lsquo;foo&amp;rsquo;: f} would apply the function f to all values in the &amp;lsquo;foo&amp;rsquo; column&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dayfirst&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;When parsing potentially ambiguous dates, treat as international format (e.g. 7/6/2012 -&amp;gt; June 7, 2012). Default False&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;date_parser&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Function to use to parse dates&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;nrows&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows to read from beginning of file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return a TextParser object for reading file piecemeal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;chunksize&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;For iteration, size of file chunks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;skip_footer&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Number of lines to ignore at end of file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;verbose&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Print various parser output information, like the number of missing values placed in non-numeric columns&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;encoding&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Text encoding for unicode. For example &amp;lsquo;utf-8&amp;rsquo; for UTF-8 encoded text&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;squeeze&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;If the parsed data only contains one column return a Series&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;thousands&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Separator for thousands, e.g. &amp;lsquo;,&amp;rsquo; or &amp;lsquo;.&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;** If you have a file that is comparatively huge in size and you see that pandas or numpy(genfromtxt or loadfromtxt) is struggling to load it then pandas provide an iterator that can be used. The arguments with &lt;code&gt;pd.read_csv()&lt;/code&gt; would be something like (along with any other arguments as required):**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;data_iter = pd.read_csv(infile, iterator=True, chunksize=1000, )  # This returns iterator with chunk of 1000 rows.
data = pd.concat(data_iter)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dec[:3]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;tripduration&lt;/th&gt;
      &lt;th&gt;starttime&lt;/th&gt;
      &lt;th&gt;stoptime&lt;/th&gt;
      &lt;th&gt;start station id&lt;/th&gt;
      &lt;th&gt;start station name&lt;/th&gt;
      &lt;th&gt;start station latitude&lt;/th&gt;
      &lt;th&gt;start station longitude&lt;/th&gt;
      &lt;th&gt;end station id&lt;/th&gt;
      &lt;th&gt;end station name&lt;/th&gt;
      &lt;th&gt;end station latitude&lt;/th&gt;
      &lt;th&gt;end station longitude&lt;/th&gt;
      &lt;th&gt;bikeid&lt;/th&gt;
      &lt;th&gt;usertype&lt;/th&gt;
      &lt;th&gt;birth year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1257&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:00:28&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:21:25&lt;/td&gt;
      &lt;td&gt;475&lt;/td&gt;
      &lt;td&gt;E 16 St &amp;amp; Irving Pl&lt;/td&gt;
      &lt;td&gt;40.735243&lt;/td&gt;
      &lt;td&gt;-73.987586&lt;/td&gt;
      &lt;td&gt;521&lt;/td&gt;
      &lt;td&gt;8 Ave &amp;amp; W 31 St&lt;/td&gt;
      &lt;td&gt;40.750450&lt;/td&gt;
      &lt;td&gt;-73.994811&lt;/td&gt;
      &lt;td&gt;16047&lt;/td&gt;
      &lt;td&gt;Customer&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;275&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:00:43&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:05:18&lt;/td&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;Broadway &amp;amp; W 32 St&lt;/td&gt;
      &lt;td&gt;40.748549&lt;/td&gt;
      &lt;td&gt;-73.988084&lt;/td&gt;
      &lt;td&gt;546&lt;/td&gt;
      &lt;td&gt;E 30 St &amp;amp; Park Ave S&lt;/td&gt;
      &lt;td&gt;40.744449&lt;/td&gt;
      &lt;td&gt;-73.983035&lt;/td&gt;
      &lt;td&gt;18472&lt;/td&gt;
      &lt;td&gt;Subscriber&lt;/td&gt;
      &lt;td&gt;1988&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;450&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:01:22&lt;/td&gt;
      &lt;td&gt;12/1/2014 00:08:52&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;Broadway &amp;amp; W 24 St&lt;/td&gt;
      &lt;td&gt;40.742354&lt;/td&gt;
      &lt;td&gt;-73.989151&lt;/td&gt;
      &lt;td&gt;434&lt;/td&gt;
      &lt;td&gt;9 Ave &amp;amp; W 18 St&lt;/td&gt;
      &lt;td&gt;40.743174&lt;/td&gt;
      &lt;td&gt;-74.003664&lt;/td&gt;
      &lt;td&gt;19589&lt;/td&gt;
      &lt;td&gt;Subscriber&lt;/td&gt;
      &lt;td&gt;1983&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;type(dec[&#39;starttime&#39;].values[0])




str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From above example, we can see that the &lt;code&gt;starttime&lt;/code&gt; column is parsed as a string. We need to parse the dates as a datetime object so we can perform some datetime related computation.&lt;/p&gt;

&lt;p&gt;Pandas provide an excellent and easy way to parse the column with date and/or time as a datetime object. To do that, you simply need to proide the read_csv function with &lt;code&gt;parse_dates&lt;/code&gt; with column name that has date (and/or time).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dec = pd.read_csv(&#39;dec-2week-2014.csv&#39;, parse_dates=[&#39;starttime&#39;])
type(dec[&#39;starttime&#39;].values[0])




numpy.datetime64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above option works perfectly fine and as we can see the &lt;code&gt;starttime&lt;/code&gt; column now has &lt;code&gt;numpy.datetime64&lt;/code&gt; objects. You have to provide &lt;code&gt;parse_date&lt;/code&gt; with the column that has the date (and/or time) information. This uses Pandas &lt;code&gt;dateutil.parser.parser&lt;/code&gt; to do the conversion.&lt;/p&gt;

&lt;p&gt;Pandas will try to call &lt;code&gt;date_parser&lt;/code&gt; in three different ways, advancing to the next if an exception occurs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Pass one or more arrays (as defined by &lt;code&gt;parse_dates&lt;/code&gt;) as arguments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Concatenate (row-wise) the string values from the columns defined by parse_dates into a single array and pass that;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call &lt;code&gt;date_parser&lt;/code&gt; once for each row using one or more strings (corresponding to the columns defined by &lt;code&gt;parse_dates&lt;/code&gt;) as arguments.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now this works fine but it consumes (comparatively) quite a lot of time. If you know the format of your date and is consistent then you can create a function to do the conversion and pass it to &lt;code&gt;date_parser&lt;/code&gt;. &lt;code&gt;date_parser&lt;/code&gt; will basically pass every element of the column specified in &lt;code&gt;parse_dates&lt;/code&gt; to the function and let your function manually convert it to &lt;code&gt;datetime&lt;/code&gt; object. This reduces the computation time.  (This is a good time to check it for yourself. use the ipython&amp;rsquo;s magic function &lt;code&gt;%timeit&lt;/code&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you start parsing huge files for dates, you might have to write your own cython functions. Do not worry about cython for now. But for the curious heads, check how to improve performance of pandas.. &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/enhancingperf.html&#34; title=&#34;Enhancing Performance of Pandas&#34;&gt;&lt;code&gt;http://pandas.pydata.org/pandas-docs/stable/enhancingperf.html&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;from datetime import datetime
from matplotlib import dates
dt_parse = lambda x: datetime.strptime(x, &#39;%m/%d/%Y %H:%M:%S&#39;)
dec = pd.read_csv(&#39;dec-2week-2014.csv&#39;, parse_dates=[&#39;starttime&#39;], date_parser=dt_parse, index_col=&#39;starttime&#39;)


ax = dec[&#39;tripduration&#39;].plot(kind=&#39;area&#39;, stacked=False, figsize=(12, 8), color=&#39;#3F5D7D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_74_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the above example, I have also used the &lt;code&gt;starttime&lt;/code&gt; as my index column. Also &lt;code&gt;plot()&lt;/code&gt; function returns &lt;code&gt;matplotlib.axes._subplots.AxesSubplot&lt;/code&gt; so you can play around with the plot before showing it. Refer to our &lt;code&gt;matplotlib&lt;/code&gt; notes to use some ways to plot it better.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A quick example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;dt = pd.date_range(start=dec.index[0], end=dec.index[-1], freq=&#39;D&#39;)
ax = dec[&#39;tripduration&#39;].plot(kind=&#39;area&#39;, stacked=False, figsize=(12, 8), xticks=dt)
ax.xaxis.set_minor_locator(dates.HourLocator(interval=12))
ax.xaxis.grid(True, which=&amp;quot;major&amp;quot;, linestyle=&#39;--&#39;)
ax.xaxis.grid(True, which=&amp;quot;minor&amp;quot;)
ax.yaxis.grid(True, which=&amp;quot;major&amp;quot;)
ax.xaxis.set_major_formatter(dates.DateFormatter(&#39;%b %d&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pandas makes it really easy to select a subset of the columns: just index with list of columns you want.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dec[[&#39;start station id&#39;, &#39;end station id&#39;]][:5]
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;start station id&lt;/th&gt;
      &lt;th&gt;end station id&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;starttime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-12-01 00:00:28&lt;/th&gt;
      &lt;td&gt;475&lt;/td&gt;
      &lt;td&gt;521&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-12-01 00:00:43&lt;/th&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-12-01 00:01:22&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;434&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-12-01 00:02:17&lt;/th&gt;
      &lt;td&gt;475&lt;/td&gt;
      &lt;td&gt;521&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-12-01 00:02:21&lt;/th&gt;
      &lt;td&gt;519&lt;/td&gt;
      &lt;td&gt;527&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Another very common question that can be asked is.. just of curiosity, which bike was used the most in these 15days.. and the answer is..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dec[&#39;bikeid&#39;].value_counts()[:5]  # Top 5 bikes by id




18440    118
19977    115
19846    110
19757    108
19494    105
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, just for fun, lets plot this!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;famous_bikes = dec[&#39;bikeid&#39;].value_counts()
famous_bikes[:10][::-1].plot(kind=&#39;barh&#39;, alpha=0.5, color=&#39;#3F5D7D&#39;)




&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x115146710&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_80_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 align=&#39;center&#39;&gt; End Note &lt;/h1&gt;

&lt;p&gt;Remember, this is just the tip of the iceberg of what functions Pandas provide. Pandas combined with Numpy and Matplotlib gives you an ultimate tool for almost all your Data Analysis needs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because of the high majority of the votes to not introduce Pandas, I have created this concise version of otherwise what would have been a 3 part course.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;It is highly recommended to check out some tutorials below for more information on Pandas:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/10min.html#min&#34; title=&#34;10 minutes to pandas&#34;&gt;&lt;code&gt;Pandas own 10 minute to Pandas&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/hrojas/learn-pandas&#34; title=&#34;hrojas&#39;s Learn Pandas&#34;&gt;&lt;code&gt;Hernan Rojas&#39;s Learn Pandas&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook&#34; title=&#34;Pandas Cookbook&#34;&gt;&lt;code&gt;Pandas Cookbook&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/brandon-rhodes/pycon-pandas-tutorial&#34; title=&#34;Brandon Rhodes Exercise and Solutions&#34;&gt;&lt;code&gt;Brandon Rhodes&#39;s Exercise and Solutions&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/&#34; title=&#34;Greg Redas blog on Pandas&#34;&gt;&lt;code&gt;Greg Reda&#39;s Blog&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can also find many PyCon talks:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PyCon 2015:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5JnMutdy6Fw&#34; title=&#34;Pandas from Ground Up&#34;&gt;&lt;code&gt;Brandon Rhodes&#39;s Pandas from Ground up&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PyVideo Videos&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pyvideo.org/search?q=pandas&#34; title=&#34;PyVideo Pandas&#34;&gt;&lt;code&gt;Some Videos from pyvideo.org on Pandas&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Matplotlib</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Matplotlib/</link>
      <pubDate>Tue, 04 Aug 2015 01:20:20 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Matplotlib/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Matplotlib&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This tutorial is heavily inspired from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Benjamin Root&amp;rsquo;s Anatomy of Matplotlib&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eric Jones&amp;rsquo; SciPy 2012 tutorial&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nicolas Rougier&amp;rsquo;s Matplotlib tutorial&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Matplotlib Gallery&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of the content has been taken directly/ indirectly from these tutorials since it couldn&amp;rsquo;t have been made more simpler than the collaborative result of these hardworking people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Matplotlib is probably the single most used Python package for 2D-graphics. It provides both a very quick way to visualize data from Python and publication-quality figures in many formats. We are going to explore matplotlib in interactive mode covering most common cases.
The matplotlib code is conceptually divided into three parts: the &lt;code&gt;pylab&lt;/code&gt; interface is the set of functions provided by &lt;code&gt;matplotlib.pylab&lt;/code&gt; which allow the user to create plots with code quite similar to &lt;code&gt;MATLAB&lt;/code&gt; figure generating code. The matplotlib frontend or matplotlib API is the set of classes that do the heavy lifting, creating and managing figures, text, lines, plots and so on. This is an abstract interface that knows nothing about output. The backends are device-dependent drawing devices, aka renderers, that transform the frontend representation to hardcopy or a display device.&lt;/p&gt;

&lt;h3 id=&#34;backends:12e5e4622920f32cd819b8409703bfed&#34;&gt;&lt;code&gt;Backends?&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Matplotlib has multiple backends. The backends allow mpl to be used on a variety of platforms with a variety of GUI toolkits (&lt;a href=&#34;http://www.gtk.org/&#34; title=&#34;GTK&#34;&gt;&lt;code&gt;GTK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://www.qt.io/&#34; title=&#34;Qt&#34;&gt;&lt;code&gt;Qt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.wxwidgets.org/&#34; title=&#34;WxWidgets&#34;&gt;&lt;code&gt;WxWidgets&lt;/code&gt;&lt;/a&gt;, etc.), all of them written so that most of the time, you will not need to care which backend you are using. However, bugs do occur, and so two of the most important pieces of information you can provide in a bug report is which version of matplotlib, and which backend.&lt;/p&gt;

&lt;h2 id=&#34;gallery:12e5e4622920f32cd819b8409703bfed&#34;&gt;Gallery&lt;/h2&gt;

&lt;p&gt;Many users of matplotlib are often faced with the question, &amp;ldquo;I want to make a plot that has X with Y in the same figure, but it needs to look like Z&amp;rdquo;. Good luck getting an answer from a web search with that query. This is why the &lt;a href=&#34;http://matplotlib.org/gallery.html&#34; title=&#34;Matplotlib Gallery&#34;&gt;&lt;code&gt;Gallery&lt;/code&gt;&lt;/a&gt; is so useful, because it showcases the variety of ways one can make plots. Browse through the gallery, click on any figure that has pieces of what you want to see the code that generated it. Soon enough, you will be like a chef, mixing and matching components to produce your masterpiece!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import matplotlib
print(matplotlib.__version__)
print(matplotlib.get_backend())

1.4.3
MacOSX
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lets-begin:12e5e4622920f32cd819b8409703bfed&#34;&gt;Lets Begin!&lt;/h1&gt;

&lt;p&gt;Matplotlib is a large project and can seem daunting at first. However, by learning the components, it should begin to feel much smaller and more approachable.&lt;/p&gt;

&lt;p&gt;We start with the most important import statements you will ever need for matplotlib&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;pyplot:12e5e4622920f32cd819b8409703bfed&#34;&gt;pyplot&lt;/h1&gt;

&lt;p&gt;The pyplot module is where everything in matplotlib comes together. It is the launching point for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;preparing your figures,&lt;/li&gt;
&lt;li&gt;making plots, and&lt;/li&gt;
&lt;li&gt;doing any modifications and decorations you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It all comes together here. Let us take a look at those three catagories of pyplot functions.&lt;/p&gt;

&lt;h2 id=&#34;plotting-preparation:12e5e4622920f32cd819b8409703bfed&#34;&gt;Plotting Preparation&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;autoscale&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Autoscale the axis view to the data (toggle).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add an axes to the figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Convenience method to get or set axis properties.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cla&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Clear the current axes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;clf&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Clear the current figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;clim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the color limits of the current image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;delaxes&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Remove an axes from the current figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;locator_params&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Control behavior of tick locators.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;margins&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set or retrieve autoscaling margins.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;figure&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Creates a new figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;gca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return the current axis instance.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;gcf&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return a reference to the current figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;gci&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get the current colorable artist.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hold&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the hold state.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ioff&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turn interactive mode off.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ion&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turn interactive mode on.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ishold&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return the hold status of the current axes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;isinteractive&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return status of interactive mode.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rc&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the current rc params.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rc_context&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return a context manager for managing rc settings.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rcdefaults&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Restore the default rc params.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;savefig&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Save the current figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sca&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the current Axes instance.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sci&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the current image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;set_cmap&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the default colormap&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;setp&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set a property on an artist object&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display a figure&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;subplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Return a subplot axes positioned by the given grid definition.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;subplot2grid&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create a subplot in a grid.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;subplot_tool&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Launch a subplot tool window for a figure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;subplots&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create a figure with a set of subplots already made.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;subplots_adjust&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Tune the subplot layout.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;switch_backend&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Switch the default backend.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;tick_params&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Change the appearance of ticks and tick labels.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ticklabel_format&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Change the ScalarFormatter used by default for linear axes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;tight_layout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Automatically adjust subplot parameters to give specified padding.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xkcd&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turns on &lt;a href=&#34;http://xkcd.com/&#34;&gt;XKCD&lt;/a&gt; sketch-style drawing mode.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xlabel&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the &lt;em&gt;x&lt;/em&gt; axis label of the current axis.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xlim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get or set the &lt;em&gt;x&lt;/em&gt; limits of the current axes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xscale&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the scaling of the &lt;em&gt;x&lt;/em&gt;-axis.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xticks&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get or set the &lt;em&gt;x&lt;/em&gt;-limits of the current tick locations and labels.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ylabel&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the &lt;em&gt;y&lt;/em&gt; axis label of the current axis.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ylim&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get or set the &lt;em&gt;y&lt;/em&gt;-limits of the current axes.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;yscale&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the scaling of the &lt;em&gt;y&lt;/em&gt;-axis.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;yticks&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get or set the &lt;em&gt;y&lt;/em&gt;-limits of the current tick locations and labels.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;plotting-functions:12e5e4622920f32cd819b8409703bfed&#34;&gt;Plotting Functions&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;acorr&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot the autocorrelation of &lt;em&gt;x&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;bar&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a bar plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;barbs&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a 2-D field of barbs&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;barh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a horizontal bar plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;boxplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a box and whisker plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;broken_barh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot horizontal bars&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cohere&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot the coherence between &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;contour&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot contours&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;contourf&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot filled contours&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;csd&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot cross-spectral density&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;errorbar&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot an errorbar graph&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;eventplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot identical parallel lines at specific positions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot filled polygons&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;fill_between&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make filled polygons between two curves&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;fill_betweenx&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make filled polygons between two horizontal curves&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hexbin&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a hexagonal binning plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hist&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a histogram&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hist2d&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a 2D histogram plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display an image on the axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;loglog&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a plot with log scaling on both the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;matshow&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display an array as a matrix in a new figure window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create a pseudocolor plot of a 2-D array&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a quadrilateral mesh&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pie&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a pie chart&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot lines and/or markers&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;plot_date&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot with data with dates&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;polar&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a polar plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;psd&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot the power spectral density&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;quiver&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a 2-D field of arrows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;scatter&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a scatter plot of x vs y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;semilogx&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a plot with log scaling on the &lt;em&gt;x&lt;/em&gt; axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;semilogy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a plot with log scaling on the &lt;em&gt;y&lt;/em&gt; axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;specgram&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot a spectrogram&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;spy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot the sparsity pattern on a 2-D array&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;stackplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Draws a stacked area plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;stem&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create a stem plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Make a step plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;streamplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Draws streamlines of a vector flow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;tricontour&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Draw contours on an unstructured triangular grid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;tricontourf&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Draw filled contours on an unstructured triangular grid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;tripcolor&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create a pseudocolor plot of an unstructured triangular grid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;triplot&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Draw a unstructured triangular grid as lines and/or markers&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xcorr&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot the cross-correlation between &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;plot-modifiers:12e5e4622920f32cd819b8409703bfed&#34;&gt;Plot modifiers&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;annotate&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Create an annotation: a piece of text referring to a data point&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add an arrow to the axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axhline&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a horizontal line across the axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axhspan&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a horizontal span (rectangle) across the axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axvline&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a vertical line across the axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;axvspan&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a vertical span (rectangle) across the axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;box&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turn the axes box on or off&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;clabel&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Label a contour plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;colorbar&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a colorbar to a plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;grid&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Turn the axes grids on or off&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hlines&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot horizontal lines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;legend&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Place a legend on the current axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;minorticks_off&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Remove minor ticks from the current plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;minorticks_on&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Display minor ticks on the current plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;quiverkey&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a key to a quiver plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rgrids&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Get or set the radial gridlines on a polar plot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;suptitle&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a centered title to the figure&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;table&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add a table to the current axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Add text to the axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set a title of the current axes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;vlines&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Plot vertical lines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;xlabel&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the &lt;em&gt;x&lt;/em&gt; axis label of the current axis&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ylabel&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Set the &lt;em&gt;y&lt;/em&gt; axis label of the current axis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####**Enough! **&lt;/p&gt;

&lt;p&gt;####&lt;strong&gt;That&amp;rsquo;s Enough tables and theory.&lt;/strong&gt; Let&amp;rsquo;s actually plot something&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;figure:12e5e4622920f32cd819b8409703bfed&#34;&gt;Figure&lt;/h2&gt;

&lt;h3 id=&#34;introduction:12e5e4622920f32cd819b8409703bfed&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;All plotting is done through the &lt;a href=&#34;http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure&#34;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt; object. You can create as many figures as you need. Figures can&amp;rsquo;t do much by themselves, but no plotting can happen without them. They are, literally, the &amp;ldquo;canvas&amp;rdquo; of your plot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig = plt.figure()


&amp;lt;matplotlib.figure.Figure at 0x102f4b710&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ha! nothing happened! This is because by default mpl will not show anything until told to do so. In other words, the &amp;ldquo;interactive mode&amp;rdquo; is turned off. This is very useful for scripting where we would not ever want to see the intermediate results. For those who wishes to experiment and want to see their plot as they issue commands, there is the &amp;ldquo;&lt;code&gt;plt.ion()&lt;/code&gt;&amp;rdquo; command they can issue before creating their first figure of their session. For the purpoase of this tutorial, we will leave interactivity off.&lt;/p&gt;

&lt;h3 id=&#34;figure-properties:12e5e4622920f32cd819b8409703bfed&#34;&gt;Figure properties&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;figsize : tuple of integers, width, height in inches.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dpi : integer, esolution of the figure in dots per inch.&lt;/p&gt;

&lt;p&gt;fig = plt.figure(figsize=(10, 4))
fig.gca()  # needed for the ipython-inline to display anything. This returns the current axis instance.
plt.show() # Lets see the plot (Nothin special.. just axis and a white canvas!)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A really useful utility function is &lt;a href=&#34;http://matplotlib.org/api/figure_api.html?highlight=figaspect#matplotlib.figure.figaspect&#34;&gt;&lt;code&gt;figaspect&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This lets you create a figure with specified aspect ratio. If arg is a number, use that aspect ratio. If arg is an array, figaspect will determine the width and height for a figure that would fit array preserving aspect ratio.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Twice as wide. Ratio of Height/ Width
fig = plt.figure(figsize=plt.figaspect(0.5))
fig.gca()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_11_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;axes:12e5e4622920f32cd819b8409703bfed&#34;&gt;Axes&lt;/h2&gt;

&lt;p&gt;From above output we can observe that Matplotlib automatically creates axis for us. mpl gives us an option to change the axes. (Obviously since All plotting is done with respect to an &lt;a href=&#34;http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes&#34;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;Axes&lt;/em&gt; is made up of &lt;a href=&#34;http://matplotlib.org/api/axis_api.html#matplotlib.axis.Axis&#34;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; objects (and many other things). An &lt;em&gt;Axes&lt;/em&gt; object must belong to a &lt;em&gt;Figure&lt;/em&gt; (and only one &lt;code&gt;Figure&lt;/code&gt;). Most commands you will ever issue will be with respect to this &lt;em&gt;Axes&lt;/em&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Lets manually add axis for x axis
fig = plt.figure()
&#39;&#39;&#39;
fig.add_subplot(numrows numcols fignum). subplot(111) will be created by default 
if you don&#39;t manually specify axes. fignum ranges from 1 to numrows*numcols.
If you want to place an axes manually, i.e., not on a rectangular grid, use the axes() command, 
which allows you to specify the location as axes([left, bottom, width, height]) where all values 
are in fractional (0 to 1) coordinates. 
Each figure can contain as many axes and subplots as your heart desires
&#39;&#39;&#39;
ax = fig.add_subplot(111) 
ax.plot([1, 2, 3, 4, 5, 6, 7, 8], np.random.randint(1, 99, size=(1,8))[0])  # Add some data for X and Y
ax.set_xlim(0.5, 8.5) # Set X axis between 0.5 and 8.5
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All methods of an &lt;code&gt;Axes&lt;/code&gt; object exist as a function in the &lt;em&gt;pyplot&lt;/em&gt; module (and vice-versa). For example, when calling &lt;code&gt;plt.xlim(1, 10)&lt;/code&gt;, &lt;code&gt;pyplot&lt;/code&gt; calls &lt;code&gt;ax.set_xlim(1, 10)&lt;/code&gt; on whichever &lt;code&gt;Axes&lt;/code&gt; is &amp;ldquo;current&amp;rdquo;. Here is an equivalent version of the above example using just pyplot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.plot([1, 2, 3, 4, 5, 6, 7, 8], np.random.randint(1, 99, size=(1,8))[0])  # Add some data for X and Y
plt.xlim(0.5, 8.5)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_15_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner Code, right? So, why will most of my examples not follow the pyplot approach? Because &lt;a href=&#34;http://www.python.org/dev/peps/pep-0020/&#34;&gt;&lt;code&gt;PEP20&lt;/code&gt;&lt;/a&gt; &amp;ldquo;The Zen of Python&amp;rdquo; says:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;code&gt;Explicit is better than implicit&lt;/code&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;While very simple plots, with short scripts would benefit from the conciseness of the pyplot implicit approach, when doing more complicated plots, or working within larger scripts, you will want to explicitly pass around the &lt;code&gt;Axes&lt;/code&gt; and/or &lt;code&gt;Figure&lt;/code&gt; object to operate upon.&lt;/p&gt;

&lt;h3 id=&#34;limits-and-autoscaling:12e5e4622920f32cd819b8409703bfed&#34;&gt;Limits and autoscaling&lt;/h3&gt;

&lt;p&gt;As mentioned above, by default, matplotlib will attempt to determine limits for you that encompasses all the data you have plotted.  This is the &amp;ldquo;autoscale&amp;rdquo; feature. For line and image plots, the limits are not padded, while plots such as scatter plots and bar plots are given some padding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, (ax1, ax2) = plt.subplots(1, 2, figsize=plt.figaspect(0.5))
ax1.plot([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1]) # Will not pad
ax2.scatter([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1]) # Will pad
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_18_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A trick with limits is to specify only half of a limit. When done &lt;strong&gt;after&lt;/strong&gt; a plot is made, this has the effect of allowing the user to anchor a limit while letting matplotlib to autoscale the rest of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at below example to understand what I mean&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Good -- setting limits after plotting is done
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=plt.figaspect(0.5))
ax1.plot([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1])
ax2.scatter([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1])
ax1.set_ylim(bottom=-10)
ax2.set_xlim(right=25)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Bad -- Setting limits before plotting is done
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=plt.figaspect(0.5))
ax1.set_ylim(bottom=-10) # This will mess up your plot
ax2.set_xlim(right=25)  # This will mess up your plot
ax1.plot([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1])
ax2.scatter([-10, -5, 0, 5, 10, 15], [-1.2, 2, 3.5, -0.3, -4, 1])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_21_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;labels-and-legends:12e5e4622920f32cd819b8409703bfed&#34;&gt;Labels and Legends&lt;/h3&gt;

&lt;p&gt;You can label just about anything in mpl. You can provide a label to your plot, which allows your legend to automatically build itself. The X and Y axis can also be labeled, as well as the subplot itself via the title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot([1, 2, 3, 4], np.random.randint(1, 99, size=(1,4))[0], label=&#39;Philadelphia&#39;)
ax.plot([1, 2, 3, 4], np.random.randint(1, 99, size=(1,4))[0], label=&#39;Boston&#39;)
ax.set_ylabel(&#39;Temperature (deg C)&#39;)
ax.set_xlabel(&#39;Time&#39;)
ax.set_title(&amp;quot;A tale of two cities&amp;quot;)
ax.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_23_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Also, if you happen to be plotting something that you do not want to appear in the legend, just set the label to &amp;ldquo;_&lt;code&gt;nolegend&lt;/code&gt;_&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, ax = plt.subplots(1, 1)
ax.bar([1, 2, 3, 4], [10, 20, 25, 30], label=&amp;quot;Bar&amp;quot;)
ax.plot([1, 2, 3, 4], [10, 20, 25, 30], label=&amp;quot;_nolegend_&amp;quot;)  # __nolengend__ is equivalent to not specifying any lengend      
ax.set_ylim(top=35)
ax.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_25_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;ticks-tick-lines-tick-labels-and-tickers:12e5e4622920f32cd819b8409703bfed&#34;&gt;Ticks, Tick Lines, Tick Labels and Tickers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A Tick is the location of a Tick Label.&lt;/li&gt;
&lt;li&gt;A Tick Line is the line that denotes the location of the tick.&lt;/li&gt;
&lt;li&gt;A Tick Label is the text that is displayed at that tick.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://matplotlib.org/api/ticker_api.html#module-matplotlib.ticker&#34;&gt;&lt;code&gt;Ticker&lt;/code&gt;&lt;/a&gt; automatically determines the ticks for an Axis and formats the tick labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.tick_params&#34;&gt;&lt;code&gt;tick_params()&lt;/code&gt;&lt;/a&gt; is often used to help configure your tickers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot([1, 2, 3, 4], [10, 20, 25, 30])
ax.xaxis.set_ticks(range(1, 5))               # Set ticks at 1, 2, 3, 4
ax.xaxis.set_ticklabels([3, 100, -12, &amp;quot;foo&amp;quot;]) # Label ticks as &amp;quot;3&amp;quot;, &amp;quot;100&amp;quot;, &amp;quot;-12&amp;quot;, and &amp;quot;foo&amp;quot;
ax.tick_params(axis=&#39;y&#39;, direction=&#39;inout&#39;, length=10)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_27_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;subplots:12e5e4622920f32cd819b8409703bfed&#34;&gt;Subplots&lt;/h2&gt;

&lt;p&gt;While an &lt;code&gt;Axes&lt;/code&gt; object can only belong to one &lt;code&gt;Figure&lt;/code&gt; (and it &lt;strong&gt;MUST&lt;/strong&gt;), A &lt;code&gt;Figure&lt;/code&gt; can have many &lt;code&gt;Axes&lt;/code&gt; objects. These are typically called &amp;ldquo;subaxes&amp;rdquo; or &amp;ldquo;subplots&amp;rdquo;. They act just like regular &lt;code&gt;Axes&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig = plt.figure(figsize=(10, 5))
ax = fig.add_subplot(121)
ax.plot([1, 2, 3, 4], np.random.randint(1, 99, size=(1,4))[0], label=&#39;Philadelphia&#39;)
ax.plot([1, 2, 3, 4], np.random.randint(1, 99, size=(1,4))[0], label=&#39;Boston&#39;)
ax.set_title(&#39;A tale of two cities&#39;)
ax.legend()

t = np.linspace(-np.pi, np.pi, 256, endpoint=True)
z = np.sin(t)
ax = fig.add_subplot(122)
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi])
ax.plot(t, z, label=&#39;Sine Wave&#39;)
ax.set_title(&amp;quot;Observed Tide&amp;quot;)
ax.legend()

fig.suptitle(&#39;Figure Title&#39;)  # Add a centered title for the whole figure
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_29_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are many ways to add and modify subplots in a figure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplots&#34;&gt;&lt;code&gt;plt.subplots()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&#34;&gt;&lt;code&gt;plt.subplot()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://matplotlib.org/api/figure_api.html?#matplotlib.figure.Figure.add_subplot&#34;&gt;&lt;code&gt;fig.add_subplot()&lt;/code&gt;&lt;/a&gt;  Which should be familiar to all Matlab users&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.axes&#34;&gt;&lt;code&gt;plt.axes()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.subplot2grid&#34;&gt;&lt;code&gt;plt.subplot2grid()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plt.subplot_tool()&lt;/code&gt; Interactive modification of subplot spacing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;spacing:12e5e4622920f32cd819b8409703bfed&#34;&gt;Spacing&lt;/h3&gt;

&lt;p&gt;The spacing between the subplots can be adjusted using &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html?#matplotlib.pyplot.subplots_adjust&#34;&gt;&lt;code&gt;plt.subplots_adjust()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Play around with the example below to see how the different arguments affect the spacing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, axes = plt.subplots(2, 2, figsize=(9, 9))
plt.subplots_adjust(wspace=0.5, hspace=0.3,
                    left=0.125, right=0.9,
                    top=0.9,    bottom=0.1)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A common complaint with matplotlib users is that the labels do not fit with the subplots, or the label of one subplot spills onto another subplot&amp;rsquo;s area. Matplotlib does not currently have any sort of robust layout engine, as it is a design decision to minimize the amount of &amp;ldquo;magic&amp;rdquo; that matplotlib performs. We intend to let users have complete, 100% control over their plots. LaTeX users would be quite familiar with the amount of frustration that can occur with placement of figures in their documents.&lt;/p&gt;

&lt;p&gt;That said, there have been some efforts to develop tools that users can use to help address the most common compaints. The &lt;a href=&#34;http://matplotlib.org/users/tight_layout_guide.html&#34;&gt;&lt;code&gt;Tight Layout&lt;/code&gt;&lt;/a&gt; feature, when invoked, will attempt to resize margins, and subplots so that nothing overlaps.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def example_plot(ax):
    ax.plot([1, 2])
    ax.set_xlabel(&#39;x-label&#39;, fontsize=10)
    ax.set_ylabel(&#39;y-label&#39;, fontsize=10)

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)
example_plot(ax1)
example_plot(ax2)
example_plot(ax3)
example_plot(ax4)
#plt.tight_layout()
plt.show()  # Check x label, y label 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As a last bit of an FAQ, this &lt;code&gt;tight_layout&lt;/code&gt; feature is unrelated to the so-called &lt;code&gt;bbox_inches=&#39;tight&#39;&lt;/code&gt; feature that will be discussed separately. (Check Sine and Cosine plots below)&lt;/p&gt;

&lt;h3 id=&#34;gridspec:12e5e4622920f32cd819b8409703bfed&#34;&gt;GridSpec&lt;/h3&gt;

&lt;p&gt;Under the hood, matplotlib utilizes &lt;a href=&#34;http://matplotlib.org/api/gridspec_api.html&#34;&gt;&lt;code&gt;GridSpec&lt;/code&gt;&lt;/a&gt; to lay out the subplots. While &lt;code&gt;plt.subplots()&lt;/code&gt; is fine for simple cases, sometimes you will need more advanced subplot layouts. In such cases, you should use GridSpec directly. GridSpec is outside the scope of this tutorial, but it is handy to know that it exists. &lt;a href=&#34;http://matplotlib.org/users/gridspec.html&#34;&gt;&lt;code&gt;GridSpec Guide&lt;/code&gt;&lt;/a&gt; is a guide on how to use it.&lt;/p&gt;

&lt;h3 id=&#34;sharing-axes:12e5e4622920f32cd819b8409703bfed&#34;&gt;Sharing axes&lt;/h3&gt;

&lt;p&gt;There will be times when you want to have the x axis and/or the y axis of your subplots to be &amp;ldquo;shared&amp;rdquo;. Sharing an axis means that the axis in one or more subplots will be tied together such that any change in one of the axis changes all of the other shared axes. This works very nicely with autoscaling arbitrary datasets that may have overlapping domains. Furthermore, when interacting with the plots (panning and zooming), all of the shared axes will pan and zoom automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)  # Common X and Y axis for both subplots
ax1.plot([1, 2, 3, 4], [1, 2, 3, 4])
ax2.plot([3, 4, 5, 6], [6, 5, 4, 3])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_37_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;twinning-axes:12e5e4622920f32cd819b8409703bfed&#34;&gt;&amp;ldquo;Twinning&amp;rdquo; axes&lt;/h3&gt;

&lt;p&gt;Sometimes one may want to overlay two plots on the same axes, but the scales may be entirely different. You can simply treat them as separate plots, but then twin them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, ax1 = plt.subplots(1, 1)
ax1.plot([1, 2, 3, 4], [1, 2, 3, 4])  # A plot with X and Y values
ax2 = ax1.twinx()  # Twin X
ax2.scatter([1, 2, 3, 4], [60, 50, 40, 30])  # Another plot with SAME X but different Y values
ax1.set_xlabel(&#39;X&#39;)
ax1.set_ylabel(&#39;First scale&#39;)
ax2.set_ylabel(&#39;Other scale&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_39_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A better Twinx example:
fig, ax1 = plt.subplots()
t = np.arange(0.01, 10.0, 0.01)
s1 = np.exp(t)
ax1.plot(t, s1, &#39;b-&#39;)
ax1.set_xlabel(&#39;time (s)&#39;)
# Make the y-axis label and tick labels match the line color.
ax1.set_ylabel(&#39;exp&#39;, color=&#39;b&#39;)
for tl in ax1.get_yticklabels():
    tl.set_color(&#39;b&#39;)


ax2 = ax1.twinx()
s2 = np.sin(2*np.pi*t)
ax2.plot(t, s2, &#39;r.&#39;)
ax2.set_ylabel(&#39;sin&#39;, color=&#39;r&#39;)
for tl in ax2.get_yticklabels():
    tl.set_color(&#39;r&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_40_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;axis-spines:12e5e4622920f32cd819b8409703bfed&#34;&gt;Axis Spines&lt;/h1&gt;

&lt;p&gt;Spines are the axis lines for a plot. Each plot can have four spines: &amp;ldquo;top&amp;rdquo;, &amp;ldquo;bottom&amp;rdquo;, &amp;ldquo;left&amp;rdquo; and &amp;ldquo;right&amp;rdquo;. By default, they are set so that they frame the plot, but they can be individually positioned and configured via the &lt;a href=&#34;http://matplotlib.org/api/spines_api.html#matplotlib.spines.Spine.set_position&#34;&gt;&lt;code&gt;set_position()&lt;/code&gt;&lt;/a&gt; method of the spine. Here are some different configurations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, ax = plt.subplots(1, 1)
ax.plot([-2, 2, 3, 4], [-10, 20, 25, 5])
ax.spines[&#39;top&#39;].set_visible(False)
ax.xaxis.set_ticks_position(&#39;bottom&#39;)  # no ticklines at the top
ax.spines[&#39;right&#39;].set_visible(False)
ax.yaxis.set_ticks_position(&#39;left&#39;)  # no ticklines on the right

# &amp;quot;outward&amp;quot;
# Move the two remaining spines &amp;quot;out&amp;quot; away from the plot by 10 points
ax.spines[&#39;bottom&#39;].set_position((&#39;outward&#39;, 10))
ax.spines[&#39;left&#39;].set_position((&#39;outward&#39;, 10))

# &amp;quot;data&amp;quot;
# Have the spines stay intersected at (0,0)
#ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;, 0))
#ax.spines[&#39;left&#39;].set_position((&#39;data&#39;, 0))

# &amp;quot;axes&amp;quot;
# Have the two remaining spines placed at a fraction of the axes
#ax.spines[&#39;bottom&#39;].set_position((&#39;axes&#39;, 0.75))
#ax.spines[&#39;left&#39;].set_position((&#39;axes&#39;, 0.25))

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_42_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;colorbars:12e5e4622920f32cd819b8409703bfed&#34;&gt;Colorbars&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at something cool now.&lt;/p&gt;

&lt;p&gt;Colorbars are much like legends because they help to describe the data being displayed. While legends describe plots, i.e., plot(), scatter(), hist(), stem(), colorbars describe images. To be really specific and technical, they can be used for any &amp;ldquo;ScalarMappable&amp;rdquo;, which will be discussed in the &lt;code&gt;Artists&lt;/code&gt; section. Let us take a look at a very simple example of a colorbar for a simple 2D image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y, x = np.ogrid[-6:6:20j, -10:10:30j]
z = np.hypot(x, y)
plt.imshow(z)
plt.colorbar()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_44_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Horizontal Colorbar
plt.imshow(z)
plt.colorbar(orientation=&#39;horizontal&#39;, shrink=0.75)  # We can make colorbars do all sorts of things!
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_45_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Change colorbar shape
plt.imshow(z)
cbar = plt.colorbar(extend=&#39;both&#39;, aspect=10)
cbar.set_label(&#39;distance&#39;)                           # And we can even add a label to it
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_46_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;colors:12e5e4622920f32cd819b8409703bfed&#34;&gt;Colors&lt;/h2&gt;

&lt;p&gt;This is, perhaps, the most important piece of vocabulary in matplotlib. Given that matplotlib is a plotting library, colors are associated with everything that is plotted in your figures. Matplotlib supports a &lt;a href=&#34;http://matplotlib.org/api/colors_api.html#module-matplotlib.colors&#34;&gt;very robust language&lt;/a&gt; for specifying colors that should be familiar to a wide variety of users.&lt;/p&gt;

&lt;h3 id=&#34;colornames:12e5e4622920f32cd819b8409703bfed&#34;&gt;Colornames&lt;/h3&gt;

&lt;p&gt;First, colors can be given as strings. For very basic colors, you can even get away with just a single letter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;b: blue&lt;/li&gt;
&lt;li&gt;g: green&lt;/li&gt;
&lt;li&gt;r: red&lt;/li&gt;
&lt;li&gt;c: cyan&lt;/li&gt;
&lt;li&gt;m: magenta&lt;/li&gt;
&lt;li&gt;y: yellow&lt;/li&gt;
&lt;li&gt;k: black&lt;/li&gt;
&lt;li&gt;w: white&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other colornames that are allowed are the HTML/CSS colornames such as &amp;ldquo;burlywood&amp;rdquo; and &amp;ldquo;chartreuse&amp;rdquo; are valid. See the &lt;a href=&#34;http://www.w3schools.com/html/html_colornames.asp&#34;&gt;full list&lt;/a&gt; of the 147 colornames. For the British speaking and poor spellers among us (Note, I am not implying that British speakers are poor spellers!), we allow &amp;ldquo;grey&amp;rdquo; where-ever &amp;ldquo;gray&amp;rdquo; appears in that list of colornames. All of these colornames are case-insensitive.&lt;/p&gt;

&lt;h3 id=&#34;hex-values:12e5e4622920f32cd819b8409703bfed&#34;&gt;Hex values&lt;/h3&gt;

&lt;p&gt;Colors can also be specified by supplying an HTML/CSS hex string, such as &lt;code&gt;&#39;#0000FF&#39;&lt;/code&gt; for blue.&lt;/p&gt;

&lt;h3 id=&#34;256-shades-of-gray:12e5e4622920f32cd819b8409703bfed&#34;&gt;256 Shades of Gray&lt;/h3&gt;

&lt;p&gt;A gray level can be given instead of a color by passing a string representation of a number between 0 and 1, inclusive. &lt;code&gt;&#39;0.0&#39;&lt;/code&gt; is black, while &lt;code&gt;&#39;1.0&#39;&lt;/code&gt; is white. &lt;code&gt;&#39;0.75&#39;&lt;/code&gt; would be a lighter shade of gray.&lt;/p&gt;

&lt;h3 id=&#34;rgb-a-tuples:12e5e4622920f32cd819b8409703bfed&#34;&gt;RGB[A] tuples&lt;/h3&gt;

&lt;p&gt;You may come upon instances where the previous ways of specifying colors do not work. This can sometimes happen in some of the deeper, stranger levels of the code. When all else fails, the universal language of colors for matplotlib is the RGB[A] tuple. This is the &amp;ldquo;Red&amp;rdquo;, &amp;ldquo;Green&amp;rdquo;, &amp;ldquo;Blue&amp;rdquo;, and sometimes &amp;ldquo;Alpha&amp;rdquo; tuple of floats in the range of [0, 1]. One means full saturation of that channel, so a red RGBA tuple would be &lt;code&gt;(1.0, 0.0, 0.0, 1.0)&lt;/code&gt;, whereas a partly transparent green RGBA tuple would be &lt;code&gt;(0.0, 1.0, 0.0, 0.75)&lt;/code&gt;.  The documentation will usually specify whether it accepts RGB or RGBA tuples. Sometimes, a list of tuples would be required for multiple colors, and you can even supply a Nx3 or Nx4 numpy array in such cases.&lt;/p&gt;

&lt;p&gt;In functions such as &lt;code&gt;plot()&lt;/code&gt; and &lt;code&gt;scatter()&lt;/code&gt;, while it may appear that they can take a color specification, what they really need is a &amp;ldquo;format specification&amp;rdquo;, which includes color as part of the format. Unfortunately, such specifications are string only and so RGB[A] tuples are not supported for such arguments (but you can still pass an RGB[A] tuple for a &amp;ldquo;color&amp;rdquo; argument).&lt;/p&gt;

&lt;p&gt;Note, oftentimes there is a separate argument for &amp;ldquo;alpha&amp;rdquo; where-ever you can specify a color. The value for &amp;ldquo;alpha&amp;rdquo; will usually take precedence over the alpha value in the RGBA tuple. There is no easy way around this problem.&lt;/p&gt;

&lt;h1 id=&#34;markers:12e5e4622920f32cd819b8409703bfed&#34;&gt;Markers&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://matplotlib.org/api/markers_api.html&#34;&gt;&lt;code&gt;Markers&lt;/code&gt;&lt;/a&gt; are commonly used in &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot&#34;&gt;&lt;code&gt;plot()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter&#34;&gt;&lt;code&gt;scatter()&lt;/code&gt;&lt;/a&gt; plots, but also show up elsewhere. There is a wide set of markers available, and custom markers can even be specified.&lt;/p&gt;

&lt;p&gt;marker     |  description  ||marker    |  description  ||marker    |  description  ||marker    |  description&lt;br /&gt;
:&amp;mdash;&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;||:&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;||:&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;||:&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
&amp;ldquo;.&amp;rdquo;        |  point        ||&amp;ldquo;+&amp;rdquo;       |  plus         ||&amp;ldquo;,&amp;rdquo;       |  pixel        ||&amp;ldquo;x&amp;rdquo;       |  cross
&amp;ldquo;o&amp;rdquo;        |  circle       ||&amp;ldquo;D&amp;rdquo;       |  diamond      ||&amp;ldquo;d&amp;rdquo;       |  thin&lt;em&gt;diamond ||          |
&amp;ldquo;8&amp;rdquo;        |  octagon      ||&amp;ldquo;s&amp;rdquo;       |  square       ||&amp;ldquo;p&amp;rdquo;       |  pentagon     ||&amp;rdquo;*&amp;rdquo;      |  star
&amp;ldquo;&amp;#124;&amp;rdquo;   |  vertical line||&amp;rdquo;&lt;/em&gt;&amp;rdquo;      | horizontal line ||&amp;ldquo;h&amp;rdquo;     |  hexagon1     ||&amp;ldquo;H&amp;rdquo;       |  hexagon2
0          |  tickleft     ||4         |  caretleft    ||&amp;rdquo;&amp;lt;&amp;rdquo;       | triangle_left ||&amp;ldquo;3&amp;rdquo;       |  tri_left
1          |  tickright    ||5         |  caretright   ||&amp;ldquo;&amp;gt;&amp;rdquo;       | triangle_right||&amp;ldquo;4&amp;rdquo;       |  tri_right
2          |  tickup       ||6         |  caretup      ||&amp;ldquo;^&amp;rdquo;       | triangle_up   ||&amp;ldquo;2&amp;rdquo;       |  tri_up
3          |  tickdown     ||7         |  caretdown    ||&amp;ldquo;v&amp;rdquo;       | triangle_down ||&amp;ldquo;1&amp;rdquo;       |  tri_down
&amp;ldquo;None&amp;rdquo;     |  nothing      ||&lt;code&gt;None&lt;/code&gt;    |  nothing      ||&amp;rdquo; &amp;ldquo;       |  nothing      ||&amp;rdquo;&amp;rdquo;        |  nothing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xs, ys = np.mgrid[:4, 9:0:-1]
markers = [&amp;quot;.&amp;quot;, &amp;quot;+&amp;quot;, &amp;quot;,&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;p&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;|&amp;quot;, &amp;quot;_&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;H&amp;quot;, 0, 4, &amp;quot;&amp;lt;&amp;quot;, &amp;quot;3&amp;quot;,
           1, 5, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;4&amp;quot;, 2, 6, &amp;quot;^&amp;quot;, &amp;quot;2&amp;quot;, 3, 7, &amp;quot;v&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;None&amp;quot;, None, &amp;quot; &amp;quot;, &amp;quot;&amp;quot;]
descripts = [&amp;quot;point&amp;quot;, &amp;quot;plus&amp;quot;, &amp;quot;pixel&amp;quot;, &amp;quot;cross&amp;quot;, &amp;quot;circle&amp;quot;, &amp;quot;diamond&amp;quot;, &amp;quot;thin diamond&amp;quot;, &amp;quot;&amp;quot;,
             &amp;quot;octagon&amp;quot;, &amp;quot;square&amp;quot;, &amp;quot;pentagon&amp;quot;, &amp;quot;star&amp;quot;, &amp;quot;vertical bar&amp;quot;, &amp;quot;horizontal bar&amp;quot;, &amp;quot;hexagon 1&amp;quot;, &amp;quot;hexagon 2&amp;quot;,
             &amp;quot;tick left&amp;quot;, &amp;quot;caret left&amp;quot;, &amp;quot;triangle left&amp;quot;, &amp;quot;tri left&amp;quot;, &amp;quot;tick right&amp;quot;, &amp;quot;caret right&amp;quot;, &amp;quot;triangle right&amp;quot;, &amp;quot;tri right&amp;quot;,
             &amp;quot;tick up&amp;quot;, &amp;quot;caret up&amp;quot;, &amp;quot;triangle up&amp;quot;, &amp;quot;tri up&amp;quot;, &amp;quot;tick down&amp;quot;, &amp;quot;caret down&amp;quot;, &amp;quot;triangle down&amp;quot;, &amp;quot;tri down&amp;quot;,
             &amp;quot;Nothing&amp;quot;, &amp;quot;Nothing&amp;quot;, &amp;quot;Nothing&amp;quot;, &amp;quot;Nothing&amp;quot;]
fig, ax = plt.subplots(1, 1, figsize=(14, 4))
for x, y, m, d in zip(xs.T.flat, ys.T.flat, markers, descripts):
    ax.scatter(x, y, marker=m, s=100)
    ax.text(x + 0.1, y - 0.1, d, size=14)
ax.set_axis_off()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_49_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;linestyles:12e5e4622920f32cd819b8409703bfed&#34;&gt;Linestyles&lt;/h2&gt;

&lt;p&gt;Line styles are about as commonly used as colors. There are a few predefined linestyles available to use. Note that there are some advanced techniques to specify some custom line styles. &lt;a href=&#34;http://matplotlib.org/1.3.0/examples/lines_bars_and_markers/line_demo_dash_control.html&#34;&gt;&lt;code&gt;Here&lt;/code&gt;&lt;/a&gt; is an example of a custom dash pattern.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;linestyle&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;rsquo;-&amp;rsquo;&lt;/td&gt;
&lt;td&gt;solid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;rsquo;&amp;ndash;&amp;rsquo;&lt;/td&gt;
&lt;td&gt;dashed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;rsquo;-.&amp;rsquo;&lt;/td&gt;
&lt;td&gt;dashdot&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lsquo;:&amp;rsquo;&lt;/td&gt;
&lt;td&gt;dotted&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lsquo;None&amp;rsquo;&lt;/td&gt;
&lt;td&gt;draw nothing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;rsquo; &amp;lsquo;&lt;/td&gt;
&lt;td&gt;draw nothing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;ldquo;&lt;/td&gt;
&lt;td&gt;draw nothing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also, don&amp;rsquo;t mix up &amp;ldquo;.-&amp;rdquo; (line with dot markers) and &amp;ldquo;-.&amp;rdquo; (dash-dot line) when using the plot or scatter functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = np.arange(0.0, 5.0, 0.2)
plt.plot(t, t, &#39;-&#39;, t, t**2, &#39;--&#39;, t, t**3, &#39;-.&#39;, t, -t, &#39;:&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_51_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It is a bit confusing, but the line styles mentioned above are only valid for lines. Whenever you are dealing with the linestyles of the edges of &amp;ldquo;Patch&amp;rdquo; objects, you will need to use words instead of the symbols. So &amp;ldquo;solid&amp;rdquo; instead of &amp;ldquo;-&amp;rdquo;, and &amp;ldquo;dashdot&amp;rdquo; instead of &amp;ldquo;-.&amp;rdquo;. Hopefully, this issue will be fixed for the v1.5 release and allow these specifications to be used interchangably.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fig, ax = plt.subplots(1, 1)
ax.bar([1, 2, 3, 4], [10, 20, 15, 13], ls=&#39;dashed&#39;, ec=&#39;r&#39;, lw=5)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_53_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;plot-attributes:12e5e4622920f32cd819b8409703bfed&#34;&gt;Plot attributes&lt;/h2&gt;

&lt;p&gt;With just about any plot you can make, there are many attributes that can be modified to make the lines and markers suit your needs. Note that for many plotting functions, matplotlib will cycle the colors for each dataset you plot. However, you are free to explicitly state which colors you want used for which plots. For the &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot&#34;&gt;&lt;code&gt;plt.plot()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter&#34;&gt;&lt;code&gt;plt.scatter()&lt;/code&gt;&lt;/a&gt; functions, you can mix the specification for the colors, linestyles, and markers in a single string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, &#39;r--&#39;, t, t**2, &#39;bs&#39;, t, t**3, &#39;g^&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_55_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alpha&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;color or c&lt;/td&gt;
&lt;td&gt;any matplotlib color&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dash_capstyle&lt;/td&gt;
&lt;td&gt;[&amp;lsquo;butt&amp;rsquo;, &amp;lsquo;round&amp;rsquo; &amp;lsquo;projecting&amp;rsquo;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dash_joinstyle&lt;/td&gt;
&lt;td&gt;[&amp;lsquo;miter&amp;rsquo; &amp;lsquo;round&amp;rsquo; &amp;lsquo;bevel&amp;rsquo;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dashes&lt;/td&gt;
&lt;td&gt;sequence of on/off ink in points&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;drawstyle&lt;/td&gt;
&lt;td&gt;[ ‘default’ ‘steps’ ‘steps-pre’&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;‘steps-mid’ ‘steps-post’ ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;linestyle or ls&lt;/td&gt;
&lt;td&gt;[ &amp;lsquo;-&amp;rsquo; &amp;lsquo;&amp;ndash;&amp;rsquo; &amp;lsquo;-.&amp;rsquo; &amp;lsquo;:&amp;rsquo; &amp;lsquo;None&amp;rsquo; &amp;lsquo; &amp;rsquo; &amp;ldquo;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;and any drawstyle in combination with a&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;linestyle, e.g. &amp;lsquo;steps&amp;ndash;&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;linewidth or lw&lt;/td&gt;
&lt;td&gt;float value in points&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;marker&lt;/td&gt;
&lt;td&gt;[ 0 1 2 3 4 5 6 7 &amp;lsquo;o&amp;rsquo; &amp;rsquo;d&amp;rsquo; &amp;rsquo;D&amp;rsquo; &amp;lsquo;h&amp;rsquo; &amp;lsquo;H&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;rdquo; &amp;lsquo;None&amp;rsquo; &amp;lsquo; &amp;rsquo; &lt;code&gt;None&lt;/code&gt; &amp;lsquo;8&amp;rsquo; &amp;lsquo;p&amp;rsquo; &amp;lsquo;,&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;rsquo;+&amp;rsquo; &amp;lsquo;x&amp;rsquo; &amp;lsquo;.&amp;rsquo; &amp;rsquo;s&amp;rsquo; &amp;lsquo;*&amp;rsquo; &amp;lsquo;_&amp;rsquo; &amp;lsquo;&amp;#124;&amp;lsquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;lsquo;1&amp;rsquo; &amp;lsquo;2&amp;rsquo; &amp;lsquo;3&amp;rsquo; &amp;lsquo;4&amp;rsquo; &amp;lsquo;v&amp;rsquo; &amp;lsquo;&amp;lt;&amp;rsquo; &amp;lsquo;&amp;gt;&amp;rsquo; &amp;lsquo;^&amp;rsquo; ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;markeredgecolor or mec&lt;/td&gt;
&lt;td&gt;any matplotlib color&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;markeredgewidth or mew&lt;/td&gt;
&lt;td&gt;float value in points&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;markerfacecolor or mfc&lt;/td&gt;
&lt;td&gt;any matplotlib color&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;markersize or ms&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;solid_capstyle&lt;/td&gt;
&lt;td&gt;[&amp;lsquo;butt&amp;rsquo; &amp;lsquo;round&amp;rsquo; &amp;lsquo;projecting&amp;rsquo;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;solid_joinstyle&lt;/td&gt;
&lt;td&gt;[&amp;lsquo;miter&amp;rsquo; &amp;lsquo;round&amp;rsquo; &amp;lsquo;bevel&amp;rsquo;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;visible&lt;/td&gt;
&lt;td&gt;[&lt;code&gt;True&lt;/code&gt; &lt;code&gt;False&lt;/code&gt;]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;zorder&lt;/td&gt;
&lt;td&gt;any number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;mathtext:12e5e4622920f32cd819b8409703bfed&#34;&gt;Mathtext&lt;/h2&gt;

&lt;p&gt;Oftentimes, you just simply need that superscript or some other math text in your labels. Matplotlib provides a very easy way to do this for those familiar with LaTeX. Any text that is surrounded by dollar signs will be treated as &amp;ldquo;&lt;a href=&#34;http://matplotlib.org/users/mathtext.html#mathtext-tutorial&#34;&gt;&lt;code&gt;mathtext&lt;/code&gt;&lt;/a&gt;&amp;rdquo;. Do note that because backslashes are prevelent in LaTeX, it is often a good idea to prepend an &lt;code&gt;r&lt;/code&gt; to your string literal so that Python will not treat the backslashes as escape characters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.scatter([1, 2, 3, 4], [4, 3, 2, 1])
plt.title(r&#39;$\sigma_i=15$&#39;, fontsize=20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_58_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;annotations-and-arrows:12e5e4622920f32cd819b8409703bfed&#34;&gt;Annotations and Arrows&lt;/h2&gt;

&lt;p&gt;There are two ways one can place arbitrary text anywhere they want on a plot. The first is a simple &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.text&#34;&gt;&lt;code&gt;text()&lt;/code&gt;&lt;/a&gt;.  Then there is the fancier &lt;a href=&#34;http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate&#34;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; function that can help &amp;ldquo;point out&amp;rdquo; what you want to annotate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
plt.plot(t, s, lw=2)

plt.annotate(&#39;local max&#39;, xy=(2, 1), xytext=(3, 1.5),
             arrowprops=dict(facecolor=&#39;black&#39;, shrink=0.05))

plt.ylim(-2, 2)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_60_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are all sorts of boxes for your text, and arrows you can use, and there are many different ways to connect the text to the point that you want to annotate. For a complete tutorial on this topic, go to the &lt;a href=&#34;http://matplotlib.org/users/annotations_guide.html&#34;&gt;&lt;code&gt;Annotation Guide&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hatches:12e5e4622920f32cd819b8409703bfed&#34;&gt;Hatches&lt;/h2&gt;

&lt;p&gt;A Patch object can have a hatching defined for it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/   - diagonal hatching&lt;/li&gt;
&lt;li&gt;\   - back diagonal&lt;/li&gt;
&lt;li&gt;|   - vertical&lt;/li&gt;
&lt;li&gt;-   - horizontal&lt;/li&gt;
&lt;li&gt;+   - crossed&lt;/li&gt;
&lt;li&gt;x   - crossed diagonal&lt;/li&gt;
&lt;li&gt;o   - small circle&lt;/li&gt;
&lt;li&gt;O   - large circle (upper-case &amp;lsquo;o&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;.   - dots&lt;/li&gt;
&lt;li&gt;*   - stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Letters can be combined, in which case all the specified
hatchings are done.  If same letter repeats, it increases the
density of hatching of that pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bars = plt.bar([1, 2, 3, 4], [10, 12, 15, 17])
plt.setp(bars[0], hatch=&#39;x&#39;, facecolor=&#39;w&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_63_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;now-that-we-know-some-basics-on-matplotlib-lets-play-with-an-example:12e5e4622920f32cd819b8409703bfed&#34;&gt;Now that we know some basics on Matplotlib, lets play with an example.&lt;/h2&gt;

&lt;h2 id=&#34;sine-cosine-plot:12e5e4622920f32cd819b8409703bfed&#34;&gt;Sine Cosine Plot&lt;/h2&gt;

&lt;p&gt;In this section we will calculate cosine and sine values for a range of values and draw them on the same plot.
Fire up your ipython terminal with command line argument &lt;code&gt;--pylab&lt;/code&gt;
pylab is a magic function for ipython which will basically make following calls behind the scenes for us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy
import matplotlib
from matplotlib import pylab, mlab, pyplot
np = numpy
plt = pyplot

from IPython.display import display
from IPython.core.pylabtools import figsize, getfigs

from pylab import *
from numpy import *
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import pylab as pl
import numpy as np
# If you are using Ipython, you do not have to type this. If you are using Ipython notebook or Jupyter,
# this next line will help generate plots inside the browser window instead of in a separate &amp;quot;pop up&amp;quot;
%matplotlib inline


n = np.linspace(-np.pi, np.pi, 256, endpoint=True)
co, si = np.cos(n), np.sin(n)


pl.plot(n, co)
pl.plot(n, si)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_68_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now lets look at the default settings and try changing some parameters that will influence the appearance of the plot.&lt;/p&gt;

&lt;h3 id=&#34;controlling-line-properties:12e5e4622920f32cd819b8409703bfed&#34;&gt;Controlling line properties&lt;/h3&gt;

&lt;p&gt;Lines have many attributes that you can set: &lt;code&gt;linewidth&lt;/code&gt;, &lt;code&gt;dash style&lt;/code&gt;, &lt;code&gt;antialiased&lt;/code&gt;, etc; see &lt;a href=&#34;http://matplotlib.org/api/lines_api.html#matplotlib.lines.Line2D&#34; title=&#34;MPL 2D Lines&#34;&gt;&lt;code&gt;matplotlib.lines.Line2D&lt;/code&gt;&lt;/a&gt;. There are several ways to set line properties. We will use keyword args:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pl.plot(n, co, color=&#39;red&#39;, linewidth=2.0, linestyle=&#39;-&#39;, marker=&#39;+&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pl.plot(n, si, color=&#39;#9A69FC&#39;, linestyle=&#39;:&#39;, marker=&#39;,&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can use color names to set the color of the line or you can use the hex code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.plot(n, co, color=&#39;red&#39;, linewidth=2.0, linestyle=&#39;-&#39;)
pl.plot(n, si, color=&#39;#9A69FC&#39;, linewidth=2.0, linestyle=&#39;--&#39;)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_71_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are many more line properties that you can change. Check &lt;a href=&#34;http://matplotlib.org/users/pyplot_tutorial.html#controlling-line-properties&#34; title=&#34;Controlling Line Properties&#34;&gt;&lt;code&gt;complete list of properties&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;setting-limits:12e5e4622920f32cd819b8409703bfed&#34;&gt;Setting Limits&lt;/h3&gt;

&lt;p&gt;Current limits of the figure are a bit too tight and the amplitude part is getting clipped. Now lets make some space in order to clearly see all data points.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.xlim(n.min() * 1.1, n.max() * 1.1)  # set the xlim between n.min()*1.1 and n.max()*1.1
pl.ylim(co.min() * 1.1, co.max() * 1.1)
pl.plot(n, co, color=&#39;red&#39;, linewidth=1.0, linestyle=&#39;-&#39;, label=&#39;Cosine Function&#39;)
pl.plot(n, si, color=&#39;#9A69FC&#39;, linewidth=1.0, linestyle=&#39;--&#39;, label=&#39;Sine Function&#39;)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_74_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Setting limits turns autoscaling off for the x-axis.&lt;/p&gt;

&lt;p&gt;If you do not specify args, you can pass the xmin and xmax as kwargs, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pl.xlim(xmax=n.max()*1.1)&lt;/code&gt; # adjust the max leaving min unchanged&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pl.xlim(xmin=n.min()*1.1)&lt;/code&gt; # adjust the min leaving max unchanged&lt;/p&gt;

&lt;h3 id=&#34;setting-ticks:12e5e4622920f32cd819b8409703bfed&#34;&gt;Setting Ticks&lt;/h3&gt;

&lt;p&gt;Current ticks are not ideal because they do not show the interesting values (+/-π,+/-π/2) for sine and cosine. Let&amp;rsquo;s change them such that they show only these values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.plot(n, co, color=&#39;red&#39;, linewidth=1.0, linestyle=&#39;-&#39;, label=&#39;Cosine Fn&#39;)
pl.plot(n, si, color=&#39;#9A69FC&#39;, linewidth=1.0, linestyle=&#39;--&#39;, label=&#39;Sine Fn&#39;)
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi], rotation=30)  # set the location and orientation of the xticks
pl.yticks([-1, 0, +1])  # set the locations of the yticks
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_77_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The keyword args, if any, are &lt;a href=&#34;http://matplotlib.org/api/text_api.html#matplotlib.text.Text&#34; title=&#34;Text Properties&#34;&gt;Text&lt;/a&gt; properties.&lt;/p&gt;

&lt;p&gt;For example, if the xticks are some long values, you can rotate them so that they do not overlap.&lt;/p&gt;

&lt;h3 id=&#34;adding-a-legend:12e5e4622920f32cd819b8409703bfed&#34;&gt;Adding a Legend&lt;/h3&gt;

&lt;p&gt;Let’s add a legend in the upper left corner. This only requires adding the keyword argument label (that will be used in the legend box) to the plot commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.plot(n, co, color=&amp;quot;red&amp;quot;, linewidth=1, linestyle=&amp;quot;-&amp;quot;, label=&amp;quot;cosine Fn&amp;quot;)
pl.plot(n, si, color=&amp;quot;#9A69FC&amp;quot;,  linewidth=1, linestyle=&amp;quot;--&amp;quot;, label=&amp;quot;sine Fn&amp;quot;)
pl.xlim(n.min() * 1.1, n.max() * 1.1)  # Setting xlim
pl.ylim(co.min() * 1.1, co.max() * 1.1) # Setting ylim
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi], rotation=30)  # Setting xticks
pl.yticks([-1, 0, +1])  # set the locations of the yticks  # Setting yticks

pl.legend(loc=&#39;upper left&#39;)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_80_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;moving-spines:12e5e4622920f32cd819b8409703bfed&#34;&gt;Moving Spines&lt;/h3&gt;

&lt;p&gt;Spines are the lines connecting the axis tick marks and noting the boundaries of the data area. They can be placed at arbitrary positions and until now, they were on the border of the axis. We&amp;rsquo;ll change that since we want to have them in the middle. Since there are four of them (top/bottom/left/right), we&amp;rsquo;ll discard the top and right by setting their color to none and we&amp;rsquo;ll move the bottom and left ones to coordinate 0 in data space coordinates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.xlim(n.min() * 1.1, n.max() * 1.1)  # Setting xlim
pl.ylim(co.min() * 1.1, co.max() * 1.1) # Setting ylim
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi], rotation=30)  # Setting xticks
pl.yticks([-1, 0, +1])  # set the locations of the yticks  # Setting yticks

pl.plot(n, co, color=&amp;quot;red&amp;quot;, linewidth=1, linestyle=&amp;quot;-&amp;quot;, label=&amp;quot;cosine Fn&amp;quot;)
pl.plot(n, si, color=&amp;quot;#9A69FC&amp;quot;,  linewidth=1, linestyle=&amp;quot;--&amp;quot;, label=&amp;quot;sine Fn&amp;quot;)

ax = pl.gca()  # gca stands for &#39;get current axis&#39;
ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)  # hide 
ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)
ax.xaxis.set_ticks_position(&#39;bottom&#39;)
ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))
ax.yaxis.set_ticks_position(&#39;left&#39;)
ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))

pl.legend(loc=&#39;upper left&#39;)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_82_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;setting-tick-labels:12e5e4622920f32cd819b8409703bfed&#34;&gt;Setting tick labels&lt;/h3&gt;

&lt;p&gt;Ok, so far so good. Now we look at this plot and the values on the x-axis does not appeal us. We could guess that 3.142 means $\pi$ but we are used to seeing x axis ranging from $-\pi$ and $\pi$ on such plots.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that we’ll use $\LaTeX$ to allow for nice rendering of the label.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;pl.xlim(n.min() * 1.1, n.max() * 1.1)  # Setting xlim
pl.ylim(co.min() * 1.1, co.max() * 1.1) # Setting ylim

# when we set tick values, we can also provide 
# a corresponding label in the second argument list.
# So the tick values will be replaced by the latex labels.
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
          [r&#39;$-\pi$&#39;, r&#39;$-\pi/2$&#39;, r&#39;$0$&#39;, r&#39;$+\pi/2$&#39;, r&#39;$+\pi$&#39;])

# We don&#39;t like 0 being printed for both x and y axis.
# insted we will just keep x&#39;s 0
pl.yticks([-1, 0, +1],
          [r&#39;$-1$&#39;, &#39;&#39;, r&#39;$+1$&#39;])

pl.plot(n, co, color=&amp;quot;red&amp;quot;, linewidth=1, linestyle=&amp;quot;-&amp;quot;, label=&amp;quot;cosine Fn&amp;quot;)
pl.plot(n, si, color=&amp;quot;#9A69FC&amp;quot;,  linewidth=1, linestyle=&amp;quot;--&amp;quot;, label=&amp;quot;sine Fn&amp;quot;)

ax = pl.gca()  # gca stands for &#39;get current axis&#39;
ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)          # hide right spine
ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)            # hide top spine
ax.xaxis.set_ticks_position(&#39;bottom&#39;)         # set ticks position to bottom spine
ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))  # set bottom spine at position 0
ax.yaxis.set_ticks_position(&#39;left&#39;)
ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))    # set left spine at position 0

pl.legend(loc=&#39;upper left&#39;)
pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_84_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;annotate:12e5e4622920f32cd819b8409703bfed&#34;&gt;Annotate&lt;/h3&gt;

&lt;p&gt;Let’s annotate some interesting points using the annotate command. We chose the 2π/3 value and we want to annotate both the sine and the cosine. We’ll first draw a marker on the curve as well as a straight dotted line. Then, we’ll use the annotate command to display some text with an arrow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.xlim(n.min() * 1.1, n.max() * 1.1)  # Setting xlim
pl.ylim(co.min() * 1.1, co.max() * 1.1) # Setting ylim

# when we set tick values, we can also provide 
# a corresponding label in the second argument list.
# So the tick values will be replaced by the latex labels.
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
          [r&#39;$-\pi$&#39;, r&#39;$-\pi/2$&#39;, r&#39;$0$&#39;, r&#39;$+\pi/2$&#39;, r&#39;$+\pi$&#39;])

# We don&#39;t like 0 being printed for both x and y axis.
# insted we will just keep x&#39;s 0
pl.yticks([-1, 0, +1],
          [r&#39;$-1$&#39;, &#39;&#39;, r&#39;$+1$&#39;])

pl.plot(n, co, color=&amp;quot;red&amp;quot;, linewidth=1, linestyle=&amp;quot;-&amp;quot;, label=&amp;quot;cosine Fn&amp;quot;)
pl.plot(n, si, color=&amp;quot;#9A69FC&amp;quot;,  linewidth=1, linestyle=&amp;quot;--&amp;quot;, label=&amp;quot;sine Fn&amp;quot;)


# Plot the line where value of cos is 2pi/3
t = 2 * np.pi / 3
pl.plot([t, t], [0, np.cos(t)], color=&#39;red&#39;, linewidth=2.5, linestyle=&amp;quot;--&amp;quot;)
pl.scatter([t, ], [np.cos(t), ], 50, color=&#39;red&#39;)

# Annotate using LaTeX fonts.
pl.annotate(r&#39;$sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$&#39;,
            xy=(t, np.sin(t)), xycoords=&#39;data&#39;,
            xytext=(+10, +30), textcoords=&#39;offset points&#39;, fontsize=16,
            arrowprops=dict(arrowstyle=&amp;quot;-&amp;gt;&amp;quot;, connectionstyle=&amp;quot;arc3,rad=.2&amp;quot;))

# Plot the line where value of sin is 2pi/3
pl.plot([t, t],[0, np.sin(t)], color=&#39;#9A69FC&#39;, linewidth=2.5, linestyle=&amp;quot;--&amp;quot;)
pl.scatter([t, ],[np.sin(t), ], 50, color=&#39;#9A69FC&#39;)

pl.annotate(r&#39;$cos(\frac{2\pi}{3})=-\frac{1}{2}$&#39;,
            xy=(t, np.cos(t)), xycoords=&#39;data&#39;,
            xytext=(-90, -50), textcoords=&#39;offset points&#39;, fontsize=16,
            arrowprops=dict(arrowstyle=&amp;quot;-&amp;gt;&amp;quot;, connectionstyle=&amp;quot;arc3,rad=.2&amp;quot;))

ax = pl.gca()  # gca stands for &#39;get current axis&#39;
ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)          # hide right spine
ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)            # hide top spine
ax.xaxis.set_ticks_position(&#39;bottom&#39;)         # set ticks position to bottom spine
ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))  # set bottom spine at position 0
ax.yaxis.set_ticks_position(&#39;left&#39;)
ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))    # set left spine at position 0

pl.legend(loc=&#39;upper left&#39;)

pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_86_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bbox:12e5e4622920f32cd819b8409703bfed&#34;&gt;Bbox&lt;/h3&gt;

&lt;p&gt;Everything looks almost perfect.. except for one small thing. The tick labels are hardly visible.&lt;/p&gt;

&lt;p&gt;We can make them bigger and we can also adjust their properties such that they’ll be rendered on a semi-transparent white background. This will allow us to see both the data and the labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pl.xlim(n.min() * 1.1, n.max() * 1.1)  # Setting xlim
pl.ylim(co.min() * 1.1, co.max() * 1.1) # Setting ylim

# when we set tick values, we can also provide 
# a corresponding label in the second argument list.
# So the tick values will be replaced by the latex labels.
pl.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
          [r&#39;$-\pi$&#39;, r&#39;$-\pi/2$&#39;, r&#39;$0$&#39;, r&#39;$+\pi/2$&#39;, r&#39;$+\pi$&#39;])

# We don&#39;t like 0 being printed for both x and y axis.
# insted we will just keep x&#39;s 0
pl.yticks([-1, 0, +1],
          [r&#39;$-1$&#39;, &#39;&#39;, r&#39;$+1$&#39;])

pl.plot(n, co, color=&amp;quot;red&amp;quot;, linewidth=1, linestyle=&amp;quot;-&amp;quot;, label=&amp;quot;cosine Fn&amp;quot;)
pl.plot(n, si, color=&amp;quot;#9A69FC&amp;quot;,  linewidth=1, linestyle=&amp;quot;--&amp;quot;, label=&amp;quot;sine Fn&amp;quot;)


# Plot the line where value of cos is 2pi/3
t = 2 * np.pi / 3
pl.plot([t, t], [0, np.cos(t)], color=&#39;red&#39;, linewidth=2.5, linestyle=&amp;quot;--&amp;quot;)
pl.scatter([t, ], [np.cos(t), ], 50, color=&#39;red&#39;)

pl.annotate(r&#39;$sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$&#39;,
            xy=(t, np.sin(t)), xycoords=&#39;data&#39;,
            xytext=(+10, +30), textcoords=&#39;offset points&#39;, fontsize=16,
            arrowprops=dict(arrowstyle=&amp;quot;-&amp;gt;&amp;quot;, connectionstyle=&amp;quot;arc3,rad=.2&amp;quot;))

# Plot the line where value of sin is 2pi/3
pl.plot([t, t],[0, np.sin(t)], color=&#39;#9A69FC&#39;, linewidth=2.5, linestyle=&amp;quot;--&amp;quot;)
pl.scatter([t, ],[np.sin(t), ], 50, color=&#39;#9A69FC&#39;)

pl.annotate(r&#39;$cos(\frac{2\pi}{3})=-\frac{1}{2}$&#39;,
            xy=(t, np.cos(t)), xycoords=&#39;data&#39;,
            xytext=(-90, -50), textcoords=&#39;offset points&#39;, fontsize=16,
            arrowprops=dict(arrowstyle=&amp;quot;-&amp;gt;&amp;quot;, connectionstyle=&amp;quot;arc3,rad=.2&amp;quot;))

ax = pl.gca()  # gca stands for &#39;get current axis&#39;
ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)          # hide right spine
ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)            # hide top spine
ax.xaxis.set_ticks_position(&#39;bottom&#39;)         # set ticks position to bottom spine
ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))  # set bottom spine at position 0
ax.yaxis.set_ticks_position(&#39;left&#39;)
ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))    # set left spine at position 0

pl.legend(loc=&#39;upper left&#39;)

# Increase font size for x and y tick labels and set the facecolor as 
# same color as our background
for label in ax.get_xticklabels() + ax.get_yticklabels():
    label.set_fontsize(16)
    label.set_bbox(dict(facecolor=&#39;white&#39;, edgecolor=&#39;None&#39;, alpha=0.65))

pl.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_88_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Numpy</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Numpy/</link>
      <pubDate>Mon, 06 Jul 2015 21:10:08 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Numpy/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Numpy&lt;/h1&gt;

&lt;p&gt;NumPy (Numerical Python) is an opensource library for scientific computing in python. Numpy let&amp;rsquo;s you work with arrays and matrices in a natural way unlike lists where you have to loop through individual elements to perform any numerical operation.The methods in numpy are designed with high performance in mind. Numpy arrays are stored more efficiently than an equivalent data structure in python such as lists and arrays. This especially pays off when you are using really large arrays (large data sets). Major portion of numpy is written in C and thus the computations are faster than the pure python code. Numpy actually used to be a part of major scientific package called SciPy but eventually numpy was separated and now scipy uses numpy for its major tasks.
So Let&amp;rsquo;s jump into NumPy!&lt;/p&gt;

&lt;p&gt;##Basics&lt;/p&gt;

&lt;p&gt;Numpy&amp;rsquo;s main object is the homogeneous multidimensional array. Numpy&amp;rsquo;s array class is called ndarray. It is a table of numbers, indexed by a tuple of positive integers. In numpy dimensions are called as axes. The number of axes is known as rank. Arrays in numpy are similar to lists in Python except that numpy has an added requirement that all the elements must be numbers (obviously, its NumPy!). Lets look at how to create numpy arrays:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np
a = np.array([1, 2, 3, 4], float)  # Single dimensional Array
print &#39;Type: &#39;,type(a)
print &#39;Shape: &#39;,a.shape
print &#39;Dimension: &#39;,a.ndim
print &#39;Itemsize: &#39;,a.itemsize
print &#39;Size: &#39;,a.size

Type:  &amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
Shape:  (4,)
Dimension:  1
Itemsize:  8
Size:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method array, takes two arguments: the list to be converted into the array and the datatype of &lt;strong&gt;every&lt;/strong&gt; member of the list. There are many attributes of ndarray and by now you should be able to understand how to access those attributes and get help for them. In the above example, I have mentioned a few more important ones. Let&amp;rsquo;s understand what they mean.&lt;/p&gt;

&lt;p&gt;###ndarray.ndim&lt;/p&gt;

&lt;p&gt;It is the number of axes or dimensions of the array.&lt;/p&gt;

&lt;p&gt;###ndarray.shape&lt;/p&gt;

&lt;p&gt;It is the dimension of the array. This is a tuple of integers indicating the size of the array in each dimension. For matrix with n rows and m columns, the shape will be (m, n). The length of the shape tuple is therefore the rank, or number of dimensions, ndim&lt;/p&gt;

&lt;p&gt;###ndarray.dtype&lt;/p&gt;

&lt;p&gt;It is an object describing the type of the elements in the array. Remember that all the elements need to be of same datatype in a numpy array. Additionally numpy provides its own numpy.int16, numpy.int32, numpy.float64 and so on.&lt;/p&gt;

&lt;p&gt;###ndarray.itemsize&lt;/p&gt;

&lt;p&gt;The size in bytes of each element of the array. For example an array of elements of type float64 (above example) has itemsize of 64 / 8 = 64. While one complex32 has item size of 4 32 / 8.&lt;/p&gt;

&lt;p&gt;###ndarray.data&lt;/p&gt;

&lt;p&gt;This is the buffer containing the actual elements of the array. Normally this attribute is not used as numpy offers many fancy indexing facilities.&lt;/p&gt;

&lt;p&gt;##Numpy Datatypes&lt;/p&gt;

&lt;p&gt;Numpy supports a much greater variety of numerical types than Python does.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Data type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;bool_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Boolean (True or False) stored as a byte&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Default integer type (same as C long; normally either int64 or int32)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;intc&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Identical to C int (normally int32 or int64)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;intp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer used for indexing (same as C ssize_t; normally either int32 or int64)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Byte (-128 to 127)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-32768 to 32767)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-2147483648 to 2147483647)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-9223372036854775808 to 9223372036854775807)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 255)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 65535)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 4294967295)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 18446744073709551615)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Shorthand for float64.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Half precision float: sign bit, 5 bits exponent, 10 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Single precision float: sign bit, 8 bits exponent, 23 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Double precision float: sign bit, 11 bits exponent, 52 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Shorthand for complex128.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Complex number, represented by two 32-bit floats (real and imaginary components)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Complex number, represented by two 64-bit floats (real and imaginary components)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Try using these dataypes in your codes and see the difference&lt;/p&gt;

&lt;p&gt;##Array Creation&lt;/p&gt;

&lt;p&gt;There are many ways in which an array can be created, we just saw one in our example above. Let&amp;rsquo;s look at some other ways of creating arrays.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(5, dtype=float)
print &#39;\n arange() with float dtype: \n&#39;,a
b = np.arange(1, 6, 2, dtype=int)
print &#39;\n arange() with int dtype: \n&#39;,b  # \n will print new line
c = np.ones((2, 3), dtype=float)
print &#39;\n ones(): \n&#39;,c
d = np.zeros((2,3), dtype=float)
print &#39;\n zeros(): \n&#39;,d
e = np.empty((2, 4))
print &#39;\n Empty: \n&#39;,e  # Your output might be different..
f = np.ones_like(a)
print &#39;\n Ones_like(): \n&#39;,f
g = np.diag(a)
print &#39;\n Diagonal array: \n&#39;,g


 arange() with float dtype: 
[ 0.  1.  2.  3.  4.]

 arange() with int dtype: 
[1 3 5]

 ones(): 
[[ 1.  1.  1.]
 [ 1.  1.  1.]]

 zeros(): 
[[ 0.  0.  0.]
 [ 0.  0.  0.]]

 Empty: 
[[ -3.10503618e+231   1.73059848e-077   2.24228410e-314   6.93536013e-310]
 [  6.93536013e-310   2.92966904e-033   7.42620323e-091   7.26604178e-043]]

 Ones_like(): 
[ 1.  1.  1.  1.  1.]

 Diagonal array: 
[[ 0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.]
 [ 0.  0.  2.  0.  0.]
 [ 0.  0.  0.  3.  0.]
 [ 0.  0.  0.  0.  4.]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###np.arange()&lt;/p&gt;

&lt;p&gt;is the same as the range function that we used previously.&lt;/p&gt;

&lt;p&gt;###np.zeros() and np.ones()&lt;/p&gt;

&lt;p&gt;as the name suggests, generate new arrays of specified dimensions filled with these values. These are most commonly used functions to create new arrays.&lt;/p&gt;

&lt;p&gt;###np.empty()&lt;/p&gt;

&lt;p&gt;This function creates an array whose initial content is random and depends on the state of the memory. If not specified, the data type of the created array is float64&lt;/p&gt;

&lt;p&gt;###np.ones_like()  , np.zeros_like() and np.empty_like()&lt;/p&gt;

&lt;p&gt;These functions create a new array with the same dimensions and type as the existing one but with the values as either ones or zeros or random value.&lt;/p&gt;

&lt;p&gt;###np.diag()&lt;/p&gt;

&lt;p&gt;As the name suggests, this will construct a diagonal array&lt;/p&gt;

&lt;p&gt;##Printing Arrays&lt;/p&gt;

&lt;p&gt;As you must have observed from the above examples, Numpy displays the arrays in a similar way to nested lists but with the following layout:&lt;/p&gt;

&lt;p&gt;the last axis is printed from left to right
the second to last axis is printed from top to bottom.
the rest rest are also printed from top to bottom with each slice separated from the next by an empty line
Simply put, single dimensional array are printed as rows, bi dimensional and multi-dimensional are printed as matrices and as lists of matrices respectively. The examples will make it more clear.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &#39;\nSingle Dimensional: \n&#39;,np.arange(4)
print &#39;\nTwo Dimensional: \n&#39;,np.arange(6).reshape(2,3) # We will talk about reshape soon..!
print &#39;\nThree Dimensional: \n&#39;,np.arange(12).reshape(2,3,2)


Single Dimensional: 
[0 1 2 3]

Two Dimensional: 
[[0 1 2]
 [3 4 5]]

Three Dimensional: 
[[[ 0  1]
  [ 2  3]
  [ 4  5]]

 [[ 6  7]
  [ 8  9]
  [10 11]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Selecting elements from an array is a trivial process. Just like lists, we can obtain the elements of the array by using their index value. Give it a shot! We will talk in detail about indexing later.&lt;/p&gt;

&lt;p&gt;##Array Mathematics&lt;/p&gt;

&lt;p&gt;When standard mathematical operations are used with numpy arrays, they are applied on an element-by-element basis and a new array is created and filled with the result. This means that the arrays should be of same size when any mathematical operation is performed on them. Lets take a look at some examples:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.array([1, 2, 3, 4])
b = np.linspace(4, 16, num=4)

print &#39;\nb - a: \n&#39;, b-a
b = np.linspace(4, 16, num=3)

print &#39;\nb - a: \n&#39;, b-a


b - a: 
[  3.   6.   9.  12.]

b - a: 



---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-4-ec209d90aeb7&amp;gt; in &amp;lt;module&amp;gt;()
      5 b = np.linspace(4, 16, num=3)
      6 
----&amp;gt; 7 print &#39;\nb - a: \n&#39;, b-a


ValueError: operands could not be broadcast together with shapes (3,) (4,) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets now see these operations on multi-dimensional arrays&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(4).reshape(2,2)
print &#39;\na: \n&#39;,a
b = np.ones_like(a) * 2
print &#39;\nb: \n&#39;,b
print &#39;\na * b: \n&#39;,a * b  # This will perform element-wise multiplication
print &#39;\nDot Product: \n&#39;,np.dot(a, b)


a: 
[[0 1]
 [2 3]]

b: 
[[2 2]
 [2 2]]

a * b: 
[[0 2]
 [4 6]]

Dot Product: 
[[ 2  2]
 [10 10]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above operations have been performed on the two arrays with same datatype and so the result will have the same datatype as the operand arrays. However when you perform any operation on arrays with different datatypes, the type of the resulting array will correspond to the more general or precise one. This is also known as upcasting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.ones(5, dtype=&#39;int16&#39;)
b = np.linspace(3, 9, num=5)
print &#39;\nDtype of a: \n&#39;, a.dtype
print &#39;\nDtype of b: \n&#39;, b.dtype
c = a + b
print &#39;\nC: \n&#39;,c
print &#39;\nDtype of c: \n&#39;,c.dtype


Dtype of a: 
int16

Dtype of b: 
float64

C: 
[  4.    5.5   7.    8.5  10. ]

Dtype of c: 
float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many Unary operations, such as computing sum of the elements in the array or finding the element in the array that has the maximum value are implemented as methods of ndarray class.&lt;/p&gt;

&lt;p&gt;By default, these operations apply to the array as though it was a list of numbers, regardless of its shape. However by specifying the axis parameter you can apply an operation along the specified axis of an array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.random.random((4, 4))
print &#39;\na: \n&#39;,a
print &#39;\nSum: \n&#39;,np.sum(a)
print &#39;\nMinimum: \n&#39;,np.min(a)
print &#39;\nMaximum: \n&#39;,np.max(a)
print &#39;\nMinimum at axis=0: &#39;,a.min(axis=0)
print &#39;\nCumulative sum along each row: \n&#39;,a.cumsum(axis=1)


a: 
[[ 0.03393196  0.60967045  0.48575961  0.80389461]
 [ 0.45666937  0.1340573   0.77085133  0.1260247 ]
 [ 0.6278121   0.59825426  0.78261101  0.61532053]
 [ 0.3189249   0.01292406  0.2571509   0.79722091]]

Sum: 
7.43107798457

Minimum: 
0.0129240585016

Maximum: 
0.803894606649

Minimum at axis=0:  [ 0.03393196  0.01292406  0.2571509   0.1260247 ]

Cumulative sum along each row: 
[[ 0.03393196  0.64360241  1.12936202  1.93325662]
 [ 0.45666937  0.59072667  1.361578    1.4876027 ]
 [ 0.6278121   1.22606636  2.00867737  2.6239979 ]
 [ 0.3189249   0.33184896  0.58899986  1.38622077]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;universal-functions:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Universal Functions&lt;/h2&gt;

&lt;p&gt;Numpy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called as ufunc (for universal functions).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(0, 1, num=4)
print &#39;\nSin values: \n&#39;,np.sin(a)
print &#39;\nSquare Root of values: \n&#39;,np.sqrt(a)


Sin values: 
[ 0.          0.3271947   0.6183698   0.84147098]

Square Root of values: 
[ 0.          0.57735027  0.81649658  1.        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Slicing
Slicing extracts the portion of a sequence by specifying a lower and upper bound. The lower bound element is included, but the upper-bound element is not included in slicing. Just like lists, there is a third parameter step which means the strides to be taken between the elements. Let&amp;rsquo;s take a look at an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(5, 40, num=5)
print &#39;\nElements at index 0, 1, 2:\n&#39;,a[:3]
# Just like lists, even negative indexing works:
print &#39;\nElements at index 0, 2, 4:\n&#39;,a[-5:5:2]


Elements at index 0, 1, 2:
[  5.    13.75  22.5 ]

Elements at index 0, 2, 4:
[  5.   22.5  40. ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For multidimensional array, you specify in rows, columns format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(5, 40, num=8).reshape(2,4)
print &#39;\nfirst row and second column: \n&#39;,a[1,2]
print &#39;\n All elements from second column: \n&#39;,a[:,2]


first row and second column: 
35.0

 All elements from second column: 
[ 15.  35.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slices are references to memory in the original array. Changing the values in a slice also changes the original array&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(5)
b = a[3:5]  # last two elements of a
print &#39;\nBefore changing b[0], b[0]: \n&#39;,b[0]
b[0] = 99  # Indirectly changing second last element of a too!
print &#39;\nAfter changing b[0], a: \n&#39;,a


Before changing b[0], b[0]: 
3

After changing b[0], a: 
[ 0  1  2 99  4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fancy-indexing:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Fancy Indexing&lt;/h2&gt;

&lt;p&gt;Numpy offers more indexing facilities than regular Python sequences. In addition to indexing by integers and slices, as we saw before, arrays can be indexed by arrays of integers and arrays of booleans&lt;/p&gt;

&lt;p&gt;###Indexing with Arrays of Indices&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ind = None
ind1 = None
a = np.arange(12)**2
print &#39;\nArray a: \n&#39;,a
# Taking array of indices:
ind = np.random.random_integers(2, 10, size=(10,))
print &#39;\nIndices: \n&#39;,ind
print &#39;\nArray of elements at pos ind: \n&#39;,a[ind]
ind1 = np.random.random_integers(2, 8, size=(3,4))
print &#39;\nIndices1: \n&#39;,ind1
print &#39;\nArray of elements at pos ind1: \n&#39;,a[ind1]


Array a: 
[  0   1   4   9  16  25  36  49  64  81 100 121]

Indices: 
[10  9  9  7  6  3  4 10  4  9]

Array of elements at pos ind: 
[100  81  81  49  36   9  16 100  16  81]

Indices1: 
[[7 4 4 8]
 [2 6 8 7]
 [3 7 3 2]]

Array of elements at pos ind1: 
[[49 16 16 64]
 [ 4 36 64 49]
 [ 9 49  9  4]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the indexed array is multidimensional, a single array of indices refers to the first dimension of a. Though we can provide indexes for more than one dimension, the indices for each dimension must have the same shape. The following example will make it much clear.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(20).reshape(4,5)
print &#39;\nArray: \n&#39;,a
ind1 = np.arange(4).reshape(2,2)
print &#39;\nIndex1: \n&#39;,ind1
ind2 = np.random.random_integers(1, 5, size=(2,2))
print &#39;\nIndex2: \n&#39;,ind2
# Remember ind1 and ind2 should be of same shape
print &#39;\na[ind1, ind2]: \n&#39;,a[ind1, ind2]
print &#39;\na[:,ind2]: \n&#39;,a[:,ind2]


Array: 
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]

Index1: 
[[0 1]
 [2 3]]

Index2: 
[[3 3]
 [1 1]]

a[ind1, ind2]: 
[[ 3  8]
 [11 16]]

a[:,ind2]: 
[[[ 3  3]
  [ 1  1]]

 [[ 8  8]
  [ 6  6]]

 [[13 13]
  [11 11]]

 [[18 18]
  [16 16]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indexing with arrays is also used in search for the maximum value of time-dependent series. Lets take a look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = np.linspace(10, 150, 7) # create fake timescale
data = np.sin(np.arange(25)).reshape(5,5) # Generate fake data
ind = data.argmax(axis=0)
max_t = t[ind]
max_data = data[ind, xrange(data.shape[1])]
print &#39;\nMaximum Time: \n&#39;,max_t
print &#39;\nData at that maximum time: \n&#39;,data.max(axis=0)


Maximum Time: 
[ 103.33333333   10.           10.           33.33333333   56.66666667]

Data at that maximum time: 
[ 0.91294525  0.84147098  0.90929743  0.98935825  0.99060736]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use indexing with arrays as a target to assign to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(10)
a[[1, 3, 5, 9]] = 0
print &#39;\na: \n&#39;,a


a: 
[0 0 2 0 4 0 6 7 8 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Indexing with Boolean Arrays
When we index arrays with arrays of indices, we aare providing a list of indices. With boolean indices, we explicitly chose the items in the array that we want and the one&amp;rsquo;s we dont. Lets take a look at a quick example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(16).reshape(2,2,4)
# Now lets select the indices whose value is greater than lets say 10
b = a &amp;gt; 10
print &#39;\nElements with values &amp;gt; 10: \n&#39;,a[b]


Elements with values &amp;gt; 10: 
[11 12 13 14 15]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These come in very handy when we are working with things like thresholding where we can assign all values greater than the threshold be 0 or set them to threshold value.&lt;/p&gt;

&lt;h2 id=&#34;tricks:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Tricks&lt;/h2&gt;

&lt;h3 id=&#34;automatic-reshaping:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Automatic Reshaping&lt;/h3&gt;

&lt;p&gt;To change the dimensions of an array, you can omit one of the sizes which will then be deduced automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(30)
a.shape = 2,-1,3  # -1 means &amp;quot;whatever is needed&amp;quot;
a.shape




(2, 5, 3)




a




array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11],
        [12, 13, 14]],

       [[15, 16, 17],
        [18, 19, 20],
        [21, 22, 23],
        [24, 25, 26],
        [27, 28, 29]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vector-stacking:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Vector Stacking&lt;/h3&gt;

&lt;p&gt;How do we construct a 2D array from a list of equally-sized row vectors? In MATLAB this is quite easy: if x and y are two vectors of the same length you only need do m=[x;y]. In NumPy this works via the functions column_stack, dstack, hstack and vstack, depending on the dimension in which the stacking is to be done. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = np.arange(0,10,2)  # x=([0,2,4,6,8])
y = np.arange(5)  # y=([0,1,2,3,4])
m = np.vstack([x,y])
xy = np.hstack([x,y])


m




array([[0, 2, 4, 6, 8],
       [0, 1, 2, 3, 4]])




xy




array([0, 2, 4, 6, 8, 0, 1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;i-would-also-encourage-you-to-check-out-some-numpy-examples-http-wiki-scipy-org-numpy-example-list-with-doc-numpy-examples:1508fc5289333d12aa95e9869f8fa520&#34;&gt;I would also encourage you to check out some &lt;em&gt;[&lt;code&gt;numpy examples&lt;/code&gt;](&amp;lsquo;&lt;a href=&#34;http://wiki.scipy.org/Numpy_Example_List_With_Doc&#39;&#34;&gt;http://wiki.scipy.org/Numpy_Example_List_With_Doc&#39;&lt;/a&gt; &amp;ldquo;Numpy Examples&amp;rdquo;)&lt;/em&gt;&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python_Dictionaries</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Dictionaries/</link>
      <pubDate>Mon, 06 Jul 2015 15:01:20 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Dictionaries/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Dictionaries&lt;/h1&gt;

&lt;p&gt;A dictionary is a container of key-value pairs. Just like lists, python dictionaries are mutable and can contain mixed types, however the key in the dictionary is immutable just like strings or numbers and are unique within a dictionary. Python dictionaries are also known as hash tables in other programming languages. Each key is separated from its value by a colon (:) and just like lists the items are separated by commas and thre whole thing is enclosed in curly braces.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student




{&#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;, &#39;Name&#39;: &#39;John&#39;}




type(student)




dict




states = {}  # Creating empty dictionary


states[&#39;AL&#39;] = &#39;Alabama&#39;  # Keys are inside square brackets and values on the right side of assignment


states[&#39;NY&#39;] = &#39;New York&#39;


states




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fromkeys:84dcac346e67782f4a3216af8d53f825&#34;&gt;fromkeys( )&lt;/h3&gt;

&lt;p&gt;The fromkeys() method creates a new dictionary from a list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_list = (&#39;AL&#39;, &#39;NY&#39;)
states_dict = {}.fromkeys(states_list, 0)  # Instead of 0 you can leave the field empty
states_dict[&#39;AL&#39;] = &#39;Alabama&#39;
states_dict[&#39;NY&#39;] = &#39;New York&#39;
states_dict




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accessing-dictionary-items:84dcac346e67782f4a3216af8d53f825&#34;&gt;Accessing Dictionary Items:&lt;/h2&gt;

&lt;p&gt;There are various ways of accessing elements of dictionary. Best way to understand them are through the examples.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student[&#39;Name&#39;]




&#39;John&#39;




student.get(&#39;Course&#39;, &#39;Not Found&#39;)  # If key is in Dictionary, it will return the value




&#39;Python&#39;




student.get(&#39;Location&#39;, &#39;Not Found&#39;)  # If key is not found, it will return second parameter of argument




&#39;Not Found&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Updating Dictionary:&lt;/h2&gt;

&lt;p&gt;The dictionary can be updated by adding a new entry or a new key-value pair, modifying existing entry and/ or deleting an entry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student[&#39;Degree&#39;] = &#39;Masters&#39;
student[&#39;Name&#39;] = &#39;Tom&#39;
student




{&#39;Class&#39;: &#39;Urban Skills&#39;,
 &#39;Course&#39;: &#39;Python&#39;,
 &#39;Degree&#39;: &#39;Masters&#39;,
 &#39;Name&#39;: &#39;Tom&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you must have observed, a new value to the dictionary can be added or modified simply by passing the key value pair to the dictionary.&lt;/p&gt;

&lt;h3 id=&#34;setdefault:84dcac346e67782f4a3216af8d53f825&#34;&gt;setdefault( )&lt;/h3&gt;

&lt;p&gt;In python, the value (of a key-value pair) is mutable. However at times you might not want to overwrite the existing key-value pair but if it does not exist, you might want to add it. To perform this, you can use the setdefault() method. setdefault method returns a value if a key is present. Otherwise it inserts a key with the specified value and returns the value
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student.setdefault(&#39;Degree&#39;, &#39;Masters&#39;)  # This will add the &#39;Degree:Masters&#39; key value pair to the dictionary since it doesn&#39;t exist





&#39;Masters&#39;




student.setdefault(&#39;Class&#39;,&#39;Urban Sensing&#39;)




&#39;Urban Skills&#39;




student




{&#39;Class&#39;: &#39;Urban Skills&#39;,
 &#39;Course&#39;: &#39;Python&#39;,
 &#39;Degree&#39;: &#39;Masters&#39;,
 &#39;Name&#39;: &#39;John&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update:84dcac346e67782f4a3216af8d53f825&#34;&gt;update( )&lt;/h3&gt;

&lt;p&gt;The update method adds (joins) the two dictionary together.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict2 = {&#39;NJ&#39;: &#39;New Jersey&#39;, &#39;CA&#39;: &#39;California&#39;}
states_dict.update(states_dict2)
states_dict




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-from-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Removing from Dictionary&lt;/h2&gt;

&lt;h3 id=&#34;pop:84dcac346e67782f4a3216af8d53f825&#34;&gt;pop( )&lt;/h3&gt;

&lt;p&gt;Pop() method removes the key-value pair based on the key passed as an argument. It returns the value that is being &amp;lsquo;popped&amp;rsquo; from the dictionary
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.pop(&#39;AL&#39;)




&#39;Alabama&#39;




states_dict




{&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;del:84dcac346e67782f4a3216af8d53f825&#34;&gt;del( )&lt;/h3&gt;

&lt;p&gt;del() method can be used to perform the above operation and also can be used to remove an entire dictionary. It does not return anything.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
del states_dict[&#39;AL&#39;]
states_dict




{&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}




del states_dict


states_dict  # Will raise an error because we deleted the object.


---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&amp;lt;ipython-input-20-0d583e464cf4&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 states_dict  # Will raise an error because we deleted the object.


NameError: name &#39;states_dict&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;clear:84dcac346e67782f4a3216af8d53f825&#34;&gt;clear( )&lt;/h3&gt;

&lt;p&gt;clear method clears all items from the dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.clear()
states_dict




{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;traversing-a-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Traversing a Dictionary&lt;/h2&gt;

&lt;h3 id=&#34;for-loop:84dcac346e67782f4a3216af8d53f825&#34;&gt;for loop:&lt;/h3&gt;

&lt;p&gt;A dictionary can be traversed by using for loops.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
for k in states_dict:
    print k, states_dict[k]

NY New York
CA California
NJ New Jersey
AL Alabama



for k, v in states_dict.items():  # We will see items() method in next sub- topic
    print &#39;: &#39;.join((k, v))

NY: New York
CA: California
NJ: New Jersey
AL: Alabama
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keys-values-and-items:84dcac346e67782f4a3216af8d53f825&#34;&gt;keys( ) , values( ) and items( )&lt;/h3&gt;

&lt;p&gt;The keys() method returns a list of keys in dictionary. The values() method returns a list of all the values and items() returns a list of all key-value tuples.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.keys()




[&#39;NY&#39;, &#39;CA&#39;, &#39;NJ&#39;, &#39;AL&#39;]




states_dict.values()




[&#39;New York&#39;, &#39;California&#39;, &#39;New Jersey&#39;, &#39;Alabama&#39;]




states_dict.items()




[(&#39;NY&#39;, &#39;New York&#39;),
 (&#39;CA&#39;, &#39;California&#39;),
 (&#39;NJ&#39;, &#39;New Jersey&#39;),
 (&#39;AL&#39;, &#39;Alabama&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting:84dcac346e67782f4a3216af8d53f825&#34;&gt;Sorting&lt;/h2&gt;

&lt;p&gt;Dictionaries in python can be sorted using keys or values. Just like keys the dictionaries can be sorted in ascending or descending order. First let us look as the built-in function sorted() and then the method specific to collections class.&lt;/p&gt;

&lt;h3 id=&#34;sorted:84dcac346e67782f4a3216af8d53f825&#34;&gt;sorted( )&lt;/h3&gt;

&lt;p&gt;Sorted method returns a sorted list from the items in the iterable (in our case it is a dictionary). It can also take a boolean value for reverse which, if set as True, will sort the iterable in descending order. It is actually the most efficient way to sort anything, be it strings, integers, dictionaries, lists etc.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
for key in sorted (states_dict.iterkeys()):
    print &#39;%s : %s&#39;%(key, states_dict[key])

AL : Alabama
CA : California
NJ : New Jersey
NY : New York



for key in sorted (states_dict.iterkeys(), reverse=True):
    print &#39;%s : %s&#39;%(key, states_dict[key])

NY : New York
NJ : New Jersey
CA : California
AL : Alabama
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you observe the above example, we have used a function iterkeys() This function returns an iterator over the dictionary&amp;rsquo;s keys..&lt;/p&gt;

&lt;h3 id=&#34;sort:84dcac346e67782f4a3216af8d53f825&#34;&gt;sort( )&lt;/h3&gt;

&lt;p&gt;Just like the sort method in lists, the method simply sorts the data.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
k = states_dict.keys()
k.sort()  # For reverse sorting, pass the argument reverse=True
for x in k:
    print &#39;%s : %s&#39;%((x, states_dict[x]))

AL : Alabama
CA : California
NJ : New Jersey
NY : New York
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:84dcac346e67782f4a3216af8d53f825&#34;&gt;Exercise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An iterator, as the name suggests creates an iterator object which can be manually accessed using next() method. As an exercise, create a dictionary&amp;rsquo;s keyiterator object and assign it to a variable and then access the items/ elements of the iterator object using next() method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the built-in method iter() and see what is the output when you use next function with it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sort the items by their values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;views:84dcac346e67782f4a3216af8d53f825&#34;&gt;Views&lt;/h2&gt;

&lt;p&gt;The views are methods that are introduced in Python 2.7 (It is highly recommended to upgrade your python version if you are running Python version &amp;lt; 2.7) The problem with dictionary methods like items() is that it wastes the resources by creating a copy of the dictionary&amp;rsquo;s key, value pair. However view() methods reflect the changes without creating a copy. Basically, views doesn&amp;rsquo;t care if the dictionary has been changed, all it does is show the view of the dictionary. Let&amp;rsquo;s take a look at an example that shows difference between iteritems() and viewitems().
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
s_iter = states_dict.iteritems()
states_dict.pop(&#39;AL&#39;)




&#39;Alabama&#39;




for i in s_iter:
    print i


---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

&amp;lt;ipython-input-31-e32cc735634f&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 for i in s_iter:
      2     print i


RuntimeError: dictionary changed size during iteration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We expected an error right? Because the iterator was trying to go through all the items in the dictionary and suddenly it detected that dictionary was changed due to our pop() method.
Now lets try the same thing with viewitems() instead of iteritems() and see if we still get an error or not.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
s_view = states_dict.viewitems()
s_view




dict_items([(&#39;NY&#39;, &#39;New York&#39;), (&#39;CA&#39;, &#39;California&#39;), (&#39;NJ&#39;, &#39;New Jersey&#39;), (&#39;AL&#39;, &#39;Alabama&#39;)])




states_dict.pop(&#39;AL&#39;)
s_view  # We didn&#39;t modify it after popping.




dict_items([(&#39;NY&#39;, &#39;New York&#39;), (&#39;CA&#39;, &#39;California&#39;), (&#39;NJ&#39;, &#39;New Jersey&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example makes it clear that viewitems does not create a copy, it just shows the current dictionary. If you try using items() method or iteritems() method after modifying the dictionary, it will always throw an error.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise-1:84dcac346e67782f4a3216af8d53f825&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Exercise: Try using the viewkeys() and viewvalues() and compare the differences between them and iteritems() &amp;amp; iterkeys().&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember, If you have any difficulty using any function or method in IPython, type the function or method name followed by a &amp;lsquo;?&amp;rsquo;. It will print the docstring/ help manual for you.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advanced_Electronics</title>
      <link>http://localhost:1313/Electronics/Advanced_Electronics/</link>
      <pubDate>Thu, 02 Jul 2015 21:25:17 -0400</pubDate>
      
      <guid>http://localhost:1313/Electronics/Advanced_Electronics/</guid>
      <description>

&lt;h1 id=&#34;semiconductors:229c4880515716fc676d1805dd5c1be5&#34;&gt;Semiconductors&lt;/h1&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;a-semiconductor-has-conducitivity-between-that-of-a-conductor-and-an-insulator:229c4880515716fc676d1805dd5c1be5&#34;&gt;A semiconductor has conducitivity between that of a conductor and an insulator.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;So once we understand the simple passive components like resistors and capacitors, we move to the world of semiconductors.&lt;/li&gt;
&lt;li&gt;A semi-conductor, as the name suggests has its conductivity between that of a conductor like aluminium, copper etc and insulators like glass.&lt;/li&gt;
&lt;li&gt;The understanding of a semiconductor and its properties relies on quantum physics to explain the motion of electrons and holes in a crystal lattice&lt;/li&gt;
&lt;li&gt;A semiconductor requires an unique arrangement of atoms for it be a suitable candidate for a semiconductor. Lets look at the energy band..&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/semiconductor.png&#34; alt=&#34;Diode&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The unique arrangement of atoms that produces such a energy band is shown by elements like Silicon, Germanium, Zinc and few others.&lt;/li&gt;
&lt;li&gt;Electrical conductivity of a semiconductor increases with temperature (opposite of conductor)&lt;/li&gt;
&lt;li&gt;The electrical properties of a semiconductor material can be modified by controlled addition of impurities, or by the application of electrical fields or light&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-semiconductors:229c4880515716fc676d1805dd5c1be5&#34;&gt;Types of Semiconductors&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;n-type-doped-with-element-which-has-more-number-of-electrons-than-the-semiconductor-element-creating-extra-electrons:229c4880515716fc676d1805dd5c1be5&#34;&gt;N Type: Doped with element which has more number of electrons than the semiconductor element (creating extra electrons)&lt;/h4&gt;

&lt;h4 id=&#34;p-type-doped-with-element-which-has-less-number-of-electrons-than-the-semiconductor-element-creating-extra-holes:229c4880515716fc676d1805dd5c1be5&#34;&gt;P Type: Doped with element which has less number of electrons than the semiconductor element (creating extra holes)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As per the theory of semiconductors, impure semiconductors are called extrinsic semiconductors and we will be dealing mostly with impure semiconductors.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Depending on the type of impurity added we have two types of semiconductors: N - type and P-type semiconductors.&lt;/p&gt;

&lt;p&gt;(If interested)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk about covalent bond of silicon and how adding impurity (N type: Antimony, P type: Boron) helps in changing the fermi band level&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;diodes:229c4880515716fc676d1805dd5c1be5&#34;&gt;Diodes&lt;/h1&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;a-diode-is-a-passive-two-terminal-component-with-a-primary-function-to-allow-the-flow-of-current-in-one-direction-only:229c4880515716fc676d1805dd5c1be5&#34;&gt;A Diode is a passive two terminal component, with a primary function to allow the flow of current in one direction only.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/diode.png&#34; alt=&#34;Diode&#34; align=&#34;center&#34; style=&#34;height: 200px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Combining the P-type semiconductor and N-type semiconductor gives us another basic electrical device known as a Diode.&lt;/li&gt;
&lt;li&gt;The key function of an ideal diode is to control the direction of current-flow called the forward direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-of-diodes:229c4880515716fc676d1805dd5c1be5&#34;&gt;Working of Diodes&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;####Diffusion:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;files/diode_diffusion.gif&#34; alt=&#34;Diode_Diffusion&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The n type semiconductor has higher concentration of electrons compared to holes and the p type semiconductor has higher concentration of holes.&lt;/li&gt;
&lt;li&gt;Due to this a process called diffusion takes place. In this process free electrons from the n side will diffuse (spread) into the p side and combine with holes present there, leaving a positive immobile (not moveable) ion in the n side.&lt;/li&gt;
&lt;li&gt;Hence few atoms on the p side are converted into negative ions. Similarly few atoms on the n-side will get converted to positive ions.&lt;/li&gt;
&lt;li&gt;Due to the presence of these positive and negative ions a static electric field called as &amp;ldquo;barrier potential&amp;rdquo; is created across the p-n junction of the diode which is called as &amp;ldquo;barrier potential&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####Forward-Bias:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;files/diode_working.gif&#34; alt=&#34;Diode_Working&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Due to the negative terminal on the n-side, electrons from the n-side are pushed towards the p-region and vice versa on the p-side.&lt;/li&gt;
&lt;li&gt;This keeps happening and at a certain point the depletion region collapses and there is no opposition to the flow of current.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;so-what-happens-in-reverse-bias:229c4880515716fc676d1805dd5c1be5&#34;&gt;So what happens in Reverse Bias?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When the diode is reverse biased the hole from the p-side will get attracted towards the negative terminal of the supply and electrons from the n-side are attracted towards the positive terminal.&lt;/li&gt;
&lt;li&gt;Hence the process of widening of the depletion region takes place and hence more and more opposition to the flow of current takes place.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-diodes:229c4880515716fc676d1805dd5c1be5&#34;&gt;Types of Diodes&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/typesDiodes.jpg&#34; alt=&#34;Types of Diodes&#34; align=&#34;center&#34; style=&#34;height: 400px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;generic-diode:229c4880515716fc676d1805dd5c1be5&#34;&gt;Generic Diode&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;standard-signal-diodes-are-among-the-most-basic-average-no-frills-members-of-the-diode-family:229c4880515716fc676d1805dd5c1be5&#34;&gt;Standard signal diodes are among the most basic, average, no-frills members of the diode family&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;files/1n4148.jpg&#34; alt=&#34;Signal Diode&#34; align=&#34;left&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/generic_diode.png&#34; alt=&#34;Signal Diode Symbol&#34; align=&#34;right&#34; style=&#34;height: 150px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/1n4001.jpg&#34; alt=&#34;Power Diode&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They usually have a medium-high forward voltage drop and a low maximum current rating of ~300mA&lt;/li&gt;
&lt;li&gt;A common example of a signal diode is the 1N4148&lt;/li&gt;
&lt;li&gt;A rectifier or power diode is a standard diode with a much higher maximum current rating of about 1A but this comes at an expense of higher forward voltage drop (1.1V)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;led-light-emitting-diode:229c4880515716fc676d1805dd5c1be5&#34;&gt;LED (Light Emitting Diode)&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;light-emitting-diodes-they-glow:229c4880515716fc676d1805dd5c1be5&#34;&gt;Light emitting diodes.. They glow!&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;files/led.jpg&#34; alt=&#34;LED&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These are the flashiest member of the Diode family.&lt;/li&gt;
&lt;li&gt;They’re blinky and fun! But more than that, their high-efficiency has lead to widespread use in street lights, displays, backlighting, and much more.&lt;/li&gt;
&lt;li&gt;Like normal diodes, LEDs only allow current through one direction. They also have a forward voltage rating, which is the voltage required for them to light up.&lt;/li&gt;
&lt;li&gt;But how do they emit light?.. The holes exists at lower energy level compared to the electrons. When the electrons fall from conduction. So when a free electron falls, it loses energy. This energy is released in the form of photons. Bigger the fall, higher the frequency of light.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;photodiode:229c4880515716fc676d1805dd5c1be5&#34;&gt;Photodiode&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;the-anti-led-photodiodes-are-specially-constructed-diodes-which-capture-energy-from-photons-of-light:229c4880515716fc676d1805dd5c1be5&#34;&gt;The Anti-LED! Photodiodes are specially constructed diodes, which capture energy from photons of light&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;files/photodiode_symbol.png&#34; alt=&#34;Photodiode_Symbol&#34; align=&#34;left&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/photodiode.jpg&#34; alt=&#34;Photodiode&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These are the Anti-Led.. Can anyone think how it works?&lt;/li&gt;
&lt;li&gt;when a light photon enters the intrinsic region it can strike an atom in the crystal lattice and dislodge an electron. In this way a hole-electron pair is generated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####Difference between Photodiode and LDR?
* More sensitive
* Produces large light to current ratio. It amplifies the current.
* LDR works opposite.. It is passive.&lt;/p&gt;

&lt;h4 id=&#34;just-give-info-about-schottky-and-zener-diodes:229c4880515716fc676d1805dd5c1be5&#34;&gt;Just give info about Schottky and Zener diodes&lt;/h4&gt;

&lt;h5 id=&#34;schottky:229c4880515716fc676d1805dd5c1be5&#34;&gt;Schottky&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The semiconductor composition of a Schottky diode is slightly different from a normal diode, and this results in a much smaller forward voltage drop.&lt;/li&gt;
&lt;li&gt;They’ll still have a very large breakdown voltage though.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;zener:229c4880515716fc676d1805dd5c1be5&#34;&gt;Zener&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;They’re usually used to intentionally conduct reverse current.&lt;/li&gt;
&lt;li&gt;Zener’s are designed to have a very precise breakdown voltage, called the zener breakdown or zener voltage.&lt;/li&gt;
&lt;li&gt;They can be used as a voltage regulator for small loads.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rectifier:229c4880515716fc676d1805dd5c1be5&#34;&gt;Rectifier&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A rectifier is a circuit that converts alternating current (AC) to direct current (DC).
&lt;img src=&#34;files/rectifier.gif&#34; alt=&#34;Rectifier&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Current in AC circuits literally alternates – quickly switches between running in the positive and negative directions – but current in a DC signal only runs in one direction.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A half-wave rectifier can be made out of just a single diode. (Explain to them if interested).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Explain about working of full wave rectifier (if they&amp;rsquo;re interested).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;multimeter:229c4880515716fc676d1805dd5c1be5&#34;&gt;Multimeter&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;####is an electronic measuring instrument that combines several measurement functions in one unit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;files/analog_mm.jpg&#34; alt=&#34;Analog Multimeter&#34; align=&#34;left&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/digital_mm.jpg&#34; alt=&#34;Digital Multimeter&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;multimeter-1:229c4880515716fc676d1805dd5c1be5&#34;&gt;Multimeter&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;things-you-should-know:229c4880515716fc676d1805dd5c1be5&#34;&gt;Things you should know:&lt;/h3&gt;

&lt;h4 id=&#34;connecting-multimeter:229c4880515716fc676d1805dd5c1be5&#34;&gt;Connecting Multimeter !!&lt;/h4&gt;

&lt;h4 id=&#34;measuring-voltage:229c4880515716fc676d1805dd5c1be5&#34;&gt;Measuring Voltage&lt;/h4&gt;

&lt;h4 id=&#34;measuring-current:229c4880515716fc676d1805dd5c1be5&#34;&gt;Measuring Current !!!&lt;/h4&gt;

&lt;h4 id=&#34;measuring-resistance:229c4880515716fc676d1805dd5c1be5&#34;&gt;Measuring Resistance&lt;/h4&gt;

&lt;h4 id=&#34;measuring-capacitance:229c4880515716fc676d1805dd5c1be5&#34;&gt;Measuring Capacitance !!!&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Insert the Black probe in the “COM” jack. This is the COMmon, or ground, connection. The Red probe should be in the “V” jack.&lt;/li&gt;
&lt;li&gt;Test the continuity&lt;/li&gt;
&lt;li&gt;Talk about controls on multimeter&lt;/li&gt;
&lt;li&gt;Talk about breadboard&lt;/li&gt;
&lt;li&gt;Getting a negative Voltage!&lt;/li&gt;
&lt;li&gt;Homework: Measure current flowing through the parallel circuit and a series circuit.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Measuring Current: Never measure voltage when the dial is at current. Current is always measured in series, which means that the multimeter is actually used to complete the circuit. If you do, its small fuse ~20mA will blow.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Measuring Capacitance: Take utmost care when measuring AC capacitance or any high voltage capacitance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dc-power-supplies:229c4880515716fc676d1805dd5c1be5&#34;&gt;DC Power Supplies&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/dc_power_supply.jpg&#34; alt=&#34;DC Power Supply&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/pos_polarity.jpg&#34; alt=&#34;Positive Polarity&#34; align=&#34;left&#34; style=&#34;height: 50px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/neg_polarity.jpg&#34; alt=&#34;Negative Polarity&#34; align=&#34;right&#34; style=&#34;height: 50px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is always good practice to test a power supply before using it for the first time.&lt;/li&gt;
&lt;li&gt;Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;files/the_end.gif&#34; alt=&#34;The End&#34; align=&#34;center&#34; style=&#34;height: 450px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Challenge2</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Challenge2/</link>
      <pubDate>Tue, 30 Jun 2015 02:04:43 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Challenge2/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Lab Challenge 2- Questions&lt;/h1&gt;

&lt;p&gt;##Question 1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write a Program that takes a text file as an input and generates a pickle file which contains a list of random lines of strings obtained from the text file.
Load the pickle file again and check the output.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
Suppose the text file has some paragraphs:
&amp;gt; Hello World this &amp;hellip;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfeeling so rapturous discovery he &amp;hellip;&lt;/p&gt;

&lt;p&gt;Terminated principles sentiments &amp;hellip;&lt;/p&gt;

&lt;p&gt;Now residence dashwoods she excellent &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your list elements should look something like:
&amp;gt; Terminated principles sentiments &amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello World this &amp;hellip;&lt;/p&gt;

&lt;p&gt;Now residence dashwoods she excellent &amp;hellip;&lt;/p&gt;

&lt;p&gt;Unfeeling so rapturous discovery he &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hints:&lt;/strong&gt;
* Check a module by the name random.
(Official Documentation: &lt;a href=&#34;https://docs.python.org/2/library/random.html&#34;&gt;https://docs.python.org/2/library/random.html&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the text file that you can use as your input here: &lt;a href=&#34;http://sharmamohit.com/misc_files/test.txt&#34;&gt;http://sharmamohit.com/misc_files/test.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;question-2:9af1e1a35463778b5c34ec771f382e7d&#34;&gt;Question 2&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Citi Bike is a privately owned public bicycle sharing system that serves parts of New York City. Attached you will find a csv file containing 2 week ridership data for the month of December 2014. Your task is to:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Find the number of Male and Female ridership during this 2 week period.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What is the percentage of Male riders and Female riders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download the &lt;a href=&#34;http://sharmamohit.com/misc_files/dec-2week-2014.csv&#34; title=&#34;2 week of December 2014&#34;&gt;CSV file&lt;/a&gt; for 2 weeks of December 2014.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;instructions:9af1e1a35463778b5c34ec771f382e7d&#34;&gt;Instructions:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do not submit the assignments via email to me.&lt;/li&gt;
&lt;li&gt;Submit .py files as your assignmnet. Do not copy paste to the text editor or convert to pdf on nyu classes. Name your assignments as:  &lt;code&gt;&amp;lt;yourname&amp;gt;&#39;Python challenge&#39;&amp;lt;challenge number&amp;gt;&amp;lt;Question number&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you have any doubts in understanding any assignmner question, feel free to email me. I will help you. Do not wait till the last moment.&lt;/li&gt;
&lt;li&gt;You are allowed to use any technique that involves python built-ins, numpy, matplotlib, pandas. You are not allowed to use third party libraries.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_Pickle</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Pickle/</link>
      <pubDate>Mon, 29 Jun 2015 00:07:47 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Pickle/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Pickle&lt;/h1&gt;

&lt;p&gt;Pickle module implements an algorithm for turning your Python object into a series of bytes by the process of serialization. Before we can jump into the unique feature of pickling, lets understand what serialization means.&lt;/p&gt;

&lt;p&gt;Serialization is the process of converting a data structure or object state into a format that can be stored and resurrected later in the same or another computer environment. During resurrection, when the series of bytes is reread according to the serialization algorithm, it can be used to create a semantically identical clone of the original object. This process of serializing an object is also called as deflating an object. The opposite operation, as you must&amp;rsquo;ve guessed, is called inflating. You can read more about serialization on &lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34; title=&#34;Serialization&#34;&gt;&lt;code&gt;wikipedia&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In python, the bulk of pickle module is written in C. It can store arbitrary complex python data structures however since it stores python objects, it is very highly unsafe as it can contain malicious data. So remember, pickle is good if only you create your pickle file locally and do not share it with some one.&lt;/p&gt;

&lt;p&gt;Now lets see some of the datatypes that pickle can store:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the native datatypes that python supports such as booleans, integers, complex numbers, strings etc&lt;/li&gt;
&lt;li&gt;Collections such as lists, tuples, dictionaries containing any combination of native datatypes.&lt;/li&gt;
&lt;li&gt;Lists, Dictionaries and Tuples containing Nested combinations of &amp;hellip;&amp;hellip; you get it!&lt;/li&gt;
&lt;li&gt;Methods, Functions, Classes, Instances etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-pickle-data:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Constructing Pickle data:&lt;/h2&gt;

&lt;p&gt;Lets jump directly into code and I will explain as we go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {}
student[&#39;name&#39;] = &#39;Jack&#39;
student[&#39;course&#39;] = &#39;Urban Skills Lab&#39;
student[&#39;enrolled&#39;] = True
student[&#39;misc&#39;] = (&#39;full-time&#39;, )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we have created a student dictionary. Now lets save the above dictionary to a pickle file&lt;/p&gt;

&lt;h2 id=&#34;saving-data-as-pickle:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Saving data as Pickle:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import pickle
try:
    with open(&#39;test_pickle.pkl&#39;, &#39;wb&#39;) as f:
        pickle.dump(student, f)
except IOError, e:
    print &#39;IOError: &#39;,e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you check out a new way to open file object for writing? With this technique, you don&amp;rsquo;t have to worry about closing the file_object. As soon as the while loop is broken, the file_object will automatically be closed. (Think why?)
Ok, so the dump() method in pickle module takes the serializable python data structure, serializes it into a binary and save it to the file. Now lets try loading the data. To make sure it works, lets open an new ipython terminal or just close your current session and reopen it fresh.&lt;/p&gt;

&lt;h2 id=&#34;loading-data-from-pickle-file:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Loading Data from Pickle file&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import pickle
try:
    with open(&#39;test_pickle.pkl&#39;, &#39;rb&#39;) as f:
        s = pickle.load(f)
except IOError, e:
    print &#39;IOError: &#39;,e

s





{&#39;course&#39;: &#39;Urban Skills Lab&#39;,
 &#39;enrolled&#39;: True,
 &#39;misc&#39;: (&#39;full-time&#39;,),
 &#39;name&#39;: &#39;Jack&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila! a new data structure is created with the data structure that is equal to the original data structure.&lt;/p&gt;

&lt;p&gt;This technique only works when you are working in python. If you want this to be compatible with other programming languages then you will have to take a look at other serialization format like JSON.
This is beyond the scope of the subject and is left as a self-assignment for interested students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro_to_Electronics</title>
      <link>http://localhost:1313/Electronics/Intro_to_Electronics/</link>
      <pubDate>Fri, 26 Jun 2015 10:24:37 -0400</pubDate>
      
      <guid>http://localhost:1313/Electronics/Intro_to_Electronics/</guid>
      <description>

&lt;h1 id=&#34;introduction-and-history:289523e79a90d137cb3ca850a5568a96&#34;&gt;Introduction and History&lt;/h1&gt;

&lt;h2 id=&#34;where-it-all-began:289523e79a90d137cb3ca850a5568a96&#34;&gt;Where it all began..&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thomas Edison&amp;rsquo;s New year eve party in 1880.&lt;img src=&#34;files/menlo_park.jpg&#34; alt=&#34;Menlo Park&#34; align=&#34;right&#34; style=&#34;width: 200px;&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It all began on September 15, 1878 when a group of New Yorker reporters traveled to Thomas Edison&amp;rsquo;s laboratory in Menlo Park, NJ.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;lsquo;When I am through, only the rich will be able to afford candles&amp;rsquo; said the wizard of Menlo Park.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JP Morgan was among the first backers who hastily provided capital&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first main power station to go online and feed power to street lights and houses was in &lt;strong&gt;&lt;code&gt;New York&lt;/code&gt;&lt;/strong&gt;.&lt;img src=&#34;files/PearlStreetStation.jpg&#34; alt=&#34;PearlStreetStation&#34; align=&#34;right&#34; style=&#34;width: 200px; height: 200px&#34;/&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In 1882, the first main power station went online feeding electricity to some of the wealthiest and initial backers and their street lights.. about 400 electric bulbs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-is-electricity:289523e79a90d137cb3ca850a5568a96&#34;&gt;What is Electricity ?&lt;/h1&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;electricity-is-the-set-of-physical-electrical-phenomena-associated-with-the-presence-and-flow-of-electric-charge:289523e79a90d137cb3ca850a5568a96&#34;&gt;Electricity is the set of physical (Electrical) phenomena associated with the presence and flow of electric charge&lt;/h4&gt;

&lt;p&gt;[]()&lt;p style=&#39;text-align: right;&#39;&gt;Wikipedia&lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;electric-charge:289523e79a90d137cb3ca850a5568a96&#34;&gt;Electric Charge&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;####What is an Electric Charge?
* It&amp;rsquo;s the stuff that causes electrical phenomena.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;####What are electrical phenomena? &lt;img src=&#34;files/circular.gif&#34; alt=&#34;Circular Reasoning&#34; align=&#34;right&#34; style=&#34;width: 300px; height: 300px&#34;/&gt;
* Those are the things caused by charge!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Simple, no?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a good reason why the definition of &amp;ldquo;charge&amp;rdquo; is circular.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Like mass, length, and time, Electric Charge is a &amp;ldquo;fundamental.&amp;rdquo; For example Time is defined as a point of time as measured in hours and minutes past midnight or noon.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Many dictionaries say this: &amp;ldquo;Electric charge: a fundamental property of matter.&amp;rdquo; &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The word &amp;ldquo;Charge&amp;rdquo; is used to define other things, and therefore the definition of the word &amp;ldquo;charge&amp;rdquo; becomes a serious problem!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;What is an electric current? It is a flow of charge. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;What is electric charge? It is the stuff that flows during an electric current!&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###So What is an Electric Charge?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;hellip;the stuff that flows during an electric current.&lt;img src=&#34;files/current.gif&#34; alt=&#34;Current Flow&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The red &amp;ldquo;stuff&amp;rdquo; that you see going from positive terminal to negative terminal is the Charge!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;the stuff that appears on a balloon when you rub it on your hair.&lt;img src=&#34;files/static.jpg&#34; alt=&#34;Static&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;lt; If people are Interested &amp;gt; &lt;br /&gt;
Ask them: 1. Why Static Electricity does not kill you but current electricity of same potential might?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;hellip;the stuff that comes in two kinds: positive and negative.&lt;img src=&#34;files/charge.png&#34; alt=&#34;Electric charge&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[SHOULD I KEEP THIS???????]
* Charge is not&lt;br /&gt;
    &amp;hellip;energy&lt;br /&gt;
    &amp;hellip;not just a property&lt;br /&gt;
    &amp;hellip;not invisible&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[SHOULD I KEEP THIS???????]
* A fixed quantity of charge can possess many different amounts of energy at the same time&lt;br /&gt;
* Not invisible? Think of an electric arc, or a spark&lt;/p&gt;

&lt;h2 id=&#34;ac-dc:289523e79a90d137cb3ca850a5568a96&#34;&gt;##AC / DC&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;ac-and-dc-both-describe-the-flow-of-electric-current-in-a-circuit:289523e79a90d137cb3ca850a5568a96&#34;&gt;AC and DC both describe the flow of electric current in a circuit.&lt;/h4&gt;

&lt;h4 id=&#34;in-direct-current-dc-the-electric-charge-current-flows-only-in-one-direction:289523e79a90d137cb3ca850a5568a96&#34;&gt;In Direct Current (DC), the electric charge (current) flows only in one direction.&lt;/h4&gt;

&lt;h4 id=&#34;in-alternating-current-ac-the-electric-charge-current-changes-direction-periodically:289523e79a90d137cb3ca850a5568a96&#34;&gt;In Alternating Current (AC), the electric charge (current) changes direction periodically.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/acdc.png&#34; alt=&#34;AC/ DC&#34; align=&#34;center&#34; style=&#34;height: 200px&#34;/&gt;&lt;br /&gt;
So which is better?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the digital electronics that you build will use DC.&lt;/li&gt;
&lt;li&gt;Most homes are wired for AC, so if you want to plug in your electronics items (or your project), you need something called AC to DC converter.&lt;/li&gt;
&lt;li&gt;AC has some useful properties like being able to convert voltage levels using single component, a transformer.&lt;/li&gt;
&lt;li&gt;For transmission, we need to reduce the power loss through the cables, which is proportional to I^2. Thus we need to reduce the current flowing, this can be easily done by using AC step up and step down transformer (keeping power constant). But beyond 700km something, DC becomes more economical(HVDC).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;alternating-current-ac:289523e79a90d137cb3ca850a5568a96&#34;&gt;##Alternating Current (AC)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;alternating-current-describes-the-flow-of-charge-that-changes-periodically:289523e79a90d137cb3ca850a5568a96&#34;&gt;Alternating current describes the flow of charge that changes periodically.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;generating-ac:289523e79a90d137cb3ca850a5568a96&#34;&gt;Generating AC&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;ac-can-be-generated-by-a-device-called-an-alternator:289523e79a90d137cb3ca850a5568a96&#34;&gt;AC can be generated by a device called an alternator.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;from IPython.display import YouTubeVideo
YouTubeVideo(&#39;i-j-1j2gD28&#39;,width=640, height=480)





    &amp;lt;iframe
        width=&amp;quot;640&amp;quot;
        height=&amp;quot;480&amp;quot;
        src=&amp;quot;https://www.youtube.com/embed/i-j-1j2gD28&amp;quot;
        frameborder=&amp;quot;0&amp;quot;
        allowfullscreen
    &amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generating-ac-1:289523e79a90d137cb3ca850a5568a96&#34;&gt;Generating AC&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;consider-an-analogy-of-a-set-of-water-pipes:289523e79a90d137cb3ca850a5568a96&#34;&gt;Consider an analogy of a set of water pipes&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/ac_water.gif&#34; alt=&#34;AC Water Analogy&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ac-waveforms:289523e79a90d137cb3ca850a5568a96&#34;&gt;##AC Waveforms&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/ac_wave_anim.gif&#34; alt=&#34;AC Waveform Anim&#34; align=&#34;center&#34; style=&#34;height: 100px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/ac_wave.png&#34; alt=&#34;AC Waveform&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;We often want to describe AC waveform in mathematical terms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ac-waveforms-1:289523e79a90d137cb3ca850a5568a96&#34;&gt;##AC Waveforms&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/sine_wave.gif&#34; alt=&#34;AC Sinewave&#34; align=&#34;center&#34; style=&#34;height: 30px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/sine_wave_eg.png&#34; alt=&#34;AC Sinewave_eg&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;A simple sine wave consists of three parts: amplitude, frequency and phase.&lt;/li&gt;
&lt;li&gt;V(t) is our voltage as a function of time.&lt;/li&gt;
&lt;li&gt;170 is the amplitude which is max voltage.&lt;/li&gt;
&lt;li&gt;2pi is constant to convert frequency (in Hz) to angular frequency (radians per second)&lt;/li&gt;
&lt;li&gt;60 is the frequency of sinewave&lt;/li&gt;

&lt;li&gt;&lt;p&gt;t is our dependent variable in seconds&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So what is output voltage? 170? No! Its RMS value is 120!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;direct-current-dc:289523e79a90d137cb3ca850a5568a96&#34;&gt;##Direct Current (DC)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;direct-current-provides-a-constant-voltage-or-current:289523e79a90d137cb3ca850a5568a96&#34;&gt;Direct current provides a constant voltage or current.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;DC is a bit easier to understand. DC is generally obtained from AC alternator via a rectifier circuit.&lt;/li&gt;
&lt;li&gt;There is actually not much to talk about in DC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dc-waveforms:289523e79a90d137cb3ca850a5568a96&#34;&gt;##DC Waveforms&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/dc_wave.gif&#34; alt=&#34;DC wave&#34; align=&#34;center&#34; style=&#34;height: 30px&#34;/&gt;&lt;br /&gt;
&lt;img src=&#34;files/dc_wave_eg.png&#34; alt=&#34;DC wave_eg&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So this means that voltage remains constant and is independent of time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;voltage-v:289523e79a90d137cb3ca850a5568a96&#34;&gt;##Voltage (V)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;potential-difference-between-two-points-is-expressed-as-volts-or-voltage:289523e79a90d137cb3ca850a5568a96&#34;&gt;Potential DIfference between two points is expressed as volts (or voltage)&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/dc_volt.gif&#34; alt=&#34;DC Volts&#34; align=&#34;left&#34; style=&#34;height: 150px&#34;/&gt;
&lt;img src=&#34;files/voltagePolarity.jpg&#34; alt=&#34;Voltage Polarity&#34; align=&#34;right&#34; style=&#34;height: 150px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we know that Charge is a fundamental property, but we need to know what is responsible for the flow of this charge and how much energy is being carried by a charge.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;This is where Voltage comes into the picture. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Voltage is a measure of electric potential energy per unit charge measured or simply, how much is the energy per unit charge. in volts.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Voltage is the difference in charge between the two points.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Give the example of water flowing through a tube (Pressure in the tube) &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;current-i:289523e79a90d137cb3ca850a5568a96&#34;&gt;##Current (I)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;an-electric-current-is-a-flow-of-electric-charge:289523e79a90d137cb3ca850a5568a96&#34;&gt;####An electric current is a flow of electric charge&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;So we know that we need to create a potential difference for charges to flow. But now We need some way to quantify those red dots.. basically find how many of those electric charges will flow.. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Current tells us about the flow of charge.. how many coulombs per second is flowing. &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Give the example of water flowing through a tube (amount of water flow). &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;files/1.gif&#34; alt=&#34;Electron and Current flow&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remember that electrons always flow in the opposite direction of charge because in metals it is the negatively charged electrons that carry charge! &lt;br /&gt;&lt;/li&gt;
&lt;li&gt;So basically what we see here is that voltage or potential difference is what causes the flow of current or the charge. &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;resistors-r:289523e79a90d137cb3ca850a5568a96&#34;&gt;Resistors &amp;reg;&lt;/h1&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;a-resistor-is-a-two-terminal-passive-electrical-component-with-the-primary-function-to-limit-the-flow-of-current:289523e79a90d137cb3ca850a5568a96&#34;&gt;A Resistor is a two terminal passive electrical component with the primary function to limit the flow of current.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/resistor.png&#34; alt=&#34;Resistor&#34; align=&#34;center&#34; style=&#34;height: 150px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So basically anything that interferes with the flow of electrons in other words, anything that obstructs the flow of current or charge is known as resistance.&lt;/li&gt;
&lt;li&gt;Every electrical component has certain resistivity (based on the material it is made up of)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resistance:289523e79a90d137cb3ca850a5568a96&#34;&gt;Resistance&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/water-analogy.png&#34; alt=&#34;Water Analogy&#34; align=&#34;center&#34; style=&#34;height: 200px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give the example of water flowing through a tube (narrow the tube or obstruction in flow of water )&lt;/li&gt;
&lt;li&gt;We can also observe that resistance depends on the length of the conductor, cross-sectional area, and resistivity of a material.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;We now get a feeling that voltage, current and resistance are somehow related to each other.. and indeed they are. The rule/ law that gives a relation between these is known as Ohm&amp;rsquo;s Law&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-resistors:289523e79a90d137cb3ca850a5568a96&#34;&gt;Types of Resistors&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Fixed&lt;/th&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dependent on Physical Quantity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;files/fixedresistor.jpg&#34; alt=&#34;Fixed Resistor&#34; align=&#34;center&#34; style=&#34;height: 50px&#34;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;files/potentiometer.jpg&#34; alt=&#34;Variable value Resistor&#34; align=&#34;center&#34; style=&#34;height: 50px&#34;/&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;files/ldr.jpg&#34; alt=&#34;LDR&#34; align=&#34;center&#34; style=&#34;height: 50px;&#34;/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Value is based on Color Codes&lt;/td&gt;
&lt;td&gt;Value is printed on the Pot&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Value is theoretically between 0 and inf&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Example: Fixed to drop Voltage&lt;/td&gt;
&lt;td&gt;Example: Potential Divider&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Example: Sensor for measuring something&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Fixed value resistors have a permanent value and cannot be changed&lt;/li&gt;
&lt;li&gt;Variable resistors or potentiometers have a variable resistance&lt;/li&gt;
&lt;li&gt;Resistance can also be changed based on the physical quantity, such resistances are called &amp;lt;something&amp;gt; dependent resistor. For example, LDR&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;The value of the fixed resistors is &lt;a href=&#34;http://hotwirefoamcutterinfo.com/__Resistor_files/Resistor_Color_Code.png&#34;&gt;Color coded&lt;/a&gt;. Meaning that the resistance of the resistor is based on the color codes.&lt;/li&gt;
&lt;li&gt;On a potentiometer, the minimum and maximum value is mentioned.&lt;/li&gt;
&lt;li&gt;You will also observe that potentiometer has 3 terminals. We need to connect the 1st and 2nd OR 2nd and 3rd.&lt;/li&gt;
&lt;li&gt;The resistance dynamically varies for a something dependent resistor based on the instensity or magnitude of that something&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Resistances have different construction materials, but we will mostly be using Carbon Film type or Metal Film. Metal film type resistors have higher accuracy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reading-a-resistor:289523e79a90d137cb3ca850a5568a96&#34;&gt;###Reading a Resistor&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/470Ohm_Resistor.jpg&#34; alt=&#34;Color Code&#34; align=&#34;left&#34; style=&#34;height: 200px&#34;/&gt;
&lt;img src=&#34;files/5BandResistor.gif&#34; alt=&#34;Color Code&#34; align=&#34;right&#34; style=&#34;height: 300px&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;ohm-s-law:289523e79a90d137cb3ca850a5568a96&#34;&gt;##Ohm&amp;rsquo;s Law&lt;/h2&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;the-current-flowing-through-the-conductor-is-directly-proportional-to-the-potential-difference-accross-two-points-resistance-being-the-constant-factor:289523e79a90d137cb3ca850a5568a96&#34;&gt;The current flowing through the conductor is directly proportional to the potential difference accross two points (Resistance being the constant factor).&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/ohmslaw.png&#34; alt=&#34;Ohms Law&#34; align=&#34;left&#34; style=&#34;height: 200px&#34;/&gt;
&lt;img src=&#34;files/ohms-law.gif&#34; alt=&#34;Ohms Law gif&#34; align=&#34;center&#34; style=&#34;height: 200px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ohms law is one of the most important laws that you will come accross in electronics.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s take a look at a small but very practical example&lt;/p&gt;

&lt;p&gt;from IPython.display import HTML&lt;/p&gt;

&lt;h1 id=&#34;example:289523e79a90d137cb3ca850a5568a96&#34;&gt;Example&lt;/h1&gt;

&lt;p&gt;HTML(&amp;rsquo;&lt;iframe src=http://123d.circuits.io/circuits/739758-ohms-law/edit width=1000 height=400&gt;&lt;/iframe&gt;&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=http://123d.circuits.io/circuits/739758-ohms-law/edit width=1000 height=400&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;capacitors:289523e79a90d137cb3ca850a5568a96&#34;&gt;Capacitors&lt;/h1&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;a-capacitor-is-a-two-terminal-passive-component-separated-by-a-dielectric-medium-with-a-primary-function-to-store-electric-charge:289523e79a90d137cb3ca850a5568a96&#34;&gt;A Capacitor is a two terminal passive component, separated by a dielectric medium, with a primary function to store electric charge.&lt;/h4&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/capacitor.gif&#34; alt=&#34;Resistor&#34; align=&#34;center&#34; style=&#34;height: 150px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What makes capacitor special is its ability to store charge. Think of it as your temporary battery.&lt;/li&gt;
&lt;li&gt;Lets look at the construction of the capacitor.&lt;/li&gt;
&lt;li&gt;Most capacitors can be non polarized up to about 1 microfarad&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;capacitor:289523e79a90d137cb3ca850a5568a96&#34;&gt;Capacitor&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/capacitor_diag.gif&#34; alt=&#34;Capacitor_diag&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A capacitor is created out of two metal plates and an insulating material called a dielectric.&lt;/li&gt;
&lt;li&gt;The metal plates are placed very close to each other, in parallel, but the dielectric sits between them to make sure they don’t touch&lt;/li&gt;
&lt;li&gt;The dielectric can be made out of all sorts of insulating materials: paper, glass, rubber, ceramic, plastic, or anything that will impede the flow of current.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;capacitor-1:289523e79a90d137cb3ca850a5568a96&#34;&gt;Capacitor&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;Working of a capacitor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;files/capacitor_working.gif&#34; alt=&#34;Capacitor_working&#34; align=&#34;center&#34; style=&#34;height: 350px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When current flows into a capacitor, the charges get “stuck” on the plates because they can’t get past the insulating dielectric. Electrons – negatively charged particles – are sucked into one of the plates, and it becomes overall negatively charged.&lt;/li&gt;
&lt;li&gt;The large mass of negative charges on one plate pushes away like charges on the other plate, making it positively charged.&lt;/li&gt;
&lt;li&gt;If you take off the supply to the capacitor, the capacitor is still charged and that&amp;rsquo;s why it is always suggested that before opening any electrical device, you should wear rubber gloves and after disconnecting it from power source, flip its mains switch onn and off for atleast 5- 10 seconds (This is not applicable for CRT TVs.. leave them overnight!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-capacitors:289523e79a90d137cb3ca850a5568a96&#34;&gt;Types of Capacitors&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/types_of_cap.jpg&#34; alt=&#34;Capacitor_Types&#34; align=&#34;center&#34; style=&#34;height: 400px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of different types of capacitors comes from the dielectric that they are made up of.&lt;/li&gt;
&lt;li&gt;Ceraic capacitors are most commonly used and most commonly produced.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;types-of-capacitors-1:289523e79a90d137cb3ca850a5568a96&#34;&gt;Types of Capacitors&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;files/typesCaps.jpg&#34; alt=&#34;Capacitor_Types_img&#34; align=&#34;center&#34; style=&#34;height: 300px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Electrolytics are great because they can pack a lot of capacitance into a relatively small volume.&lt;/li&gt;
&lt;li&gt;They’re especially well suited to high-voltage applications&lt;/li&gt;
&lt;li&gt;Super capacitors are actually the ones that can have capacitance of more than 1F but they are not suited for high voltages. Infact the 10F capacitor is rated for 2.5V, to overcome this, or infact any other low voltage capacitor&amp;rsquo;s drawback, we can apply multiple such in series&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;series-and-parallel-circuits:289523e79a90d137cb3ca850a5568a96&#34;&gt;Series and Parallel Circuits&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If components share a common node and if the same current flows through them, they are in series&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If components share two common nodes, they are in parallel.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;files/series_parallel.jpg&#34; alt=&#34;Series &amp; Parallel Circuit&#34; align=&#34;center&#34; style=&#34;height: 250px&#34;/&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_FileIO</title>
      <link>http://localhost:1313/Python_Tutorials/Python_FileIO/</link>
      <pubDate>Fri, 26 Jun 2015 02:07:12 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_FileIO/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python File I/O&lt;/h1&gt;

&lt;p&gt;Before we jump in to file I/O functions, lets first look at some basic I/O functions that are available to use in Python.
In Python, there are three basic I/O connections, Standard Input, Standard Output and Standard Error. As the name suggests, Standard Input is the data that goes to the program through the keyboard. keyboard being the standard input. Standard output is the terminal console, unless redirected..(guess where?!!) and Standard error is the stream where the programs write their error messages which is again to the terminal unless redirected.&lt;/p&gt;

&lt;h2 id=&#34;standard-input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Standard Input:&lt;/h2&gt;

&lt;p&gt;Python provides two built-in functions to read a line from the keyboard.&lt;/p&gt;

&lt;h3 id=&#34;raw-input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;raw_input&lt;/h3&gt;

&lt;p&gt;The raw_input( ) function reads one line from the standard input and returns it as a string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a file test_input.py and write this:
str = raw_input(&#39;Enter your name&#39;)
print &#39;Hello&#39;,str
# Now run the file as python test_input.py and input your name.

Enter your nameMohit
Hello Mohit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty easy right? When you execute the file, it will prompt you to enter your name and print &amp;lsquo;Hello &lt;name&gt;&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;input&lt;/h3&gt;

&lt;p&gt;The input function is equivalent to raw_input, except that it assumes the input is a valid Python expression, evaluates and returns the result.
Take the previous file and replace raw_input by input and execute the code. Now enter this when prompted for input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str = input(&#39;Enter your name&#39;)
print &#39;Hello&#39;,str

Enter your name[x for x in range(10)]
Hello [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-i-o:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;File I/O&lt;/h2&gt;

&lt;p&gt;Until now you have been reading and writing to the standard input. Lets now perform the same function to the files. Now we will see how we can read and write to the files.&lt;/p&gt;

&lt;p&gt;##Opening Files:&lt;/p&gt;

&lt;p&gt;Files can be opened using python&amp;rsquo;s built-in open() function. This function creates a file object which we will use for performing operations on the file. It will become much clear when we look at a complete example. For now, just remember that we need to create a file object before performing any file I/O and try to remember the syntax.
Syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;f = open(file_name, access mode, encoding)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;file_name: The file name that you would like to perform your I/O operations on.
encoding: Encoding tells python what encoding scheme to use to convert the stream of bytes to text.
access_mode: This is the mode which determines if the file is to opened as read only,read-write, write only etc modes. The ways in which a file can be opened is mentioned below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;String&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Its Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;r&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file as read only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rb&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file as read only in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;r+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for reading and writing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rb+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for reading and writing in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;w&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;wb&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing only in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;w+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for both reading and writing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;wb+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing and reading in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending in binary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending and reading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ab+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending and reading in binary format&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;reading-and-writing:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Reading and Writing&lt;/h2&gt;

&lt;p&gt;Once we have created a file object we can perform many operations on the file object which, like all objects, has methods to take care of nitty gritty details and perform the operations on the file. We will now look at some of the attributes of the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-close:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.close()&lt;/h3&gt;

&lt;p&gt;This method will close the file that we have currently open. You should always call this method once you are done performing I/O operations on the file using the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-softspace:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.softspace&lt;/h3&gt;

&lt;p&gt;It returns a boolean indicating whether a space character needs to be printed before another value using the print statement. It is kind of a read-write attribute that is used internally by the print statement to keep track of its own state and not by the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-flush:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.flush()&lt;/h3&gt;

&lt;p&gt;This method requests that the file object&amp;rsquo;s buffer to be written out to the operating system, ensuring that the file (as seen by the system) has exactly the contents that the file_object has. (By default python uses operating systems buffer so you don&amp;rsquo;t have to call this, unless you configure it otherwise. It is mainly used for tty devices.)&lt;/p&gt;

&lt;h3 id=&#34;file-object-isatty:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.isatty()&lt;/h3&gt;

&lt;p&gt;This method returns true if the file_object is an interactive terminal (tty is a special device that lets people who are deaf, hard of hearing or speech-impaired to communicate)&lt;/p&gt;

&lt;h3 id=&#34;file-object-mode:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.mode&lt;/h3&gt;

&lt;p&gt;This is a read-only attribute that is the value of the mode string used in the open call that created the file_object&lt;/p&gt;

&lt;h3 id=&#34;file-object-name:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.name&lt;/h3&gt;

&lt;p&gt;This is also a read-only attribute that is the value of the filename string used in the open call that created the file_object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-readline-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.readline([size])&lt;/h3&gt;

&lt;p&gt;This method reads strings from the file till it reaches new line character ( &amp;lsquo;\n&amp;rsquo; ) if the &amp;lsquo;size&amp;rsquo; parameter is empty. If an integer is provided as size parameter, then this method returns string of length size.&lt;/p&gt;

&lt;h3 id=&#34;file-object-readlines-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.readlines([size])&lt;/h3&gt;

&lt;p&gt;This method basically calls the readline() method till it reaches the end of file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-seek-pos-how-0:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.seek(pos, how=0)&lt;/h3&gt;

&lt;p&gt;Sets the file_object&amp;rsquo;s current position to the signed integer byte offset by pos from the reference point. The how parameter, which is 0 by default, indicates the reference point. how=1 is the reference of current position and how=2 is the reference of the end of the file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-tell:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.tell()&lt;/h3&gt;

&lt;p&gt;This method tells the current file position when you are reading from or writing to a file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-truncate-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.truncate([size])&lt;/h3&gt;

&lt;p&gt;This method truncates the file to be at most of size size.  If you don&amp;rsquo;t mention the size it takes the size from f.tell() method as the new size.&lt;/p&gt;

&lt;h3 id=&#34;file-object-write-str:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.write(str)&lt;/h3&gt;

&lt;p&gt;Writes the bytes of string str to the file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-writelines-lst:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.writelines(lst)&lt;/h3&gt;

&lt;p&gt;Writes sequence of strings to file. No new line is added automatically.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a file and perform some interesting I/O operations on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a .py file or follow along in Ipython terminal
try:
    f = open(&#39;test.txt&#39;, &#39;w&#39;)  # If there is a test.txt file in your current location, this step will overwrite it. So change file_name if you want
    print &#39;Cursor position in the file before writing: &#39;,f.tell()
    f.write(&#39;Hello World&#39;)
    print &#39;Cursor position after writing: &#39;,f.tell()
except IOError, e:
    print &#39;Error performing I/O operations on the file: &#39;,e
finally:
    if f:  # If file_object exists,
        f.close()

Cursor position in the file before writing:  0
Cursor position after writing:  11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yaay! You created your first file and wrote &amp;lsquo;Hello world&amp;rsquo; to it! Lets edit it now!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;test.txt&#39;, &#39;r+&#39;)
    print f.readline()
    f.writelines([&#39;\n&#39;, &#39;This is&#39;, &#39;Python&#39;])
    f.seek(0)  # Go to the starting of file
    print f.readlines()  # Read all the lines in the file.
    f.truncate(20)
    f.seek(0)
    print &#39;After truncate: &#39;,f.readlines()
except IOError, e:
    print &#39;Error performing I/O on file &#39;,e
finally:
    if f:
        f.close()

Hello World
[&#39;Hello World\n&#39;, &#39;This isPython&#39;]
After truncate:  [&#39;Hello World\n&#39;, &#39;This isP&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! So now we opened the file, read its contents, added multiple strings, truncated and closed it! This covers pretty much everything that you will need when you are working with almost any kind of file that has some text.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Exercise:&lt;/h2&gt;

&lt;p&gt;Create a binary file and write &amp;lsquo;Hello World&amp;rsquo; in it. Now create an ascii file and add the same text to it. Read both the files. Is there any difference between the two?&lt;/p&gt;

&lt;h2 id=&#34;csv-comma-separated-values:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;CSV (Comma Separated Values)&lt;/h2&gt;

&lt;p&gt;In the above examples, we saw how to perform read-write operations on a file. This is generally used for files that have multiple lines of strings. However if you have data like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Data1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Data2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Data3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Example1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Example2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Example3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is stored in a file with this format:&lt;/p&gt;

&lt;p&gt;Data1, Data2, Data3&lt;/p&gt;

&lt;p&gt;Example1, Example2, Example3&lt;/p&gt;

&lt;p&gt;As can be seen in the above example, each row is a new line, and each column is separated with a comma. Many online services such as an online bank allow its users to export tabular data from the website into a CSV file. These files can then be opened and viewed offline using a Spreadsheet program such as Microsoft Excel.&lt;/p&gt;

&lt;h3 id=&#34;so-why-do-we-need-such-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;So why do we need such CSV files?&lt;/h3&gt;

&lt;p&gt;There are two primary reasons for the existence of this format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSV are plain-text files which makes them easy to store and read from&lt;/li&gt;
&lt;li&gt;CSV files are stored as sequence of human readable characters, thus making it easy for humans to interpret the data without requiring any format conversion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSV is a delimited text file that uses a comma to separate values (many implementations of CSV import/export tools allow other separators to be used). Simple CSV implementations may prohibit field values that contain a comma or other special characters such as newlines. More sophisticated CSV implementations permit them, often by requiring &amp;ldquo; (double quote) characters around values that contain reserved characters (such as commas, double quotes, or less commonly, newlines). Embedded double quote characters may then be represented by a pair of consecutive double quotes, or by prefixing an escape character such as a backslash (for example in Sybase Central). The name &amp;ldquo;CSV&amp;rdquo; indicates the use of the comma to separate data fields. Nevertheless, the term &amp;ldquo;CSV&amp;rdquo; is widely used to refer a large family of formats, which differ in many ways. Some implementations allow or require single or double quotation marks around some or all fields; and some reserve the very first record as a header containing a list of field names. An official standard for the CSV file format does not exist.&lt;/p&gt;

&lt;p&gt;Download a Sample* CSV file from &lt;a href=&#34;https://newclasses.nyu.edu/access/content/group/9ce294e5-cc8b-44f8-963b-8160554a987f/Python%20Lab/Week3/Python%20File%20I_O/sample.csv&#34; title=&#34;Sample CSV&#34;&gt;&lt;code&gt;HERE&lt;/code&gt;&lt;/a&gt; and save it in your current folder location.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The data generated is completely random using a third party website &lt;a href=&#34;https://www.fakenamegenerator.com&#34; title=&#34;FakeName Generator&#34;&gt;&lt;code&gt;https://www.fakenamegenerator.com&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;reading-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Reading CSV files&lt;/h3&gt;

&lt;p&gt;reader() can be used to create an object that is used to read the data from a csv file. The reader can be used as an iterator to process the rows of the file in order. Lets take a look at an example:
Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You can create a new file or follow along in Ipython terminal
row = []
import csv  # Importing csv module
try:
    f = open(&#39;sample.csv&#39;, &#39;r&#39;)
    reader = csv.reader(f)
    for i in reader:
        row.append(i)
except IOError, e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()

row[0:10]




[[&#39;\xef\xbb\xbfGivenName&#39;, &#39;Gender&#39;, &#39;Title&#39;, &#39;Occupation&#39;, &#39;City&#39;],
 [&#39;Nicholas&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Speech writer&#39;, &#39;Plantation&#39;],
 [&#39;Jeanette&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Surfacing equipment operator&#39;, &#39;Chicago&#39;],
 [&#39;David&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Engineering geologist&#39;, &#39;Worthington&#39;],
 [&#39;Susan&#39;,
  &#39;female&#39;,
  &#39;Ms.&#39;,
  &#39;Cutting, punching, and press machine tender&#39;,
  &#39;Fulton&#39;],
 [&#39;Dennis&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Construction millwright&#39;, &#39;Fargo&#39;],
 [&#39;Susan&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Private investigator&#39;, &#39;Blackwood&#39;],
 [&#39;John&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Chemical engineering technician&#39;, &#39;Marietta&#39;],
 [&#39;Damon&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Loan closer&#39;, &#39;Mansfield&#39;],
 [&#39;George&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Public defender&#39;, &#39;Minneapolis&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reader() is a method available in csv package so the first line is importing the csv package. The reader() method takes sequence or an iterable file object, and returns an iterator. As the csv file is being read, each row of the input data is converted to a list of strings. The parser handles the line breaks embedded within the strings which is why using row is not always the output that you might get when taking a line input from file.&lt;/p&gt;

&lt;h3 id=&#34;writing-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Writing CSV files&lt;/h3&gt;

&lt;p&gt;Writing csv files is just as easy as reading them. To write to a csv file, we can use writer() method to create an object for writing and then iterate over the rows using csv&amp;rsquo;s writerow() method to write it.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import csv
try:
    f = open(&#39;test.csv&#39;, &#39;w&#39;)
    writer = csv.writer(f)
    for i in range(10):
        writer.writerow((i, i+1, i+2))
except IOError,e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try opening the file just like we did before.&lt;/p&gt;

&lt;h3 id=&#34;using-field-names:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Using Field Names&lt;/h3&gt;

&lt;p&gt;In addition to working with sequences or data, the csv module includes classes for working with rows as dictionaries so that the fields can be named. The DictReader and DictWriter classes translate rows to dictionaries instead of lists. Keys for the dictionary can be passed in, or inferred from the first row in the input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;sample.csv&#39;, &#39;r&#39;)
    reader = csv.DictReader(f)
    for i in reader:
        row.append(i)
except IOError, e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()

row[0:10]




[[&#39;\xef\xbb\xbfGivenName&#39;, &#39;Gender&#39;, &#39;Title&#39;, &#39;Occupation&#39;, &#39;City&#39;],
 [&#39;Nicholas&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Speech writer&#39;, &#39;Plantation&#39;],
 [&#39;Jeanette&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Surfacing equipment operator&#39;, &#39;Chicago&#39;],
 [&#39;David&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Engineering geologist&#39;, &#39;Worthington&#39;],
 [&#39;Susan&#39;,
  &#39;female&#39;,
  &#39;Ms.&#39;,
  &#39;Cutting, punching, and press machine tender&#39;,
  &#39;Fulton&#39;],
 [&#39;Dennis&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Construction millwright&#39;, &#39;Fargo&#39;],
 [&#39;Susan&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Private investigator&#39;, &#39;Blackwood&#39;],
 [&#39;John&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Chemical engineering technician&#39;, &#39;Marietta&#39;],
 [&#39;Damon&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Loan closer&#39;, &#39;Mansfield&#39;],
 [&#39;George&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Public defender&#39;, &#39;Minneapolis&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this and see the difference in the output.&lt;/p&gt;

&lt;p&gt;Similar to DictReader, we also have DictWriter which needs to be given a list of field names so it know how to order the columns in the output file.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import csv
try:
    fieldnm = (&#39;Title1&#39;, &#39;Title2&#39;, &#39;Title3&#39;)
    f = open(&#39;test.csv&#39;, &#39;w&#39;)
    writer = csv.DictWriter(f, fieldnames=fieldnm)
    headers = dict((i, i) for i in fieldnm)
    for i in range(10):
        writer.writerow({&#39;Title1&#39;:i, &#39;Title2&#39;:i+1, &#39;Title3&#39;:i+2})
except IOError,e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique is good when the filesize (or the number of columns) is not very big. When the row numbers starts scaling up, the list that is created by the reader() method starts growing in memory and makes the process very very slow.
We will generally be dealing with the files that have over a million row entries and this method is not the most efficient way of dealing with such files. To handle such &amp;lsquo;Big Data&amp;rsquo;, we will study a python package called Numpy in the next week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_ImportingModules</title>
      <link>http://localhost:1313/Python_Tutorials/Python_ImportingModules/</link>
      <pubDate>Mon, 22 Jun 2015 09:06:37 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_ImportingModules/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Importing Modules and Packages&lt;/h1&gt;

&lt;p&gt;If you quit the ipython terminal or python interpreter, the functions and variables are lost. What if you want to access them in your other programs or at a later point of time?(You don&amp;rsquo;t expect to complete your projects in a day do you?) Therefore you are better of using a text editor to prepare the input for the interpreter and running it with that file as input. This file is known as script. Now, you might have written several programs and some of them require a function that you wrote in a script for some other project. You want to use that handy function! There is no point in Ctrl+C and Ctrl+V for all these programs. To support this, python has a way to use these functions or definitions by using import.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-module:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;What is a Module?&lt;/h2&gt;

&lt;p&gt;A module is a python file that (generally) has only definitions of variables, functions and classes. It can also have executable statements if you&amp;rsquo;d like. A module allows you to logically organize your python code. Grouping related code in a module makes the code easier to understand and use. The module can have components that are imported from other modules.&lt;/p&gt;

&lt;h2 id=&#34;import-statement:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;Import Statement&lt;/h2&gt;

&lt;p&gt;It is customary (and we have followed this in a couple of examples) to place all the import statements at the beginning of the module. Let&amp;rsquo;s create a python file with functions that will perform addition, subtraction, multiplication and division of two numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a file by name my_calc.py in your current directory and write this code:
def mul(a ,b):
    return a * b

def div(a, b):
    return a / b

def add(a, b):
    return a + b

def sub(a, b):
    return a - b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we shall import the file and just use the functions directly. Fire up your ipython terminals in the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import my_calc  # Import our above module


sum = my_calc.add(123, 456)  # Use add function


print &#39;Sum = &#39;,sum

Sum =  579
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use any python source file as a module by executing an import statement in some other python source file, just like we did. A module is loaded only once regardless of the number of times it is imported. So if you made any error in writing the file/ module that you are trying to import in ipython session, you will have to reload the module in the current ipython session.&lt;/p&gt;

&lt;p&gt;When the python interpreter encounters an import statement it looks for the module name in the built-in modules first. if not found, it then searches for a file by the module&amp;rsquo;s name in a list of directories that are given by variable PYTHONPATH (it is an environment variable which is basically a list of directory names) and it looks for the file in the current directory. If it fails everywhere then it goes and looks on the default path. On linux/ unix the default path is normally /usr/local/lib/python&lt;/p&gt;

&lt;h2 id=&#34;from-import:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;from .. import ..&lt;/h2&gt;

&lt;p&gt;To preserve your current namespace, python&amp;rsquo;s from statement let&amp;rsquo;s you import only specific attributes to your current namespace. Let&amp;rsquo;s take a look at how this works. We will use our same my_calc.py file as a file that we are importing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from my_calc import div


division = div (6, 7.)
print &#39;Division = &#39;,division

Division =  0.857142857143



# Let&#39;s print only upto 2 decimal places.. Remember how to do it?
divison = div(6,7.)
print &#39;Division = {0:.2f}&#39;.format(divison)

Division = 0.86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using for statement does not import the entire file (or module) into the current namespace, it just introduced the item div from the module into our namespace. You might be wondering what if your file has many functions, you will go crazy writing so many import statements! Well.. it is also possible to import all names or definitions from a module into the current namespace by using for statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from my_calc import *  # * means everything/ all


division = div (6, 7.)


print &#39;Division = &#39;,division

Division =  0.857142857143
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;Exercise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using python&amp;rsquo;s built-in module sys, try to find the path for directories in which python will look for the modules. (Hint: Use Ipython and make use of tab completions and ? )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find a way to reload the module in the current ipython session.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find out the names or definitions that you have defined currently. Next, find the names or definitions of the module that you are trying to import.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_Challenge1</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Challenge1/</link>
      <pubDate>Sat, 20 Jun 2015 12:12:15 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Challenge1/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Lab Challenge 1&lt;/h1&gt;

&lt;p&gt;##Question 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array.
The element value in the i-th row and j-th column of the array should be &lt;code&gt;i*j&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: i=0,1.., X-1; j=0,1,..,Y-1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;example:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]&lt;/p&gt;

&lt;h4 id=&#34;hints:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question,
it should be assumed to be a console input in a comma-separated form.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;question2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Question2:&lt;/h2&gt;

&lt;p&gt;** Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.**&lt;/p&gt;

&lt;h4 id=&#34;example-1:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example:&lt;/h4&gt;

&lt;p&gt;Suppose the following input is supplied to the program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello world and practice makes perfect and hello world again&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, the output should be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;again and hello makes perfect practice world&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-1:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question, it should be assumed to be a console input.
We use set container to remove duplicated data automatically and then use sorted() to sort the data.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;question-3:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Question 3:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example:&lt;/h4&gt;

&lt;p&gt;Suppose the following input is supplied to the program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, the output should be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UPPER CASE 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LOWER CASE 9&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question, it should be assumed to be a console input.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Python_Functions</title>
      <link>http://localhost:1313/Python_Tutorials/Python_Functions/</link>
      <pubDate>Wed, 17 Jun 2015 20:02:58 -0400</pubDate>
      
      <guid>http://localhost:1313/Python_Tutorials/Python_Functions/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Functions&lt;/h1&gt;

&lt;p&gt;Imagine that you have to open a file, read the contents of the file and close it. Pretty trivial, right? We did that in the exception handling. Now imagine that you have to read ten files, print their output and close it. Now you don&amp;rsquo;t want to sit there and type file i/o operations for every file. what if there are over 50 files and you have to concatenate them to a single file? This is where the functions come in. A function is a block of organized and reusable code in a program that performs a specific task which can be incorporated into a larger program. The advantages of using functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reuse of code&lt;/li&gt;
&lt;li&gt;Reducing duplication of the code&lt;/li&gt;
&lt;li&gt;Improving readability and reducing complexity of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two basic types of functions: Built-in functions and user defined functions. We have been using built-in functions for quite some time without actually understanding how a function works. This is the beauty of python. According to Guido van Rossum, all objects in python are first class citizens. Meaning all the objects (like function, strings, integers etc) have equal status. That is they can be assigned to variables, placed in lists, stored in dictionaries, passed as arguments and so forth. We have been doing this the whole time, right? Now lets see how you can create your own functions and call them in your code.&lt;/p&gt;

&lt;h2 id=&#34;defining-functions:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Defining Functions&lt;/h2&gt;

&lt;p&gt;A function is defined using the def keyword followed by the name of the function. The parameters or the arguments should be placed within the parentheses followed by the function name. The code block within every function starts with a colon and should be indented.&lt;/p&gt;

&lt;p&gt;From here on, I might ask you to write the piece of code using your favorite text editor and execute the code.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create test_func.py file and write the following code
&#39;&#39;&#39;
Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions
&#39;&#39;&#39;
def mul(a, b):  # defining a function
    print a,&#39;*&#39;,b,&#39;=&#39;,a * b

def info():  # defining a function
    return __doc__

print info()
mul(4, 5)


Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions

4 * 5 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the above file and execute it: python test_func.py and you should get an output that looks like above.&lt;/p&gt;

&lt;p&gt;In the above code we have used a keyword return.  A function may or may not have a return value. The job of return is just to return the expression/ object to the the calling function.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Try to execute this code. If there is an error, what do you think caused it? Try rectifying the error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Create test_func.py file and write the following code&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions
&#39;&#39;&#39;

def mul(a, b):
    print info()  # Calling a function from another function
    print a,&#39;*&#39;,b,&#39;=&#39;,a * b

def info():
    return __doc__
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calling-a-function:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Calling a function&lt;/h2&gt;

&lt;p&gt;Defining a function only gives it a name, specifies the parameters and structures the blocks of code but unless you call the function, the function is never executed. Just like above example, once the basic structure of a function is finalized, the function can be called by just using the function name followed by the arguments/ parameters enclosed in parenthesis. You can also call the function from another function. There are two ways of passing the parameters to the functions.&lt;/p&gt;

&lt;h3 id=&#34;pass-by-reference:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Pass by Reference&lt;/h3&gt;

&lt;p&gt;All the parameters in the python language are passed by reference. It means if you change what a parameter refers to within a function, the change also reflects back in the calling function. Let&amp;rsquo;s take a look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def append_list(list1):
    list1.append(99)


l1 = [1, 2, 3, 4, 5]
append_list(l1)
l1




[1, 2, 3, 4, 5, 99]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are maintaining reference of the passed object and appending values to the same object thus modifying the actual object.&lt;/p&gt;

&lt;h2 id=&#34;pass-by-value:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Pass by Value&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;def remove_list(list1):
    del(list1)
    list1 = [21, 22, 23, 24, 25]


l1 = [1, 2, 3, 4, 5]
remove_list(l1)
l1




[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above example we can observe that the parameter list1 is local to the function and modifying the list1 does not affect l1. The function basically accomplishes nothing.&lt;/p&gt;

&lt;h2 id=&#34;function-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Function Arguments&lt;/h2&gt;

&lt;p&gt;A function can be called by using following types of formal arguments&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Required arguments&lt;/li&gt;
&lt;li&gt;Keyword arguments&lt;/li&gt;
&lt;li&gt;Default arguments&lt;/li&gt;
&lt;li&gt;Variable-length arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;required-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Required Arguments:&lt;/h3&gt;

&lt;p&gt;Required arguments are passed to a function in correct positional order. The number of arguments being passed should be equal to the number or arguments expected by the function that is defined. Let&amp;rsquo;s take a look at the example:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Lame example
def info(name, sem):
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)


info(&#39;Mohit&#39;, &#39;2&#39;)

My name is:  Mohit
This is semester 2



info(2, &#39;Mohit&#39;)

My name is:  2
This is semester


---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-8-f692458a13af&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 info(2, &#39;Mohit&#39;)


&amp;lt;ipython-input-6-32fe472dcf83&amp;gt; in info(name, sem)
      2 def info(name, sem):
      3     print &#39;My name is: &#39;,name
----&amp;gt; 4     print &#39;This is semester&#39;,int(sem)


ValueError: invalid literal for int() with base 10: &#39;Mohit&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keyword-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Keyword Arguments:&lt;/h3&gt;

&lt;p&gt;Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name. This allows you to skip the arguments or place them out of order because python&amp;rsquo;s interpreter will be able to match the values with parameters. Let&amp;rsquo;s modify the way we are calling the above function.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def info(name, sem):
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)





info(sem = 2,  name = &#39;Mohit&#39;)  # The order of the parameter does not matter.

My name is:  Mohit
This is semester 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Default Arguments:&lt;/h3&gt;

&lt;p&gt;A default argument is an argument that assumes a default value if the value is not provided when the function is called. Let&amp;rsquo;s modify the above example and specify sem = 2 by default.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def info(name, sem = 2):  # Default argument for semester is 2
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)


info(&#39;Mohit&#39;, 2)

My name is:  Mohit
This is semester 2



info(&#39;Jack&#39;)  # Not providing second argument.

My name is:  Jack
This is semester 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;variable-length-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Variable Length Arguments:&lt;/h3&gt;

&lt;p&gt;At some point, you may need to process the function for more than the arguments that you specified when you defined the function. These arguments can be of variable length and are not named in the function definition, unlike required and default arguments. So how do you handle this? Let&amp;rsquo;s take a look at another example:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def names(course, *names):
    print &#39;Name of course: &#39;,course
    print &#39;Name of students in the course:&#39;
    for name in names:
        print name


names(&#39;Python&#39;, &#39;Jim&#39;, &#39;Jack&#39;, &#39;Mat&#39;)

Name of course:  Python
Name of students in the course:
Jim
Jack
Mat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An asterisk (*) is placed before the variable name that holds the values of all non keyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call.&lt;/p&gt;

&lt;h2 id=&#34;anonymous-functions:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Anonymous Functions&lt;/h2&gt;

&lt;p&gt;Anonymous functions do not have a name! They are not declared in the standard manner using the def keyword. To create an anonymous function you can use lambda keyword. They are part of the functional paradigm incorporated in python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda forms can take any number of arguments but they return just one value in the form of an expression. They cannot contain commands or multiple expressions.&lt;/li&gt;
&lt;li&gt;Lambda functions have their own local namespace (just like regular functions) and cannot access variables other than those in their parameter list or those in the global namespace.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lambda function cannot be a direct call to print function.
Example:&lt;/p&gt;

&lt;p&gt;mul = lambda a, b: a*b&lt;/p&gt;

&lt;p&gt;print mul(4, 5)&lt;/p&gt;

&lt;p&gt;20&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>