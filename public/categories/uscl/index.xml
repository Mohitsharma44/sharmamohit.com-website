<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uscl on Mohit Sharma</title>
    <link>http://sharmamohit.com/categories/uscl/</link>
    <description>Recent content in Uscl on Mohit Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jul 2015 21:10:08 -0400</lastBuildDate>
    <atom:link href="http://sharmamohit.com/categories/uscl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python_Numpy</title>
      <link>http://sharmamohit.com/USCL/Python_Numpy/</link>
      <pubDate>Mon, 06 Jul 2015 21:10:08 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Numpy/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Numpy&lt;/h1&gt;

&lt;p&gt;NumPy (Numerical Python) is an opensource library for scientific computing in python. Numpy let&amp;rsquo;s you work with arrays and matrices in a natural way unlike lists where you have to loop through individual elements to perform any numerical operation.The methods in numpy are designed with high performance in mind. Numpy arrays are stored more efficiently than an equivalent data structure in python such as lists and arrays. This especially pays off when you are using really large arrays (large data sets). Major portion of numpy is written in C and thus the computations are faster than the pure python code. Numpy actually used to be a part of major scientific package called SciPy but eventually numpy was separated and now scipy uses numpy for its major tasks.
So Let&amp;rsquo;s jump into NumPy!&lt;/p&gt;

&lt;p&gt;##Basics&lt;/p&gt;

&lt;p&gt;Numpy&amp;rsquo;s main object is the homogeneous multidimensional array. Numpy&amp;rsquo;s array class is called ndarray. It is a table of numbers, indexed by a tuple of positive integers. In numpy dimensions are called as axes. The number of axes is known as rank. Arrays in numpy are similar to lists in Python except that numpy has an added requirement that all the elements must be numbers (obviously, its NumPy!). Lets look at how to create numpy arrays:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np
a = np.array([1, 2, 3, 4], float)  # Single dimensional Array
print &#39;Type: &#39;,type(a)
print &#39;Shape: &#39;,a.shape
print &#39;Dimension: &#39;,a.ndim
print &#39;Itemsize: &#39;,a.itemsize
print &#39;Size: &#39;,a.size

Type:  &amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
Shape:  (4,)
Dimension:  1
Itemsize:  8
Size:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method array, takes two arguments: the list to be converted into the array and the datatype of &lt;strong&gt;every&lt;/strong&gt; member of the list. There are many attributes of ndarray and by now you should be able to understand how to access those attributes and get help for them. In the above example, I have mentioned a few more important ones. Let&amp;rsquo;s understand what they mean.&lt;/p&gt;

&lt;p&gt;###ndarray.ndim&lt;/p&gt;

&lt;p&gt;It is the number of axes or dimensions of the array.&lt;/p&gt;

&lt;p&gt;###ndarray.shape&lt;/p&gt;

&lt;p&gt;It is the dimension of the array. This is a tuple of integers indicating the size of the array in each dimension. For matrix with n rows and m columns, the shape will be (m, n). The length of the shape tuple is therefore the rank, or number of dimensions, ndim&lt;/p&gt;

&lt;p&gt;###ndarray.dtype&lt;/p&gt;

&lt;p&gt;It is an object describing the type of the elements in the array. Remember that all the elements need to be of same datatype in a numpy array. Additionally numpy provides its own numpy.int16, numpy.int32, numpy.float64 and so on.&lt;/p&gt;

&lt;p&gt;###ndarray.itemsize&lt;/p&gt;

&lt;p&gt;The size in bytes of each element of the array. For example an array of elements of type float64 (above example) has itemsize of 64 / 8 = 64. While one complex32 has item size of 4 32 / 8.&lt;/p&gt;

&lt;p&gt;###ndarray.data&lt;/p&gt;

&lt;p&gt;This is the buffer containing the actual elements of the array. Normally this attribute is not used as numpy offers many fancy indexing facilities.&lt;/p&gt;

&lt;p&gt;##Numpy Datatypes&lt;/p&gt;

&lt;p&gt;Numpy supports a much greater variety of numerical types than Python does.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;Data type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;bool_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Boolean (True or False) stored as a byte&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Default integer type (same as C long; normally either int64 or int32)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;intc&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Identical to C int (normally int32 or int64)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;intp&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer used for indexing (same as C ssize_t; normally either int32 or int64)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Byte (-128 to 127)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-32768 to 32767)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-2147483648 to 2147483647)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;int64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Integer (-9223372036854775808 to 9223372036854775807)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 255)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 65535)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 4294967295)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;uint64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Unsigned integer (0 to 18446744073709551615)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Shorthand for float64.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Half precision float: sign bit, 5 bits exponent, 10 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Single precision float: sign bit, 8 bits exponent, 23 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;float64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Double precision float: sign bit, 11 bits exponent, 52 bits mantissa&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex_&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Shorthand for complex128.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Complex number, represented by two 32-bit floats (real and imaginary components)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;complex128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Complex number, represented by two 64-bit floats (real and imaginary components)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Try using these dataypes in your codes and see the difference&lt;/p&gt;

&lt;p&gt;##Array Creation&lt;/p&gt;

&lt;p&gt;There are many ways in which an array can be created, we just saw one in our example above. Let&amp;rsquo;s look at some other ways of creating arrays.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(5, dtype=float)
print &#39;\n arange() with float dtype: \n&#39;,a
b = np.arange(1, 6, 2, dtype=int)
print &#39;\n arange() with int dtype: \n&#39;,b  # \n will print new line
c = np.ones((2, 3), dtype=float)
print &#39;\n ones(): \n&#39;,c
d = np.zeros((2,3), dtype=float)
print &#39;\n zeros(): \n&#39;,d
e = np.empty((2, 4))
print &#39;\n Empty: \n&#39;,e  # Your output might be different..
f = np.ones_like(a)
print &#39;\n Ones_like(): \n&#39;,f
g = np.diag(a)
print &#39;\n Diagonal array: \n&#39;,g


 arange() with float dtype: 
[ 0.  1.  2.  3.  4.]

 arange() with int dtype: 
[1 3 5]

 ones(): 
[[ 1.  1.  1.]
 [ 1.  1.  1.]]

 zeros(): 
[[ 0.  0.  0.]
 [ 0.  0.  0.]]

 Empty: 
[[ -3.10503618e+231   1.73059848e-077   2.24228410e-314   6.93536013e-310]
 [  6.93536013e-310   2.92966904e-033   7.42620323e-091   7.26604178e-043]]

 Ones_like(): 
[ 1.  1.  1.  1.  1.]

 Diagonal array: 
[[ 0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.]
 [ 0.  0.  2.  0.  0.]
 [ 0.  0.  0.  3.  0.]
 [ 0.  0.  0.  0.  4.]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###np.arange()&lt;/p&gt;

&lt;p&gt;is the same as the range function that we used previously.&lt;/p&gt;

&lt;p&gt;###np.zeros() and np.ones()&lt;/p&gt;

&lt;p&gt;as the name suggests, generate new arrays of specified dimensions filled with these values. These are most commonly used functions to create new arrays.&lt;/p&gt;

&lt;p&gt;###np.empty()&lt;/p&gt;

&lt;p&gt;This function creates an array whose initial content is random and depends on the state of the memory. If not specified, the data type of the created array is float64&lt;/p&gt;

&lt;p&gt;###np.ones_like()  , np.zeros_like() and np.empty_like()&lt;/p&gt;

&lt;p&gt;These functions create a new array with the same dimensions and type as the existing one but with the values as either ones or zeros or random value.&lt;/p&gt;

&lt;p&gt;###np.diag()&lt;/p&gt;

&lt;p&gt;As the name suggests, this will construct a diagonal array&lt;/p&gt;

&lt;p&gt;##Printing Arrays&lt;/p&gt;

&lt;p&gt;As you must have observed from the above examples, Numpy displays the arrays in a similar way to nested lists but with the following layout:&lt;/p&gt;

&lt;p&gt;the last axis is printed from left to right
the second to last axis is printed from top to bottom.
the rest rest are also printed from top to bottom with each slice separated from the next by an empty line
Simply put, single dimensional array are printed as rows, bi dimensional and multi-dimensional are printed as matrices and as lists of matrices respectively. The examples will make it more clear.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &#39;\nSingle Dimensional: \n&#39;,np.arange(4)
print &#39;\nTwo Dimensional: \n&#39;,np.arange(6).reshape(2,3) # We will talk about reshape soon..!
print &#39;\nThree Dimensional: \n&#39;,np.arange(12).reshape(2,3,2)


Single Dimensional: 
[0 1 2 3]

Two Dimensional: 
[[0 1 2]
 [3 4 5]]

Three Dimensional: 
[[[ 0  1]
  [ 2  3]
  [ 4  5]]

 [[ 6  7]
  [ 8  9]
  [10 11]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Selecting elements from an array is a trivial process. Just like lists, we can obtain the elements of the array by using their index value. Give it a shot! We will talk in detail about indexing later.&lt;/p&gt;

&lt;p&gt;##Array Mathematics&lt;/p&gt;

&lt;p&gt;When standard mathematical operations are used with numpy arrays, they are applied on an element-by-element basis and a new array is created and filled with the result. This means that the arrays should be of same size when any mathematical operation is performed on them. Lets take a look at some examples:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.array([1, 2, 3, 4])
b = np.linspace(4, 16, num=4)

print &#39;\nb - a: \n&#39;, b-a
b = np.linspace(4, 16, num=3)

print &#39;\nb - a: \n&#39;, b-a


b - a: 
[  3.   6.   9.  12.]

b - a: 



---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-4-ec209d90aeb7&amp;gt; in &amp;lt;module&amp;gt;()
      5 b = np.linspace(4, 16, num=3)
      6 
----&amp;gt; 7 print &#39;\nb - a: \n&#39;, b-a


ValueError: operands could not be broadcast together with shapes (3,) (4,) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets now see these operations on multi-dimensional arrays&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(4).reshape(2,2)
print &#39;\na: \n&#39;,a
b = np.ones_like(a) * 2
print &#39;\nb: \n&#39;,b
print &#39;\na * b: \n&#39;,a * b  # This will perform element-wise multiplication
print &#39;\nDot Product: \n&#39;,np.dot(a, b)


a: 
[[0 1]
 [2 3]]

b: 
[[2 2]
 [2 2]]

a * b: 
[[0 2]
 [4 6]]

Dot Product: 
[[ 2  2]
 [10 10]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above operations have been performed on the two arrays with same datatype and so the result will have the same datatype as the operand arrays. However when you perform any operation on arrays with different datatypes, the type of the resulting array will correspond to the more general or precise one. This is also known as upcasting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.ones(5, dtype=&#39;int16&#39;)
b = np.linspace(3, 9, num=5)
print &#39;\nDtype of a: \n&#39;, a.dtype
print &#39;\nDtype of b: \n&#39;, b.dtype
c = a + b
print &#39;\nC: \n&#39;,c
print &#39;\nDtype of c: \n&#39;,c.dtype


Dtype of a: 
int16

Dtype of b: 
float64

C: 
[  4.    5.5   7.    8.5  10. ]

Dtype of c: 
float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many Unary operations, such as computing sum of the elements in the array or finding the element in the array that has the maximum value are implemented as methods of ndarray class.&lt;/p&gt;

&lt;p&gt;By default, these operations apply to the array as though it was a list of numbers, regardless of its shape. However by specifying the axis parameter you can apply an operation along the specified axis of an array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.random.random((4, 4))
print &#39;\na: \n&#39;,a
print &#39;\nSum: \n&#39;,np.sum(a)
print &#39;\nMinimum: \n&#39;,np.min(a)
print &#39;\nMaximum: \n&#39;,np.max(a)
print &#39;\nMinimum at axis=0: &#39;,a.min(axis=0)
print &#39;\nCumulative sum along each row: \n&#39;,a.cumsum(axis=1)


a: 
[[ 0.03393196  0.60967045  0.48575961  0.80389461]
 [ 0.45666937  0.1340573   0.77085133  0.1260247 ]
 [ 0.6278121   0.59825426  0.78261101  0.61532053]
 [ 0.3189249   0.01292406  0.2571509   0.79722091]]

Sum: 
7.43107798457

Minimum: 
0.0129240585016

Maximum: 
0.803894606649

Minimum at axis=0:  [ 0.03393196  0.01292406  0.2571509   0.1260247 ]

Cumulative sum along each row: 
[[ 0.03393196  0.64360241  1.12936202  1.93325662]
 [ 0.45666937  0.59072667  1.361578    1.4876027 ]
 [ 0.6278121   1.22606636  2.00867737  2.6239979 ]
 [ 0.3189249   0.33184896  0.58899986  1.38622077]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;universal-functions:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Universal Functions&lt;/h2&gt;

&lt;p&gt;Numpy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called as ufunc (for universal functions).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(0, 1, num=4)
print &#39;\nSin values: \n&#39;,np.sin(a)
print &#39;\nSquare Root of values: \n&#39;,np.sqrt(a)


Sin values: 
[ 0.          0.3271947   0.6183698   0.84147098]

Square Root of values: 
[ 0.          0.57735027  0.81649658  1.        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Slicing
Slicing extracts the portion of a sequence by specifying a lower and upper bound. The lower bound element is included, but the upper-bound element is not included in slicing. Just like lists, there is a third parameter step which means the strides to be taken between the elements. Let&amp;rsquo;s take a look at an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(5, 40, num=5)
print &#39;\nElements at index 0, 1, 2:\n&#39;,a[:3]
# Just like lists, even negative indexing works:
print &#39;\nElements at index 0, 2, 4:\n&#39;,a[-5:5:2]


Elements at index 0, 1, 2:
[  5.    13.75  22.5 ]

Elements at index 0, 2, 4:
[  5.   22.5  40. ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For multidimensional array, you specify in rows, columns format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.linspace(5, 40, num=8).reshape(2,4)
print &#39;\nfirst row and second column: \n&#39;,a[1,2]
print &#39;\n All elements from second column: \n&#39;,a[:,2]


first row and second column: 
35.0

 All elements from second column: 
[ 15.  35.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slices are references to memory in the original array. Changing the values in a slice also changes the original array&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(5)
b = a[3:5]  # last two elements of a
print &#39;\nBefore changing b[0], b[0]: \n&#39;,b[0]
b[0] = 99  # Indirectly changing second last element of a too!
print &#39;\nAfter changing b[0], a: \n&#39;,a


Before changing b[0], b[0]: 
3

After changing b[0], a: 
[ 0  1  2 99  4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fancy-indexing:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Fancy Indexing&lt;/h2&gt;

&lt;p&gt;Numpy offers more indexing facilities than regular Python sequences. In addition to indexing by integers and slices, as we saw before, arrays can be indexed by arrays of integers and arrays of booleans&lt;/p&gt;

&lt;p&gt;###Indexing with Arrays of Indices&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ind = None
ind1 = None
a = np.arange(12)**2
print &#39;\nArray a: \n&#39;,a
# Taking array of indices:
ind = np.random.random_integers(2, 10, size=(10,))
print &#39;\nIndices: \n&#39;,ind
print &#39;\nArray of elements at pos ind: \n&#39;,a[ind]
ind1 = np.random.random_integers(2, 8, size=(3,4))
print &#39;\nIndices1: \n&#39;,ind1
print &#39;\nArray of elements at pos ind1: \n&#39;,a[ind1]


Array a: 
[  0   1   4   9  16  25  36  49  64  81 100 121]

Indices: 
[10  9  9  7  6  3  4 10  4  9]

Array of elements at pos ind: 
[100  81  81  49  36   9  16 100  16  81]

Indices1: 
[[7 4 4 8]
 [2 6 8 7]
 [3 7 3 2]]

Array of elements at pos ind1: 
[[49 16 16 64]
 [ 4 36 64 49]
 [ 9 49  9  4]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the indexed array is multidimensional, a single array of indices refers to the first dimension of a. Though we can provide indexes for more than one dimension, the indices for each dimension must have the same shape. The following example will make it much clear.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(20).reshape(4,5)
print &#39;\nArray: \n&#39;,a
ind1 = np.arange(4).reshape(2,2)
print &#39;\nIndex1: \n&#39;,ind1
ind2 = np.random.random_integers(1, 5, size=(2,2))
print &#39;\nIndex2: \n&#39;,ind2
# Remember ind1 and ind2 should be of same shape
print &#39;\na[ind1, ind2]: \n&#39;,a[ind1, ind2]
print &#39;\na[:,ind2]: \n&#39;,a[:,ind2]


Array: 
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]

Index1: 
[[0 1]
 [2 3]]

Index2: 
[[3 3]
 [1 1]]

a[ind1, ind2]: 
[[ 3  8]
 [11 16]]

a[:,ind2]: 
[[[ 3  3]
  [ 1  1]]

 [[ 8  8]
  [ 6  6]]

 [[13 13]
  [11 11]]

 [[18 18]
  [16 16]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indexing with arrays is also used in search for the maximum value of time-dependent series. Lets take a look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = np.linspace(10, 150, 7) # create fake timescale
data = np.sin(np.arange(25)).reshape(5,5) # Generate fake data
ind = data.argmax(axis=0)
max_t = t[ind]
max_data = data[ind, xrange(data.shape[1])]
print &#39;\nMaximum Time: \n&#39;,max_t
print &#39;\nData at that maximum time: \n&#39;,data.max(axis=0)


Maximum Time: 
[ 103.33333333   10.           10.           33.33333333   56.66666667]

Data at that maximum time: 
[ 0.91294525  0.84147098  0.90929743  0.98935825  0.99060736]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use indexing with arrays as a target to assign to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(10)
a[[1, 3, 5, 9]] = 0
print &#39;\na: \n&#39;,a


a: 
[0 0 2 0 4 0 6 7 8 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Indexing with Boolean Arrays
When we index arrays with arrays of indices, we aare providing a list of indices. With boolean indices, we explicitly chose the items in the array that we want and the one&amp;rsquo;s we dont. Lets take a look at a quick example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(16).reshape(2,2,4)
# Now lets select the indices whose value is greater than lets say 10
b = a &amp;gt; 10
print &#39;\nElements with values &amp;gt; 10: \n&#39;,a[b]


Elements with values &amp;gt; 10: 
[11 12 13 14 15]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These come in very handy when we are working with things like thresholding where we can assign all values greater than the threshold be 0 or set them to threshold value.&lt;/p&gt;

&lt;h2 id=&#34;tricks:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Tricks&lt;/h2&gt;

&lt;h3 id=&#34;automatic-reshaping:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Automatic Reshaping&lt;/h3&gt;

&lt;p&gt;To change the dimensions of an array, you can omit one of the sizes which will then be deduced automatically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = np.arange(30)
a.shape = 2,-1,3  # -1 means &amp;quot;whatever is needed&amp;quot;
a.shape




(2, 5, 3)




a




array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11],
        [12, 13, 14]],

       [[15, 16, 17],
        [18, 19, 20],
        [21, 22, 23],
        [24, 25, 26],
        [27, 28, 29]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vector-stacking:1508fc5289333d12aa95e9869f8fa520&#34;&gt;Vector Stacking&lt;/h3&gt;

&lt;p&gt;How do we construct a 2D array from a list of equally-sized row vectors? In MATLAB this is quite easy: if x and y are two vectors of the same length you only need do m=[x;y]. In NumPy this works via the functions column_stack, dstack, hstack and vstack, depending on the dimension in which the stacking is to be done. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = np.arange(0,10,2)  # x=([0,2,4,6,8])
y = np.arange(5)  # y=([0,1,2,3,4])
m = np.vstack([x,y])
xy = np.hstack([x,y])


m




array([[0, 2, 4, 6, 8],
       [0, 1, 2, 3, 4]])




xy




array([0, 2, 4, 6, 8, 0, 1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;i-would-also-encourage-you-to-check-out-some-numpy-examples-http-wiki-scipy-org-numpy-example-list-with-doc-numpy-examples:1508fc5289333d12aa95e9869f8fa520&#34;&gt;I would also encourage you to check out some &lt;em&gt;[&lt;code&gt;numpy examples&lt;/code&gt;](&amp;lsquo;&lt;a href=&#34;http://wiki.scipy.org/Numpy_Example_List_With_Doc&#39;&#34;&gt;http://wiki.scipy.org/Numpy_Example_List_With_Doc&#39;&lt;/a&gt; &amp;ldquo;Numpy Examples&amp;rdquo;)&lt;/em&gt;&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python_Dictionaries</title>
      <link>http://sharmamohit.com/USCL/Python_Dictionaries/</link>
      <pubDate>Mon, 06 Jul 2015 15:01:20 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Dictionaries/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Dictionaries&lt;/h1&gt;

&lt;p&gt;A dictionary is a container of key-value pairs. Just like lists, python dictionaries are mutable and can contain mixed types, however the key in the dictionary is immutable just like strings or numbers and are unique within a dictionary. Python dictionaries are also known as hash tables in other programming languages. Each key is separated from its value by a colon (:) and just like lists the items are separated by commas and thre whole thing is enclosed in curly braces.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student




{&#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;, &#39;Name&#39;: &#39;John&#39;}




type(student)




dict




states = {}  # Creating empty dictionary


states[&#39;AL&#39;] = &#39;Alabama&#39;  # Keys are inside square brackets and values on the right side of assignment


states[&#39;NY&#39;] = &#39;New York&#39;


states




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fromkeys:84dcac346e67782f4a3216af8d53f825&#34;&gt;fromkeys( )&lt;/h3&gt;

&lt;p&gt;The fromkeys() method creates a new dictionary from a list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_list = (&#39;AL&#39;, &#39;NY&#39;)
states_dict = {}.fromkeys(states_list, 0)  # Instead of 0 you can leave the field empty
states_dict[&#39;AL&#39;] = &#39;Alabama&#39;
states_dict[&#39;NY&#39;] = &#39;New York&#39;
states_dict




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accessing-dictionary-items:84dcac346e67782f4a3216af8d53f825&#34;&gt;Accessing Dictionary Items:&lt;/h2&gt;

&lt;p&gt;There are various ways of accessing elements of dictionary. Best way to understand them are through the examples.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student[&#39;Name&#39;]




&#39;John&#39;




student.get(&#39;Course&#39;, &#39;Not Found&#39;)  # If key is in Dictionary, it will return the value




&#39;Python&#39;




student.get(&#39;Location&#39;, &#39;Not Found&#39;)  # If key is not found, it will return second parameter of argument




&#39;Not Found&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Updating Dictionary:&lt;/h2&gt;

&lt;p&gt;The dictionary can be updated by adding a new entry or a new key-value pair, modifying existing entry and/ or deleting an entry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student[&#39;Degree&#39;] = &#39;Masters&#39;
student[&#39;Name&#39;] = &#39;Tom&#39;
student




{&#39;Class&#39;: &#39;Urban Skills&#39;,
 &#39;Course&#39;: &#39;Python&#39;,
 &#39;Degree&#39;: &#39;Masters&#39;,
 &#39;Name&#39;: &#39;Tom&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you must have observed, a new value to the dictionary can be added or modified simply by passing the key value pair to the dictionary.&lt;/p&gt;

&lt;h3 id=&#34;setdefault:84dcac346e67782f4a3216af8d53f825&#34;&gt;setdefault( )&lt;/h3&gt;

&lt;p&gt;In python, the value (of a key-value pair) is mutable. However at times you might not want to overwrite the existing key-value pair but if it does not exist, you might want to add it. To perform this, you can use the setdefault() method. setdefault method returns a value if a key is present. Otherwise it inserts a key with the specified value and returns the value
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {&#39;Name&#39;: &#39;John&#39;, &#39;Class&#39;: &#39;Urban Skills&#39;, &#39;Course&#39;: &#39;Python&#39;}
student.setdefault(&#39;Degree&#39;, &#39;Masters&#39;)  # This will add the &#39;Degree:Masters&#39; key value pair to the dictionary since it doesn&#39;t exist





&#39;Masters&#39;




student.setdefault(&#39;Class&#39;,&#39;Urban Sensing&#39;)




&#39;Urban Skills&#39;




student




{&#39;Class&#39;: &#39;Urban Skills&#39;,
 &#39;Course&#39;: &#39;Python&#39;,
 &#39;Degree&#39;: &#39;Masters&#39;,
 &#39;Name&#39;: &#39;John&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update:84dcac346e67782f4a3216af8d53f825&#34;&gt;update( )&lt;/h3&gt;

&lt;p&gt;The update method adds (joins) the two dictionary together.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict2 = {&#39;NJ&#39;: &#39;New Jersey&#39;, &#39;CA&#39;: &#39;California&#39;}
states_dict.update(states_dict2)
states_dict




{&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-from-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Removing from Dictionary&lt;/h2&gt;

&lt;h3 id=&#34;pop:84dcac346e67782f4a3216af8d53f825&#34;&gt;pop( )&lt;/h3&gt;

&lt;p&gt;Pop() method removes the key-value pair based on the key passed as an argument. It returns the value that is being &amp;lsquo;popped&amp;rsquo; from the dictionary
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.pop(&#39;AL&#39;)




&#39;Alabama&#39;




states_dict




{&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;del:84dcac346e67782f4a3216af8d53f825&#34;&gt;del( )&lt;/h3&gt;

&lt;p&gt;del() method can be used to perform the above operation and also can be used to remove an entire dictionary. It does not return anything.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
del states_dict[&#39;AL&#39;]
states_dict




{&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}




del states_dict


states_dict  # Will raise an error because we deleted the object.


---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&amp;lt;ipython-input-20-0d583e464cf4&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 states_dict  # Will raise an error because we deleted the object.


NameError: name &#39;states_dict&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;clear:84dcac346e67782f4a3216af8d53f825&#34;&gt;clear( )&lt;/h3&gt;

&lt;p&gt;clear method clears all items from the dictionary&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.clear()
states_dict




{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;traversing-a-dictionary:84dcac346e67782f4a3216af8d53f825&#34;&gt;Traversing a Dictionary&lt;/h2&gt;

&lt;h3 id=&#34;for-loop:84dcac346e67782f4a3216af8d53f825&#34;&gt;for loop:&lt;/h3&gt;

&lt;p&gt;A dictionary can be traversed by using for loops.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
for k in states_dict:
    print k, states_dict[k]

NY New York
CA California
NJ New Jersey
AL Alabama



for k, v in states_dict.items():  # We will see items() method in next sub- topic
    print &#39;: &#39;.join((k, v))

NY: New York
CA: California
NJ: New Jersey
AL: Alabama
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keys-values-and-items:84dcac346e67782f4a3216af8d53f825&#34;&gt;keys( ) , values( ) and items( )&lt;/h3&gt;

&lt;p&gt;The keys() method returns a list of keys in dictionary. The values() method returns a list of all the values and items() returns a list of all key-value tuples.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
states_dict.keys()




[&#39;NY&#39;, &#39;CA&#39;, &#39;NJ&#39;, &#39;AL&#39;]




states_dict.values()




[&#39;New York&#39;, &#39;California&#39;, &#39;New Jersey&#39;, &#39;Alabama&#39;]




states_dict.items()




[(&#39;NY&#39;, &#39;New York&#39;),
 (&#39;CA&#39;, &#39;California&#39;),
 (&#39;NJ&#39;, &#39;New Jersey&#39;),
 (&#39;AL&#39;, &#39;Alabama&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting:84dcac346e67782f4a3216af8d53f825&#34;&gt;Sorting&lt;/h2&gt;

&lt;p&gt;Dictionaries in python can be sorted using keys or values. Just like keys the dictionaries can be sorted in ascending or descending order. First let us look as the built-in function sorted() and then the method specific to collections class.&lt;/p&gt;

&lt;h3 id=&#34;sorted:84dcac346e67782f4a3216af8d53f825&#34;&gt;sorted( )&lt;/h3&gt;

&lt;p&gt;Sorted method returns a sorted list from the items in the iterable (in our case it is a dictionary). It can also take a boolean value for reverse which, if set as True, will sort the iterable in descending order. It is actually the most efficient way to sort anything, be it strings, integers, dictionaries, lists etc.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
for key in sorted (states_dict.iterkeys()):
    print &#39;%s : %s&#39;%(key, states_dict[key])

AL : Alabama
CA : California
NJ : New Jersey
NY : New York



for key in sorted (states_dict.iterkeys(), reverse=True):
    print &#39;%s : %s&#39;%(key, states_dict[key])

NY : New York
NJ : New Jersey
CA : California
AL : Alabama
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you observe the above example, we have used a function iterkeys() This function returns an iterator over the dictionary&amp;rsquo;s keys..&lt;/p&gt;

&lt;h3 id=&#34;sort:84dcac346e67782f4a3216af8d53f825&#34;&gt;sort( )&lt;/h3&gt;

&lt;p&gt;Just like the sort method in lists, the method simply sorts the data.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
k = states_dict.keys()
k.sort()  # For reverse sorting, pass the argument reverse=True
for x in k:
    print &#39;%s : %s&#39;%((x, states_dict[x]))

AL : Alabama
CA : California
NJ : New Jersey
NY : New York
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:84dcac346e67782f4a3216af8d53f825&#34;&gt;Exercise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An iterator, as the name suggests creates an iterator object which can be manually accessed using next() method. As an exercise, create a dictionary&amp;rsquo;s keyiterator object and assign it to a variable and then access the items/ elements of the iterator object using next() method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the built-in method iter() and see what is the output when you use next function with it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sort the items by their values.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;views:84dcac346e67782f4a3216af8d53f825&#34;&gt;Views&lt;/h2&gt;

&lt;p&gt;The views are methods that are introduced in Python 2.7 (It is highly recommended to upgrade your python version if you are running Python version &amp;lt; 2.7) The problem with dictionary methods like items() is that it wastes the resources by creating a copy of the dictionary&amp;rsquo;s key, value pair. However view() methods reflect the changes without creating a copy. Basically, views doesn&amp;rsquo;t care if the dictionary has been changed, all it does is show the view of the dictionary. Let&amp;rsquo;s take a look at an example that shows difference between iteritems() and viewitems().
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
s_iter = states_dict.iteritems()
states_dict.pop(&#39;AL&#39;)




&#39;Alabama&#39;




for i in s_iter:
    print i


---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

&amp;lt;ipython-input-31-e32cc735634f&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 for i in s_iter:
      2     print i


RuntimeError: dictionary changed size during iteration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We expected an error right? Because the iterator was trying to go through all the items in the dictionary and suddenly it detected that dictionary was changed due to our pop() method.
Now lets try the same thing with viewitems() instead of iteritems() and see if we still get an error or not.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;states_dict = {&#39;AL&#39;: &#39;Alabama&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NY&#39;: &#39;New York&#39;}
s_view = states_dict.viewitems()
s_view




dict_items([(&#39;NY&#39;, &#39;New York&#39;), (&#39;CA&#39;, &#39;California&#39;), (&#39;NJ&#39;, &#39;New Jersey&#39;), (&#39;AL&#39;, &#39;Alabama&#39;)])




states_dict.pop(&#39;AL&#39;)
s_view  # We didn&#39;t modify it after popping.




dict_items([(&#39;NY&#39;, &#39;New York&#39;), (&#39;CA&#39;, &#39;California&#39;), (&#39;NJ&#39;, &#39;New Jersey&#39;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example makes it clear that viewitems does not create a copy, it just shows the current dictionary. If you try using items() method or iteritems() method after modifying the dictionary, it will always throw an error.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise-1:84dcac346e67782f4a3216af8d53f825&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Exercise: Try using the viewkeys() and viewvalues() and compare the differences between them and iteritems() &amp;amp; iterkeys().&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remember, If you have any difficulty using any function or method in IPython, type the function or method name followed by a &amp;lsquo;?&amp;rsquo;. It will print the docstring/ help manual for you.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Challenge2</title>
      <link>http://sharmamohit.com/USCL/Python_Challenge2/</link>
      <pubDate>Tue, 30 Jun 2015 02:04:43 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Challenge2/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Lab Challenge 2- Questions&lt;/h1&gt;

&lt;p&gt;##Question 1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write a Program that takes a text file as an input and generates a pickle file which contains a list of random lines of strings obtained from the text file.
Load the pickle file again and check the output.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;
Suppose the text file has some paragraphs:
&amp;gt; Hello World this &amp;hellip;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfeeling so rapturous discovery he &amp;hellip;&lt;/p&gt;

&lt;p&gt;Terminated principles sentiments &amp;hellip;&lt;/p&gt;

&lt;p&gt;Now residence dashwoods she excellent &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your list elements should look something like:
&amp;gt; Terminated principles sentiments &amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello World this &amp;hellip;&lt;/p&gt;

&lt;p&gt;Now residence dashwoods she excellent &amp;hellip;&lt;/p&gt;

&lt;p&gt;Unfeeling so rapturous discovery he &amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hints:&lt;/strong&gt;
* Check a module by the name random.
(Official Documentation: &lt;a href=&#34;https://docs.python.org/2/library/random.html&#34;&gt;https://docs.python.org/2/library/random.html&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the text file that you can use as your input here: &lt;a href=&#34;http://sharmamohit.com/misc_files/test.txt&#34;&gt;http://sharmamohit.com/misc_files/test.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;question-2:9af1e1a35463778b5c34ec771f382e7d&#34;&gt;Question 2&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Citi Bike is a privately owned public bicycle sharing system that serves parts of New York City. Attached you will find a csv file containing 2 week ridership data for the month of December 2014. Your task is to:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Find the number of Male and Female ridership during this 2 week period.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What is the percentage of Male riders and Female riders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download the &lt;a href=&#34;http://sharmamohit.com/misc_files/dec-2week-2014.csv&#34; title=&#34;2 week of December 2014&#34;&gt;CSV file&lt;/a&gt; for 2 weeks of December 2014.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;instructions:9af1e1a35463778b5c34ec771f382e7d&#34;&gt;Instructions:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do not submit the assignments via email to me.&lt;/li&gt;
&lt;li&gt;Submit .py files as your assignmnet. Do not copy paste to the text editor or convert to pdf on nyu classes. Name your assignments as:  &lt;code&gt;&amp;lt;yourname&amp;gt;&#39;Python challenge&#39;&amp;lt;challenge number&amp;gt;&amp;lt;Question number&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you have any doubts in understanding any assignmner question, feel free to email me. I will help you. Do not wait till the last moment.&lt;/li&gt;
&lt;li&gt;You are allowed to use any technique that involves python built-ins, numpy, matplotlib, pandas. You are not allowed to use third party libraries.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_Pickle</title>
      <link>http://sharmamohit.com/USCL/Python_Pickle/</link>
      <pubDate>Mon, 29 Jun 2015 00:07:47 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Pickle/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Pickle&lt;/h1&gt;

&lt;p&gt;Pickle module implements an algorithm for turning your Python object into a series of bytes by the process of serialization. Before we can jump into the unique feature of pickling, lets understand what serialization means.&lt;/p&gt;

&lt;p&gt;Serialization is the process of converting a data structure or object state into a format that can be stored and resurrected later in the same or another computer environment. During resurrection, when the series of bytes is reread according to the serialization algorithm, it can be used to create a semantically identical clone of the original object. This process of serializing an object is also called as deflating an object. The opposite operation, as you must&amp;rsquo;ve guessed, is called inflating. You can read more about serialization on &lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34; title=&#34;Serialization&#34;&gt;&lt;code&gt;wikipedia&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In python, the bulk of pickle module is written in C. It can store arbitrary complex python data structures however since it stores python objects, it is very highly unsafe as it can contain malicious data. So remember, pickle is good if only you create your pickle file locally and do not share it with some one.&lt;/p&gt;

&lt;p&gt;Now lets see some of the datatypes that pickle can store:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the native datatypes that python supports such as booleans, integers, complex numbers, strings etc&lt;/li&gt;
&lt;li&gt;Collections such as lists, tuples, dictionaries containing any combination of native datatypes.&lt;/li&gt;
&lt;li&gt;Lists, Dictionaries and Tuples containing Nested combinations of &amp;hellip;&amp;hellip; you get it!&lt;/li&gt;
&lt;li&gt;Methods, Functions, Classes, Instances etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-pickle-data:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Constructing Pickle data:&lt;/h2&gt;

&lt;p&gt;Lets jump directly into code and I will explain as we go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;student = {}
student[&#39;name&#39;] = &#39;Jack&#39;
student[&#39;course&#39;] = &#39;Urban Skills Lab&#39;
student[&#39;enrolled&#39;] = True
student[&#39;misc&#39;] = (&#39;full-time&#39;, )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we have created a student dictionary. Now lets save the above dictionary to a pickle file&lt;/p&gt;

&lt;h2 id=&#34;saving-data-as-pickle:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Saving data as Pickle:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import pickle
try:
    with open(&#39;test_pickle.pkl&#39;, &#39;wb&#39;) as f:
        pickle.dump(student, f)
except IOError, e:
    print &#39;IOError: &#39;,e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you check out a new way to open file object for writing? With this technique, you don&amp;rsquo;t have to worry about closing the file_object. As soon as the while loop is broken, the file_object will automatically be closed. (Think why?)
Ok, so the dump() method in pickle module takes the serializable python data structure, serializes it into a binary and save it to the file. Now lets try loading the data. To make sure it works, lets open an new ipython terminal or just close your current session and reopen it fresh.&lt;/p&gt;

&lt;h2 id=&#34;loading-data-from-pickle-file:ed9defbb74b994fe12064bced1d45b08&#34;&gt;Loading Data from Pickle file&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import pickle
try:
    with open(&#39;test_pickle.pkl&#39;, &#39;rb&#39;) as f:
        s = pickle.load(f)
except IOError, e:
    print &#39;IOError: &#39;,e

s





{&#39;course&#39;: &#39;Urban Skills Lab&#39;,
 &#39;enrolled&#39;: True,
 &#39;misc&#39;: (&#39;full-time&#39;,),
 &#39;name&#39;: &#39;Jack&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila! a new data structure is created with the data structure that is equal to the original data structure.&lt;/p&gt;

&lt;p&gt;This technique only works when you are working in python. If you want this to be compatible with other programming languages then you will have to take a look at other serialization format like JSON.
This is beyond the scope of the subject and is left as a self-assignment for interested students.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_FileIO</title>
      <link>http://sharmamohit.com/USCL/Python_FileIO/</link>
      <pubDate>Fri, 26 Jun 2015 02:07:12 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_FileIO/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python File I/O&lt;/h1&gt;

&lt;p&gt;Before we jump in to file I/O functions, lets first look at some basic I/O functions that are available to use in Python.
In Python, there are three basic I/O connections, Standard Input, Standard Output and Standard Error. As the name suggests, Standard Input is the data that goes to the program through the keyboard. keyboard being the standard input. Standard output is the terminal console, unless redirected..(guess where?!!) and Standard error is the stream where the programs write their error messages which is again to the terminal unless redirected.&lt;/p&gt;

&lt;h2 id=&#34;standard-input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Standard Input:&lt;/h2&gt;

&lt;p&gt;Python provides two built-in functions to read a line from the keyboard.&lt;/p&gt;

&lt;h3 id=&#34;raw-input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;raw_input&lt;/h3&gt;

&lt;p&gt;The raw_input( ) function reads one line from the standard input and returns it as a string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a file test_input.py and write this:
str = raw_input(&#39;Enter your name&#39;)
print &#39;Hello&#39;,str
# Now run the file as python test_input.py and input your name.

Enter your nameMohit
Hello Mohit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty easy right? When you execute the file, it will prompt you to enter your name and print &amp;lsquo;Hello &lt;name&gt;&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;input:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;input&lt;/h3&gt;

&lt;p&gt;The input function is equivalent to raw_input, except that it assumes the input is a valid Python expression, evaluates and returns the result.
Take the previous file and replace raw_input by input and execute the code. Now enter this when prompted for input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str = input(&#39;Enter your name&#39;)
print &#39;Hello&#39;,str

Enter your name[x for x in range(10)]
Hello [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-i-o:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;File I/O&lt;/h2&gt;

&lt;p&gt;Until now you have been reading and writing to the standard input. Lets now perform the same function to the files. Now we will see how we can read and write to the files.&lt;/p&gt;

&lt;p&gt;##Opening Files:&lt;/p&gt;

&lt;p&gt;Files can be opened using python&amp;rsquo;s built-in open() function. This function creates a file object which we will use for performing operations on the file. It will become much clear when we look at a complete example. For now, just remember that we need to create a file object before performing any file I/O and try to remember the syntax.
Syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;f = open(file_name, access mode, encoding)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;file_name: The file name that you would like to perform your I/O operations on.
encoding: Encoding tells python what encoding scheme to use to convert the stream of bytes to text.
access_mode: This is the mode which determines if the file is to opened as read only,read-write, write only etc modes. The ways in which a file can be opened is mentioned below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;String&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Its Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;r&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file as read only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rb&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file as read only in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;r+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for reading and writing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;rb+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for reading and writing in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;w&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;wb&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing only in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;w+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for both reading and writing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;wb+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for writing and reading in binary format&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ab&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending in binary&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;a+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending and reading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ab+&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Opens a file for appending and reading in binary format&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;reading-and-writing:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Reading and Writing&lt;/h2&gt;

&lt;p&gt;Once we have created a file object we can perform many operations on the file object which, like all objects, has methods to take care of nitty gritty details and perform the operations on the file. We will now look at some of the attributes of the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-close:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.close()&lt;/h3&gt;

&lt;p&gt;This method will close the file that we have currently open. You should always call this method once you are done performing I/O operations on the file using the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-softspace:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.softspace&lt;/h3&gt;

&lt;p&gt;It returns a boolean indicating whether a space character needs to be printed before another value using the print statement. It is kind of a read-write attribute that is used internally by the print statement to keep track of its own state and not by the file object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-flush:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.flush()&lt;/h3&gt;

&lt;p&gt;This method requests that the file object&amp;rsquo;s buffer to be written out to the operating system, ensuring that the file (as seen by the system) has exactly the contents that the file_object has. (By default python uses operating systems buffer so you don&amp;rsquo;t have to call this, unless you configure it otherwise. It is mainly used for tty devices.)&lt;/p&gt;

&lt;h3 id=&#34;file-object-isatty:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.isatty()&lt;/h3&gt;

&lt;p&gt;This method returns true if the file_object is an interactive terminal (tty is a special device that lets people who are deaf, hard of hearing or speech-impaired to communicate)&lt;/p&gt;

&lt;h3 id=&#34;file-object-mode:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.mode&lt;/h3&gt;

&lt;p&gt;This is a read-only attribute that is the value of the mode string used in the open call that created the file_object&lt;/p&gt;

&lt;h3 id=&#34;file-object-name:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.name&lt;/h3&gt;

&lt;p&gt;This is also a read-only attribute that is the value of the filename string used in the open call that created the file_object.&lt;/p&gt;

&lt;h3 id=&#34;file-object-readline-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.readline([size])&lt;/h3&gt;

&lt;p&gt;This method reads strings from the file till it reaches new line character ( &amp;lsquo;\n&amp;rsquo; ) if the &amp;lsquo;size&amp;rsquo; parameter is empty. If an integer is provided as size parameter, then this method returns string of length size.&lt;/p&gt;

&lt;h3 id=&#34;file-object-readlines-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.readlines([size])&lt;/h3&gt;

&lt;p&gt;This method basically calls the readline() method till it reaches the end of file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-seek-pos-how-0:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.seek(pos, how=0)&lt;/h3&gt;

&lt;p&gt;Sets the file_object&amp;rsquo;s current position to the signed integer byte offset by pos from the reference point. The how parameter, which is 0 by default, indicates the reference point. how=1 is the reference of current position and how=2 is the reference of the end of the file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-tell:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.tell()&lt;/h3&gt;

&lt;p&gt;This method tells the current file position when you are reading from or writing to a file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-truncate-size:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.truncate([size])&lt;/h3&gt;

&lt;p&gt;This method truncates the file to be at most of size size.  If you don&amp;rsquo;t mention the size it takes the size from f.tell() method as the new size.&lt;/p&gt;

&lt;h3 id=&#34;file-object-write-str:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.write(str)&lt;/h3&gt;

&lt;p&gt;Writes the bytes of string str to the file.&lt;/p&gt;

&lt;h3 id=&#34;file-object-writelines-lst:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;file_object.writelines(lst)&lt;/h3&gt;

&lt;p&gt;Writes sequence of strings to file. No new line is added automatically.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a file and perform some interesting I/O operations on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a .py file or follow along in Ipython terminal
try:
    f = open(&#39;test.txt&#39;, &#39;w&#39;)  # If there is a test.txt file in your current location, this step will overwrite it. So change file_name if you want
    print &#39;Cursor position in the file before writing: &#39;,f.tell()
    f.write(&#39;Hello World&#39;)
    print &#39;Cursor position after writing: &#39;,f.tell()
except IOError, e:
    print &#39;Error performing I/O operations on the file: &#39;,e
finally:
    if f:  # If file_object exists,
        f.close()

Cursor position in the file before writing:  0
Cursor position after writing:  11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yaay! You created your first file and wrote &amp;lsquo;Hello world&amp;rsquo; to it! Lets edit it now!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;test.txt&#39;, &#39;r+&#39;)
    print f.readline()
    f.writelines([&#39;\n&#39;, &#39;This is&#39;, &#39;Python&#39;])
    f.seek(0)  # Go to the starting of file
    print f.readlines()  # Read all the lines in the file.
    f.truncate(20)
    f.seek(0)
    print &#39;After truncate: &#39;,f.readlines()
except IOError, e:
    print &#39;Error performing I/O on file &#39;,e
finally:
    if f:
        f.close()

Hello World
[&#39;Hello World\n&#39;, &#39;This isPython&#39;]
After truncate:  [&#39;Hello World\n&#39;, &#39;This isP&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! So now we opened the file, read its contents, added multiple strings, truncated and closed it! This covers pretty much everything that you will need when you are working with almost any kind of file that has some text.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Exercise:&lt;/h2&gt;

&lt;p&gt;Create a binary file and write &amp;lsquo;Hello World&amp;rsquo; in it. Now create an ascii file and add the same text to it. Read both the files. Is there any difference between the two?&lt;/p&gt;

&lt;h2 id=&#34;csv-comma-separated-values:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;CSV (Comma Separated Values)&lt;/h2&gt;

&lt;p&gt;In the above examples, we saw how to perform read-write operations on a file. This is generally used for files that have multiple lines of strings. However if you have data like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Data1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Data2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Data3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Example1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Example2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Example3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is stored in a file with this format:&lt;/p&gt;

&lt;p&gt;Data1, Data2, Data3&lt;/p&gt;

&lt;p&gt;Example1, Example2, Example3&lt;/p&gt;

&lt;p&gt;As can be seen in the above example, each row is a new line, and each column is separated with a comma. Many online services such as an online bank allow its users to export tabular data from the website into a CSV file. These files can then be opened and viewed offline using a Spreadsheet program such as Microsoft Excel.&lt;/p&gt;

&lt;h3 id=&#34;so-why-do-we-need-such-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;So why do we need such CSV files?&lt;/h3&gt;

&lt;p&gt;There are two primary reasons for the existence of this format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSV are plain-text files which makes them easy to store and read from&lt;/li&gt;
&lt;li&gt;CSV files are stored as sequence of human readable characters, thus making it easy for humans to interpret the data without requiring any format conversion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSV is a delimited text file that uses a comma to separate values (many implementations of CSV import/export tools allow other separators to be used). Simple CSV implementations may prohibit field values that contain a comma or other special characters such as newlines. More sophisticated CSV implementations permit them, often by requiring &amp;ldquo; (double quote) characters around values that contain reserved characters (such as commas, double quotes, or less commonly, newlines). Embedded double quote characters may then be represented by a pair of consecutive double quotes, or by prefixing an escape character such as a backslash (for example in Sybase Central). The name &amp;ldquo;CSV&amp;rdquo; indicates the use of the comma to separate data fields. Nevertheless, the term &amp;ldquo;CSV&amp;rdquo; is widely used to refer a large family of formats, which differ in many ways. Some implementations allow or require single or double quotation marks around some or all fields; and some reserve the very first record as a header containing a list of field names. An official standard for the CSV file format does not exist.&lt;/p&gt;

&lt;p&gt;Download a Sample* CSV file from &lt;a href=&#34;https://newclasses.nyu.edu/access/content/group/9ce294e5-cc8b-44f8-963b-8160554a987f/Python%20Lab/Week3/Python%20File%20I_O/sample.csv&#34; title=&#34;Sample CSV&#34;&gt;&lt;code&gt;HERE&lt;/code&gt;&lt;/a&gt; and save it in your current folder location.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The data generated is completely random using a third party website &lt;a href=&#34;https://www.fakenamegenerator.com&#34; title=&#34;FakeName Generator&#34;&gt;&lt;code&gt;https://www.fakenamegenerator.com&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;reading-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Reading CSV files&lt;/h3&gt;

&lt;p&gt;reader() can be used to create an object that is used to read the data from a csv file. The reader can be used as an iterator to process the rows of the file in order. Lets take a look at an example:
Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You can create a new file or follow along in Ipython terminal
row = []
import csv  # Importing csv module
try:
    f = open(&#39;sample.csv&#39;, &#39;r&#39;)
    reader = csv.reader(f)
    for i in reader:
        row.append(i)
except IOError, e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()

row[0:10]




[[&#39;\xef\xbb\xbfGivenName&#39;, &#39;Gender&#39;, &#39;Title&#39;, &#39;Occupation&#39;, &#39;City&#39;],
 [&#39;Nicholas&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Speech writer&#39;, &#39;Plantation&#39;],
 [&#39;Jeanette&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Surfacing equipment operator&#39;, &#39;Chicago&#39;],
 [&#39;David&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Engineering geologist&#39;, &#39;Worthington&#39;],
 [&#39;Susan&#39;,
  &#39;female&#39;,
  &#39;Ms.&#39;,
  &#39;Cutting, punching, and press machine tender&#39;,
  &#39;Fulton&#39;],
 [&#39;Dennis&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Construction millwright&#39;, &#39;Fargo&#39;],
 [&#39;Susan&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Private investigator&#39;, &#39;Blackwood&#39;],
 [&#39;John&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Chemical engineering technician&#39;, &#39;Marietta&#39;],
 [&#39;Damon&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Loan closer&#39;, &#39;Mansfield&#39;],
 [&#39;George&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Public defender&#39;, &#39;Minneapolis&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reader() is a method available in csv package so the first line is importing the csv package. The reader() method takes sequence or an iterable file object, and returns an iterator. As the csv file is being read, each row of the input data is converted to a list of strings. The parser handles the line breaks embedded within the strings which is why using row is not always the output that you might get when taking a line input from file.&lt;/p&gt;

&lt;h3 id=&#34;writing-csv-files:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Writing CSV files&lt;/h3&gt;

&lt;p&gt;Writing csv files is just as easy as reading them. To write to a csv file, we can use writer() method to create an object for writing and then iterate over the rows using csv&amp;rsquo;s writerow() method to write it.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import csv
try:
    f = open(&#39;test.csv&#39;, &#39;w&#39;)
    writer = csv.writer(f)
    for i in range(10):
        writer.writerow((i, i+1, i+2))
except IOError,e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try opening the file just like we did before.&lt;/p&gt;

&lt;h3 id=&#34;using-field-names:ff0559c5a452fc1738b1ba994862e3e5&#34;&gt;Using Field Names&lt;/h3&gt;

&lt;p&gt;In addition to working with sequences or data, the csv module includes classes for working with rows as dictionaries so that the fields can be named. The DictReader and DictWriter classes translate rows to dictionaries instead of lists. Keys for the dictionary can be passed in, or inferred from the first row in the input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;sample.csv&#39;, &#39;r&#39;)
    reader = csv.DictReader(f)
    for i in reader:
        row.append(i)
except IOError, e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()

row[0:10]




[[&#39;\xef\xbb\xbfGivenName&#39;, &#39;Gender&#39;, &#39;Title&#39;, &#39;Occupation&#39;, &#39;City&#39;],
 [&#39;Nicholas&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Speech writer&#39;, &#39;Plantation&#39;],
 [&#39;Jeanette&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Surfacing equipment operator&#39;, &#39;Chicago&#39;],
 [&#39;David&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Engineering geologist&#39;, &#39;Worthington&#39;],
 [&#39;Susan&#39;,
  &#39;female&#39;,
  &#39;Ms.&#39;,
  &#39;Cutting, punching, and press machine tender&#39;,
  &#39;Fulton&#39;],
 [&#39;Dennis&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Construction millwright&#39;, &#39;Fargo&#39;],
 [&#39;Susan&#39;, &#39;female&#39;, &#39;Mrs.&#39;, &#39;Private investigator&#39;, &#39;Blackwood&#39;],
 [&#39;John&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Chemical engineering technician&#39;, &#39;Marietta&#39;],
 [&#39;Damon&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Loan closer&#39;, &#39;Mansfield&#39;],
 [&#39;George&#39;, &#39;male&#39;, &#39;Mr.&#39;, &#39;Public defender&#39;, &#39;Minneapolis&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this and see the difference in the output.&lt;/p&gt;

&lt;p&gt;Similar to DictReader, we also have DictWriter which needs to be given a list of field names so it know how to order the columns in the output file.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import csv
try:
    fieldnm = (&#39;Title1&#39;, &#39;Title2&#39;, &#39;Title3&#39;)
    f = open(&#39;test.csv&#39;, &#39;w&#39;)
    writer = csv.DictWriter(f, fieldnames=fieldnm)
    headers = dict((i, i) for i in fieldnm)
    for i in range(10):
        writer.writerow({&#39;Title1&#39;:i, &#39;Title2&#39;:i+1, &#39;Title3&#39;:i+2})
except IOError,e:
    print &#39;Error: &#39;,e
finally:
    if f:
        f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This technique is good when the filesize (or the number of columns) is not very big. When the row numbers starts scaling up, the list that is created by the reader() method starts growing in memory and makes the process very very slow.
We will generally be dealing with the files that have over a million row entries and this method is not the most efficient way of dealing with such files. To handle such &amp;lsquo;Big Data&amp;rsquo;, we will study a python package called Numpy in the next week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_ImportingModules</title>
      <link>http://sharmamohit.com/USCL/Python_ImportingModules/</link>
      <pubDate>Mon, 22 Jun 2015 09:06:37 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_ImportingModules/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Importing Modules and Packages&lt;/h1&gt;

&lt;p&gt;If you quit the ipython terminal or python interpreter, the functions and variables are lost. What if you want to access them in your other programs or at a later point of time?(You don&amp;rsquo;t expect to complete your projects in a day do you?) Therefore you are better of using a text editor to prepare the input for the interpreter and running it with that file as input. This file is known as script. Now, you might have written several programs and some of them require a function that you wrote in a script for some other project. You want to use that handy function! There is no point in Ctrl+C and Ctrl+V for all these programs. To support this, python has a way to use these functions or definitions by using import.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-module:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;What is a Module?&lt;/h2&gt;

&lt;p&gt;A module is a python file that (generally) has only definitions of variables, functions and classes. It can also have executable statements if you&amp;rsquo;d like. A module allows you to logically organize your python code. Grouping related code in a module makes the code easier to understand and use. The module can have components that are imported from other modules.&lt;/p&gt;

&lt;h2 id=&#34;import-statement:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;Import Statement&lt;/h2&gt;

&lt;p&gt;It is customary (and we have followed this in a couple of examples) to place all the import statements at the beginning of the module. Let&amp;rsquo;s create a python file with functions that will perform addition, subtraction, multiplication and division of two numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a file by name my_calc.py in your current directory and write this code:
def mul(a ,b):
    return a * b

def div(a, b):
    return a / b

def add(a, b):
    return a + b

def sub(a, b):
    return a - b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we shall import the file and just use the functions directly. Fire up your ipython terminals in the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import my_calc  # Import our above module


sum = my_calc.add(123, 456)  # Use add function


print &#39;Sum = &#39;,sum

Sum =  579
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use any python source file as a module by executing an import statement in some other python source file, just like we did. A module is loaded only once regardless of the number of times it is imported. So if you made any error in writing the file/ module that you are trying to import in ipython session, you will have to reload the module in the current ipython session.&lt;/p&gt;

&lt;p&gt;When the python interpreter encounters an import statement it looks for the module name in the built-in modules first. if not found, it then searches for a file by the module&amp;rsquo;s name in a list of directories that are given by variable PYTHONPATH (it is an environment variable which is basically a list of directory names) and it looks for the file in the current directory. If it fails everywhere then it goes and looks on the default path. On linux/ unix the default path is normally /usr/local/lib/python&lt;/p&gt;

&lt;h2 id=&#34;from-import:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;from .. import ..&lt;/h2&gt;

&lt;p&gt;To preserve your current namespace, python&amp;rsquo;s from statement let&amp;rsquo;s you import only specific attributes to your current namespace. Let&amp;rsquo;s take a look at how this works. We will use our same my_calc.py file as a file that we are importing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from my_calc import div


division = div (6, 7.)
print &#39;Division = &#39;,division

Division =  0.857142857143



# Let&#39;s print only upto 2 decimal places.. Remember how to do it?
divison = div(6,7.)
print &#39;Division = {0:.2f}&#39;.format(divison)

Division = 0.86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using for statement does not import the entire file (or module) into the current namespace, it just introduced the item div from the module into our namespace. You might be wondering what if your file has many functions, you will go crazy writing so many import statements! Well.. it is also possible to import all names or definitions from a module into the current namespace by using for statement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from my_calc import *  # * means everything/ all


division = div (6, 7.)


print &#39;Division = &#39;,division

Division =  0.857142857143
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:ba0a07ffaad58c1f51305f3f279de339&#34;&gt;Exercise&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using python&amp;rsquo;s built-in module sys, try to find the path for directories in which python will look for the modules. (Hint: Use Ipython and make use of tab completions and ? )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find a way to reload the module in the current ipython session.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find out the names or definitions that you have defined currently. Next, find the names or definitions of the module that you are trying to import.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_Challenge1</title>
      <link>http://sharmamohit.com/USCL/Python_Challenge1/</link>
      <pubDate>Sat, 20 Jun 2015 12:12:15 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Challenge1/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Lab Challenge 1&lt;/h1&gt;

&lt;p&gt;##Question 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array.
The element value in the i-th row and j-th column of the array should be &lt;code&gt;i*j&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: i=0,1.., X-1; j=0,1,..,Y-1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;example:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]&lt;/p&gt;

&lt;h4 id=&#34;hints:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question,
it should be assumed to be a console input in a comma-separated form.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;question2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Question2:&lt;/h2&gt;

&lt;p&gt;** Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.**&lt;/p&gt;

&lt;h4 id=&#34;example-1:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example:&lt;/h4&gt;

&lt;p&gt;Suppose the following input is supplied to the program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello world and practice makes perfect and hello world again&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, the output should be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;again and hello makes perfect practice world&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-1:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question, it should be assumed to be a console input.
We use set container to remove duplicated data automatically and then use sorted() to sort the data.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;question-3:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Question 3:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;example-2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Example:&lt;/h4&gt;

&lt;p&gt;Suppose the following input is supplied to the program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, the output should be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UPPER CASE 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LOWER CASE 9&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;hints-2:4d5bff2aa8bad827516dc889c57a98e0&#34;&gt;Hints:&lt;/h4&gt;

&lt;p&gt;In case of input data being supplied to the question, it should be assumed to be a console input.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Python_Functions</title>
      <link>http://sharmamohit.com/USCL/Python_Functions/</link>
      <pubDate>Wed, 17 Jun 2015 20:02:58 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Functions/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Functions&lt;/h1&gt;

&lt;p&gt;Imagine that you have to open a file, read the contents of the file and close it. Pretty trivial, right? We did that in the exception handling. Now imagine that you have to read ten files, print their output and close it. Now you don&amp;rsquo;t want to sit there and type file i/o operations for every file. what if there are over 50 files and you have to concatenate them to a single file? This is where the functions come in. A function is a block of organized and reusable code in a program that performs a specific task which can be incorporated into a larger program. The advantages of using functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reuse of code&lt;/li&gt;
&lt;li&gt;Reducing duplication of the code&lt;/li&gt;
&lt;li&gt;Improving readability and reducing complexity of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two basic types of functions: Built-in functions and user defined functions. We have been using built-in functions for quite some time without actually understanding how a function works. This is the beauty of python. According to Guido van Rossum, all objects in python are first class citizens. Meaning all the objects (like function, strings, integers etc) have equal status. That is they can be assigned to variables, placed in lists, stored in dictionaries, passed as arguments and so forth. We have been doing this the whole time, right? Now lets see how you can create your own functions and call them in your code.&lt;/p&gt;

&lt;h2 id=&#34;defining-functions:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Defining Functions&lt;/h2&gt;

&lt;p&gt;A function is defined using the def keyword followed by the name of the function. The parameters or the arguments should be placed within the parentheses followed by the function name. The code block within every function starts with a colon and should be indented.&lt;/p&gt;

&lt;p&gt;From here on, I might ask you to write the piece of code using your favorite text editor and execute the code.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create test_func.py file and write the following code
&#39;&#39;&#39;
Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions
&#39;&#39;&#39;
def mul(a, b):  # defining a function
    print a,&#39;*&#39;,b,&#39;=&#39;,a * b

def info():  # defining a function
    return __doc__

print info()
mul(4, 5)


Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions

4 * 5 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the above file and execute it: python test_func.py and you should get an output that looks like above.&lt;/p&gt;

&lt;p&gt;In the above code we have used a keyword return.  A function may or may not have a return value. The job of return is just to return the expression/ object to the the calling function.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;exercise:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Exercise&lt;/h2&gt;

&lt;p&gt;Try to execute this code. If there is an error, what do you think caused it? Try rectifying the error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Create test_func.py file and write the following code&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
Author = Mohit
Date = June 20, 2014
This is our first script with user-defined functions
&#39;&#39;&#39;

def mul(a, b):
    print info()  # Calling a function from another function
    print a,&#39;*&#39;,b,&#39;=&#39;,a * b

def info():
    return __doc__
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calling-a-function:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Calling a function&lt;/h2&gt;

&lt;p&gt;Defining a function only gives it a name, specifies the parameters and structures the blocks of code but unless you call the function, the function is never executed. Just like above example, once the basic structure of a function is finalized, the function can be called by just using the function name followed by the arguments/ parameters enclosed in parenthesis. You can also call the function from another function. There are two ways of passing the parameters to the functions.&lt;/p&gt;

&lt;h3 id=&#34;pass-by-reference:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Pass by Reference&lt;/h3&gt;

&lt;p&gt;All the parameters in the python language are passed by reference. It means if you change what a parameter refers to within a function, the change also reflects back in the calling function. Let&amp;rsquo;s take a look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def append_list(list1):
    list1.append(99)


l1 = [1, 2, 3, 4, 5]
append_list(l1)
l1




[1, 2, 3, 4, 5, 99]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are maintaining reference of the passed object and appending values to the same object thus modifying the actual object.&lt;/p&gt;

&lt;h2 id=&#34;pass-by-value:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Pass by Value&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;def remove_list(list1):
    del(list1)
    list1 = [21, 22, 23, 24, 25]


l1 = [1, 2, 3, 4, 5]
remove_list(l1)
l1




[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the above example we can observe that the parameter list1 is local to the function and modifying the list1 does not affect l1. The function basically accomplishes nothing.&lt;/p&gt;

&lt;h2 id=&#34;function-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Function Arguments&lt;/h2&gt;

&lt;p&gt;A function can be called by using following types of formal arguments&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Required arguments&lt;/li&gt;
&lt;li&gt;Keyword arguments&lt;/li&gt;
&lt;li&gt;Default arguments&lt;/li&gt;
&lt;li&gt;Variable-length arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;required-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Required Arguments:&lt;/h3&gt;

&lt;p&gt;Required arguments are passed to a function in correct positional order. The number of arguments being passed should be equal to the number or arguments expected by the function that is defined. Let&amp;rsquo;s take a look at the example:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Lame example
def info(name, sem):
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)


info(&#39;Mohit&#39;, &#39;2&#39;)

My name is:  Mohit
This is semester 2



info(2, &#39;Mohit&#39;)

My name is:  2
This is semester


---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-8-f692458a13af&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 info(2, &#39;Mohit&#39;)


&amp;lt;ipython-input-6-32fe472dcf83&amp;gt; in info(name, sem)
      2 def info(name, sem):
      3     print &#39;My name is: &#39;,name
----&amp;gt; 4     print &#39;This is semester&#39;,int(sem)


ValueError: invalid literal for int() with base 10: &#39;Mohit&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keyword-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Keyword Arguments:&lt;/h3&gt;

&lt;p&gt;Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name. This allows you to skip the arguments or place them out of order because python&amp;rsquo;s interpreter will be able to match the values with parameters. Let&amp;rsquo;s modify the way we are calling the above function.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def info(name, sem):
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)





info(sem = 2,  name = &#39;Mohit&#39;)  # The order of the parameter does not matter.

My name is:  Mohit
This is semester 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;default-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Default Arguments:&lt;/h3&gt;

&lt;p&gt;A default argument is an argument that assumes a default value if the value is not provided when the function is called. Let&amp;rsquo;s modify the above example and specify sem = 2 by default.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def info(name, sem = 2):  # Default argument for semester is 2
    print &#39;My name is: &#39;,name
    print &#39;This is semester&#39;,int(sem)


info(&#39;Mohit&#39;, 2)

My name is:  Mohit
This is semester 2



info(&#39;Jack&#39;)  # Not providing second argument.

My name is:  Jack
This is semester 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;variable-length-arguments:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Variable Length Arguments:&lt;/h3&gt;

&lt;p&gt;At some point, you may need to process the function for more than the arguments that you specified when you defined the function. These arguments can be of variable length and are not named in the function definition, unlike required and default arguments. So how do you handle this? Let&amp;rsquo;s take a look at another example:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def names(course, *names):
    print &#39;Name of course: &#39;,course
    print &#39;Name of students in the course:&#39;
    for name in names:
        print name


names(&#39;Python&#39;, &#39;Jim&#39;, &#39;Jack&#39;, &#39;Mat&#39;)

Name of course:  Python
Name of students in the course:
Jim
Jack
Mat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An asterisk (*) is placed before the variable name that holds the values of all non keyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call.&lt;/p&gt;

&lt;h2 id=&#34;anonymous-functions:a96953da2ca000206315c659e2b1f3ff&#34;&gt;Anonymous Functions&lt;/h2&gt;

&lt;p&gt;Anonymous functions do not have a name! They are not declared in the standard manner using the def keyword. To create an anonymous function you can use lambda keyword. They are part of the functional paradigm incorporated in python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lambda forms can take any number of arguments but they return just one value in the form of an expression. They cannot contain commands or multiple expressions.&lt;/li&gt;
&lt;li&gt;Lambda functions have their own local namespace (just like regular functions) and cannot access variables other than those in their parameter list or those in the global namespace.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lambda function cannot be a direct call to print function.
Example:&lt;/p&gt;

&lt;p&gt;mul = lambda a, b: a*b&lt;/p&gt;

&lt;p&gt;print mul(4, 5)&lt;/p&gt;

&lt;p&gt;20&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_ExceptionHandling</title>
      <link>http://sharmamohit.com/USCL/Python_ExceptionHandling/</link>
      <pubDate>Fri, 12 Jun 2015 20:02:29 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_ExceptionHandling/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Exception Handling&lt;/h1&gt;

&lt;p&gt;An exception is a python object that represents an error. It is an event, which occurs during the execution of a program that disrupts the normal flow of the program&amp;rsquo;s instructions. When such a situation occurs and if python is not able to cope with it, it raises and exception. We have been seeing errors like TypeError and NameError or IndentationError throughout our tutorial which caused our application or that code to stop the execution. To prevent this from happening, we have to handle such exceptions.
Following is a hierarchy for built-in exceptions in python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      |    +-- BufferError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 / 0


---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&amp;lt;ipython-input-1-b710d87c980c&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 1 / 0


ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite straightforward example where we are trying to divide a number by 0. Python raises a ZeroDivisionError and the execution halts. There are basically two ways to handle this error.
First way is to check and make sure that the divisor is not zero. This is left as an exercise for the students. The other way to handle the error is by using try.. catch block where we place the code to be executed inside the try block and the exception to be handled in the except block.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(3, -3, -1):
    try:
        print 1.0 / i
    except ZeroDivisionError:
        print &#39;So, you\&#39;re trying to divide by zero huh?&#39;
        pass

0.333333333333
0.5
1.0
So, you&#39;re trying to divide by zero huh?
-1.0
-0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As observed from the above example, our execution continued even after we tried dividing 1.0 by zero.&lt;/p&gt;

&lt;h2 id=&#34;argument-of-an-exception:fa672977410eb8e9f34334b995b14c72&#34;&gt;Argument of an Exception&lt;/h2&gt;

&lt;p&gt;An exception can have an argument, which is a value that gives additional information about the problem that caused the exception. The contents of argument vary by exception. You can capture an exception&amp;rsquo;s argument by supplying a variable. Let&amp;rsquo;s take a look at an example.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(3, -3, -1):
    try:
        print 1.0 / i
    except ZeroDivisionError, e:
        print &#39;Zero Division Error: &#39;,e
        pass

0.333333333333
0.5
1.0
Zero Division Error:  float division by zero
-1.0
-0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you write the code to handle a single exception, you can have a variable following the exception in the except statement. This variable receives the value of the exception mostly containing the cause of the exception. If you are handling multiple exceptions, you can have a variable follow tuple of the execution. Based on whether you are handling single value or multiple exceptions, the variable can receive a single or multiple values in the form of a tuple.&lt;/p&gt;

&lt;h2 id=&#34;hierarchy-of-exceptions:fa672977410eb8e9f34334b995b14c72&#34;&gt;Hierarchy of Exceptions&lt;/h2&gt;

&lt;p&gt;The exceptions are organized in an hierarchy as observed from above tree. This means that we can have multiple exceptions handled by the except block.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time  # time module has a sleep method which will help slow down the execution of loop
i = -2
while i &amp;lt; 5:
    i = i + 1
    try:
        print 1.0 / i
        time.sleep(2)  # This will halt the code for 2 seconds
    except KeyboardInterrupt:
        # Lets raise the exception that we just caught!
        raise KeyboardInterrupt(&#39;Ctrl C pressed&#39;)
    except ZeroDivisionError:
        print &#39;So, you\&#39;re trying to divide by zero huh?&#39;
        pass

-1.0
So, you&#39;re trying to divide by zero huh?
1.0
0.5
0.333333333333



---------------------------------------------------------------------------

KeyboardInterrupt                         Traceback (most recent call last)

&amp;lt;ipython-input-4-66aad6d147e5&amp;gt; in &amp;lt;module&amp;gt;()
      8     except KeyboardInterrupt:
      9         # Lets raise the exception that we just caught!
---&amp;gt; 10         raise KeyboardInterrupt(&#39;Ctrl C pressed&#39;)
     11     except ZeroDivisionError:
     12         print &#39;So, you\&#39;re trying to divide by zero huh?&#39;


KeyboardInterrupt: Ctrl C pressed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After starting the execution of the code, wait for few seconds and then press Cntrl+C on your keyboard and you should get the above error. The new thing that we can observe in this code is that we have used a keyword raise. This helps in raising a particular exception and as a parameter to the exception you can pass the string that you want to print.&lt;/p&gt;

&lt;p&gt;The raise statement does two things: it creates an exception object, and immediately leaves the expected program execution sequence to search the enclosing try statements for a matching except clause. The effect of raise statement is to either divert execution in a matching except suite, or to stop the program (if no proper exception handling was performed).&lt;/p&gt;

&lt;p&gt;Now lets see the above example with hierarchy in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time
i = -2
while i &amp;lt; 5:
    i = i + 1
    try:
        print 1.0 / i
        time.sleep(2)  # This will halt the code for 2 seconds
    except BaseException:
        # Lets raise the exception that we just caught!
        print &#39;Some Exception occurred..&#39;
        pass


-1.0
Some Exception occurred..
1.0
0.5
Some Exception occurred..
0.333333333333
0.25
0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example we can see that we did implement a handler (a very bad kind, must say). If you check from the hierarchy list, you can observe that KeyboardInterrupt and ArithmeticError(which includes ZeroDivideError) are subclass of BaseException class. So since we implemented BaseException handler, all the errors under the base class are handled. Avoid raising a generic exception like we did in this example because you will not be able to understand what actually caused the exception and allows bugs to pass through. Instead use the most specific Exception constructor that semantically fits your issue.&lt;/p&gt;

&lt;h2 id=&#34;finally:fa672977410eb8e9f34334b995b14c72&#34;&gt;Finally&lt;/h2&gt;

&lt;p&gt;There is a finally keyword which is always executed regardless of where there was any exception in the code or not. This is generally used to cleanup some resources in a program.. especially when using file I/O operations
Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f = None
try:
    f = open(&#39;test.txt&#39;, &#39;r&#39;)  # Open file in read-only mode
    f.readlines()  # Read all lines
except IOError:
    print &#39;Error Opening File&#39;
finally:
    if f:  # If the file was opened
        f.close  # Close the file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example we can observe that we are trying to open a file and read its contents. If the file doesn&amp;rsquo;t exist, it will raise an IOError exception. We are handling that, no worries. However once the file has been read, we need to close the file so that other processes or other functions in our code can access it. (Remember: when accessing/ modifying a file, the file is locked to that process which is performing the I/O operation on it. Unless the lock is released, no other process will be able to modify it.. ) To make sure we release the resources, in the finally block we are checking if f is not null and closing it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Tuples</title>
      <link>http://sharmamohit.com/USCL/Python_Tuples/</link>
      <pubDate>Wed, 10 Jun 2015 02:01:53 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Tuples/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Tuples&lt;/h1&gt;

&lt;p&gt;Python tuple is much like a list except that it is immutable or unchangeable once created. Tuples use parentheses and creating them is as easy as putting different items separated by a comma between parentheses.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415)
type(tuple1)




tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple, so the next question is why do we need a new datatype? The answer can be summed up in three points:&lt;/p&gt;

&lt;p&gt;Tuples are faster than lists. If you ever defined a set of constant values and all you ever want to do is read those values, you should use tuples instead of lists
Safer Code. Tuples are like &amp;lsquo;write-protected&amp;rsquo; lists so that the data cannot be changed by accident.
Tuples are using in string formatting (we will see this in some examples below)
##Creating a Tuple&lt;/p&gt;

&lt;p&gt;We already saw one example above on how to create tuples with multiple items but to create a tuple with a single item, you need to include a comma after the first item.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;Python&#39;,)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;slicing-the-tuple:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Slicing the Tuple&lt;/h2&gt;

&lt;p&gt;Slicing a tuple is similar to slicing a list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415)
tuple1[1:3]




(&#39;Julia&#39;, 1)




tuple1[0::2]




(&#39;Python&#39;, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From above example we can observe that just like lists, slicing a tuple returns a new shallow copied tuple containing the requested items.&lt;/p&gt;

&lt;h2 id=&#34;tuple-concatentation-repetition-membership:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Tuple Concatentation, Repetition, Membership&lt;/h2&gt;

&lt;p&gt;Tuples are immutable objects which means that yo cannot update, append, remove, modify the items in the tuple. However what you can do is take items from different tuples and create new tuples with those. Let&amp;rsquo;s take a look at some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (1, 2, 3, 4, 5)
tuple2 = (&#39;a&#39;, &#39;b&#39; , &#39;c&#39; ,&#39;d&#39; , &#39;e&#39;)
tuple1 + tuple2  # Tuple Concatentation




(1, 2, 3, 4, 5, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;)




tuple1*2  # Tuple Repetition




(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)




&#39;a&#39; in tuple2  # Membership operator, returns true if member of tuple




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nested-tuples:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Nested Tuples&lt;/h2&gt;

&lt;p&gt;It is also possible to create a tuple of tuples or tuple of lists.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list1 = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
list2 = [(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)]  # List of tuples is possible too!
tuple1 = (1, 2, 3, 4, 5)
tuple2 = tuple(list1 + list2)+ tuple1  # Concatenating the list and converting to tuple. Then adding two tuples and storing it in another tuple
tuple2




(&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415, (&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;), 1, 2, 3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, we cannot concatenate a list and a tuple so we concatenate two lists and convert the new list into tuple by using the tuple built-in function. Then we concatenate that to tuple1 and store the new tuple as tuple2.&lt;/p&gt;

&lt;h2 id=&#34;traversing-a-tuple:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Traversing a Tuple&lt;/h2&gt;

&lt;p&gt;Tuples can be traversed using the index value of the items. The most straightforward way of traversing a tuple is by using loops.
Example: (extending the above example and using the items of tuple2)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in enumerate(tuple2):
    print &#39;tuple2[{0[0]}]: {0[1]}&#39;.format(i)

tuple2[0]: Python
tuple2[1]: Julia
tuple2[2]: 1
tuple2[3]: 3.1415
tuple2[4]: (&#39;a&#39;, &#39;b&#39;)
tuple2[5]: (&#39;c&#39;, &#39;d&#39;)
tuple2[6]: 1
tuple2[7]: 2
tuple2[8]: 3
tuple2[9]: 4
tuple2[10]: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woaah! Forget about tuples, what kind of sorcery is that in the print statement, right? Well it is one of the most wonderful built-in functions of python that you will come across. Let&amp;rsquo;s keep the &amp;lsquo;tuple&amp;rsquo; aside for a second.
.format() is an extremely convenient way of formatting the text exactly the way we want it. It is available for python 2.7 and above (again, a gentle reminder to update your python is you&amp;rsquo;re using python 2.6 or lower). What&amp;rsquo;s wrong in our older % way of doing things right? Well, firstly, format method seems more sophisticated than using the %. Moreover % can take either a variable or a tuple or anything and throw bunch of errors for example lets say we have a tuple of two items..
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;Python&#39;, 1)
print &#39;Contents of tuple1: %s&#39;%(tuple1)  # Will throw TypeError


---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-10-8de7465d8254&amp;gt; in &amp;lt;module&amp;gt;()
      1 tuple1 = (&#39;Python&#39;, 1)
----&amp;gt; 2 print &#39;Contents of tuple1: %s&#39;%(tuple1)  # Will throw TypeError


TypeError: not all arguments converted during string formatting



print &#39;Contents of tuple1: {}&#39;.format(tuple1)

Contents of tuple1: (&#39;Python&#39;, 1)



print(&#39;This is {0}, and I rank {1} among all programming languages&#39;.format(*tuple1))
# The * helps in unpacking the tuple into arguments

This is Python, and I rank 1 among all programming languages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all we will talk about format here, If you want to learn more about the format method, you can head over to &lt;a href=&#34;docs.python.org/2/library/string.html#format-specification-mini-language&#34; title=&#34;Official Documentation&#34;&gt;&lt;code&gt;official documentation&lt;/code&gt;&lt;/a&gt;. format is a very handy tool for formatting individual values.&lt;/p&gt;

&lt;p&gt;Coming back to our tuples, from the above examples, it must&amp;rsquo;ve made it very clear that almost everything that we did in lists apply over here. Ofcourse except for the fact that we can modify the lists items but not the tuples.&lt;/p&gt;

&lt;h2 id=&#34;tuple-comprehension:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Tuple Comprehension&lt;/h2&gt;

&lt;p&gt;We know that list comprehension is performed using a for loop that traverses the list and evaluates a condition using if.. else condition and creates a new list with the output. So for tuples it should be same as the list, right? Let&amp;rsquo;s see:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (1, 2, 3, 4, 5)
tuple2 = (i for i in tuple1 if i%2 == 0)  # Same example as in list comprehension
type(tuple2)




generator




tuple2.next()




2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember when we talked about list comprehension and got all happy looking at such an easier way to create new lists? It so happens that the &amp;lsquo;comprehension&amp;rsquo; for lists and dictionaries is just a syntactic sugar to use a generator expression that outputs a specific type. We learned basics about generators when we saw range and xrange in &lt;a href=&#34;newclasses.nyu.edu/access/lessonbuilder/item/13294871/group/9ce294e5-cc8b-44f8-963b-8160554a987f/Python%20Lab/Week%201/Python%20Loops/Python%20Loops&#34; title=&#34;Python Loops&#34;&gt;&lt;code&gt;Python Loops&lt;/code&gt;&lt;/a&gt; List comprehension under the covers creates a generator expression that outputs a list (just like we did above using next() method). Now that you know the truth behind the comprehension you might feel that you don&amp;rsquo;t need list comprehension but believe me, it is awfully handy for lists when you start writing your codes in python using lists. So if you want  to use comprehension in tuples, you will get a generator expression and you can obtain your results using the next method. This also doesn&amp;rsquo;t require the invention of another brace or bracket.&lt;/p&gt;

&lt;h2 id=&#34;built-in-tuple-functions-and-methods:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;Built-in Tuple Functions and Methods&lt;/h2&gt;

&lt;p&gt;Python provides following methods for tuples:&lt;/p&gt;

&lt;h3 id=&#34;cmp-tuple1-tuple2:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;cmp(tuple1, tuple2):&lt;/h3&gt;

&lt;p&gt;The cmp method compares the elements of the two tuples. If the elements are of same type then perform simple comparison and return the result. If the elements are strings then sort them alphabetically and compare. If one of them has alphabets then that tuple is always greater (numbers are smaller than alphabets).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;a&#39;, &#39;b&#39;)
tuple2 = (1, 2, 3)
cmp(tuple1, tuple2)




1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;len-tuple1:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;len(tuple1):&lt;/h3&gt;

&lt;p&gt;len method returns the number of elements in the tuple.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;a&#39;, &#39;b&#39;)
len(tuple1)




2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;max-tuple1:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;max(tuple1):&lt;/h3&gt;

&lt;p&gt;This method returns the elements from the tuple with the maximum value.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple1 = (&#39;a&#39;, &#39;99999&#39;)
max(tuple1)  # Remember alphabets are always greater than integers




&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;min-tuple1:c39426273f0af3763e8bcb9ae0f11074&#34;&gt;min(tuple1):&lt;/h3&gt;

&lt;p&gt;This method returns minimum value of all the elements in the tuple.
Example: (extending the above example)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;min(tuple1)




&#39;99999&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python_Lists</title>
      <link>http://sharmamohit.com/USCL/Python_Lists/</link>
      <pubDate>Fri, 05 Jun 2015 02:00:44 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Lists/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Lists&lt;/h1&gt;

&lt;p&gt;Last week we studied Python Strings and we saw that Python&amp;rsquo;s most basic data structure is the sequence. Each element of a sequence is assigned a number known as index number. List is one of the most commonly used sequence of the seven built-in sequences in Python. (The others are: str, unicode, tuple, bytearray, buffer, xrange. We have already discussed str and unicode last week in Python Strings). Just like str, you can do a lot of things with these sequences ranging from indexing, slicing, adding, checking for membership, length of sequence etc. just like we saw with the strings.&lt;/p&gt;

&lt;p&gt;The list is the most versatile datatype available in Python which can be written as a list of comma-separated values between square brackets. Creating a list is as simple as putting different items separated by comma between square brackets.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a




[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]




type(a)




list




a[2]




1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python is zero-index based, thus to get the first item we simply ask for the item/ element on the 0th index. We will now briefly go over the basic list manipulations (which are similar to strings) and then look at some more methods that makes lists unique.&lt;/p&gt;

&lt;h2 id=&#34;slicing-the-list:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Slicing the List&lt;/h2&gt;

&lt;p&gt;A shallow copy of the list is performed and a new list is created containing the requested elements.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a[:2]  # Performs shallow copy and returns new list with first two elements




[&#39;Python&#39;, &#39;Julia&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The slicing can also  be done to get the n-th value from a list by passing n as the third argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a[1::2]  # Take every second element from index value 1.




[&#39;Julia&#39;, 3.1415]




a[-3:-2:1]  # Take every element between index value -3 and -2
# Remember, it doesn&#39;t include the nth index value when traversing a list.




[&#39;Julia&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-the-list:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Updating the List&lt;/h2&gt;

&lt;p&gt;Unlike strings and tuples which are immutable, elements in list can be changed without having to create a new list, thus making it mutable.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a[2] = &#39;Java&#39;
print &#39;\nArray: \n&#39;,a
print &#39;\nLength of array: \n&#39;,len(a)


Array: 
[&#39;Python&#39;, &#39;Julia&#39;, &#39;Java&#39;, 3.1415]

Length of array: 
4



a[2:4] = []  # Remove some elements/ changing the size


print &#39;\nArray: \n&#39;,a
print &#39;\nLength of array: \n&#39;,len(a)


Array: 
[&#39;Python&#39;, &#39;Julia&#39;]

Length of array: 
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;appending-to-the-list:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Appending to the List&lt;/h2&gt;

&lt;p&gt;New items can be easily added to the list by using the append() method.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.append(&#39;C++&#39;)  # It will append the item to the end of the list
a




[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415, &#39;C++&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;copying-lists:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Copying Lists&lt;/h2&gt;

&lt;p&gt;There are many ways to create a copy of the lists in python. Lets take a look at few techniques:&lt;/p&gt;

&lt;h3 id=&#34;copy-package:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;copy package&lt;/h3&gt;

&lt;p&gt;copy packages is packaged with the python so you don&amp;rsquo;t have to install it externally to use it. So what is the reason of creating a separate package? From our first week&amp;rsquo;s session on variables, we know that it is very easy to create copy of objects,right? We do know one thing for sure that assignment statements ( &amp;lsquo;=&amp;rsquo; ) in python do not copy the objects, they merely create bindings between the target and the object, right? It so happens that for collections that are mutable or contains mutable items, a copy is sometimes needed so that one can change the content of the mutable item without changing the other. There are actually two ways of creating a copy of an object viz: shallow copy and deep copy. In shallow copy, python constructs a new object and then inserts references to into it that are found in the original list, whereas deepcopy, as you must&amp;rsquo;ve guessed it, creates an object and copies everything. (If you are curious to know more about it, head over the &lt;a href=&#34;https://docs.python.org/2/library/copy.html&#34; title=&#34;Python Copy Official Documentation&#34;&gt;&lt;code&gt;official documentation&lt;/code&gt;&lt;/a&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import copy
a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a1 = copy.copy(a)  # Shallow copy.. Fast
a2 = copy.deepcopy(a)  # Deep copy.. Slower
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice-syntax:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Slice Syntax&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a1 = a[:]
print a1

[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-method:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list method&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a1 = list(a) # when list method takes a list as a parameter, it creates a copy of that list 
print a1

[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;delete-list-elements:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Delete List Elements&lt;/h2&gt;

&lt;p&gt;To remove the list elements, one has two options to either use del statement or lists&amp;rsquo;s remove method ( will be discussed later ).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
a




[1, 2, 3, 4, 5]




del(a[4])
a




[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nested-lists:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Nested Lists&lt;/h2&gt;

&lt;p&gt;It is also possible to create a list of the lists.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]
c = [a,b]
c




[[1, 2, 3, 4, 5], [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-concatenation-repetition-membership:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;List Concatenation, Repetition, Membership:&lt;/h2&gt;

&lt;p&gt;These are simple list manipulation methods similar to strings. Take a look at following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]
a + b  # List Concatenation




[1, 2, 3, 4, 5, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]




a * 2  # List Repition




[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]




3 in a  # Membership operator, returns true if member of list




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;traversing-a-list:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Traversing a list:&lt;/h2&gt;

&lt;p&gt;The most straightforward way to traverse a list is using loops:&lt;/p&gt;

&lt;h3 id=&#34;for-loop:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;for loop:&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
for i in a:
    print i

1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets traverse using the index numbers:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(len(a)): # start from 0 and go till the length of the list.
    print a[i]

1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;while-loop:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;While loop:&lt;/h3&gt;

&lt;p&gt;Just like for loop, we can traverse the list based on its index numbers:
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i = 0
while i &amp;lt; len(a):  # till i is less than length of list
    print a[i]
    i += 1  # increment i by 1 at every iteration

1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;enumerate:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;enumerate( )&lt;/h3&gt;

&lt;p&gt;Python has a built-in method called enumerate which returns both index value and value of list ( or any other iterable object).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for ind, val in enumerate(a):
    print &#39;a[%d] = %d&#39;%(ind, val)

a[0] = 1
a[1] = 2
a[2] = 3
a[3] = 4
a[4] = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-comprehension:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;List Comprehension&lt;/h2&gt;

&lt;p&gt;List comprehension is a syntactic way of creating a list based on the existing list, just like we did in copying the lists above.
The basic structure of the syntax includes a for loop that traverses the list and evaluates a condition using if.. else condition and stores the output of the condition as a new list. Lets take a look at a quick example.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b = [i for i in a if i % 2 == 0]
b




[2, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we did in the line 2 is simply create a list b from the list items in a which are completely divisible by 2.
There are many ways in which the list comprehension can be used. It is just a shorthand of writing better readable code.&lt;/p&gt;

&lt;h2 id=&#34;built-in-list-functions-and-methods:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Built- in List Functions and Methods:&lt;/h2&gt;

&lt;p&gt;Python provides following methods for lists:&lt;/p&gt;

&lt;h3 id=&#34;cmp-list1-list2:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;cmp (list1 , list2):&lt;/h3&gt;

&lt;p&gt;Compares elements between two lists. If the elements in lists are numbers, then performs numeric coercion if necessary and the compares the list1 against list 2. if it is found to be small then -1 is returned, else 1. If we reached the end of one of the lists, the longer list is &amp;ldquo;larger.&amp;rdquo; If we exhaust both lists and share the same data, the result is a tie, meaning that 0 is returned.
If the elements in the list are alphabets then they are sorted alphabetically and first element is compared and the result is returned as explained for numbers.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3]
b = [4, 1, 2]
cmp(a , b)  # a is smaller than b




-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;max:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;max:&lt;/h3&gt;

&lt;p&gt;This method returns the elements from the list with maximum value.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3]
max(a)
## What do you think will happen if we compare a list of the lists (nested list)?




3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;min:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;min:&lt;/h3&gt;

&lt;p&gt;This method returns the element from the list with minimum value.&lt;/p&gt;

&lt;h3 id=&#34;list:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list:&lt;/h3&gt;

&lt;p&gt;This method takes sequence types and converts them to lists. This is also used to convert a tuple to list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = list((&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415))  # iterable as a tuple
a




[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]




type(a)




list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line might confuse a little. Lets understand it. list is a built-in function which can either create an empty list if it is called with no parameters, or create a new list of the iterable/ sequence that it is given as an input. That means that list can at most 1 argument. Thus we have to put our elements in a circular bracket (which makes it a tuple) and then pass it as a argument to list method.&lt;/p&gt;

&lt;h3 id=&#34;list-count-obj:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.count(obj):&lt;/h3&gt;

&lt;p&gt;This method returns the number of times the object, that is passed as a parameter, occurs in the list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.count(&#39;Python&#39;)




1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-extend-seq:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.extend(seq):&lt;/h3&gt;

&lt;p&gt;This method appends the contents of a sequence to a list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
b = [&#39;C++&#39;, &#39;Java&#39;, 2, 2.7182]
a.extend(b)
a




[&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415, &#39;C++&#39;, &#39;Java&#39;, 2, 2.7182]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-index-obj:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.index(obj):&lt;/h3&gt;

&lt;p&gt;This method returns the lowest index in the list that object appears.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.index(&#39;Python&#39;)




0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-insert-index-obj:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.insert(index, obj):&lt;/h3&gt;

&lt;p&gt;This method is used to insert the object at the offset index.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.insert(3, 2.7182)
a




[&#39;Python&#39;, &#39;Julia&#39;, 1, 2.7182, 3.1415]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-pop-obj-list-1:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.pop(obj = list[-1]):&lt;/h3&gt;

&lt;p&gt;This method removes and returns the last object from the list.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.pop(3)




3.1415
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-remove-obj:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.remove(obj):&lt;/h3&gt;

&lt;p&gt;This method is used to remove the object from the list. Unlike pop, this does not return anything.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.remove(1)


a




[&#39;Python&#39;, &#39;Julia&#39;, 3.1415]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-reverse:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.reverse():&lt;/h3&gt;

&lt;p&gt;This method reverses the objects of list in place
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.reverse()
a




[3.1415, 1, &#39;Julia&#39;, &#39;Python&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-sort-func:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;list.sort([func]):&lt;/h3&gt;

&lt;p&gt;This method sorts objects of list by using the compare function passed as optional parameter. You can also sort the string in reverse by passing the optional parameter reverse=True
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [&#39;Python&#39;, &#39;Julia&#39;, 1, 3.1415]
a.sort()
a




[1, 3.1415, &#39;Julia&#39;, &#39;Python&#39;]




a.sort(reverse=True)
a




[&#39;Python&#39;, &#39;Julia&#39;, 3.1415, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;performance-characteristics:5aa60520ec55d4eab6daf1a149a31868&#34;&gt;Performance Characteristics:&lt;/h2&gt;

&lt;p&gt;The list has following performance characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The list object stores pointers to objects, not the actual objects themselves. The size of a list in memory depends on the number of objects in the list, not the size of the objects.&lt;/li&gt;
&lt;li&gt;The time needed to get or set an individual item is constant, no matter what the size of the list is (also known as “O(1)” behaviour).&lt;/li&gt;
&lt;li&gt;The time needed to append an item to the list is “amortized constant”; whenever the list needs to allocate more memory, it allocates room for a few items more than it actually needs, to avoid having to reallocate on each call (this assumes that the memory allocator is fast; for huge lists, the allocation overhead may push the behaviour towards O(n*n)).&lt;/li&gt;
&lt;li&gt;The time needed to insert an item depends on the size of the list, or more exactly, how many items that are to the right of the inserted item (O(n)). In other words, inserting items at the end is fast, but inserting items at the beginning can be relatively slow, if the list is large.&lt;/li&gt;
&lt;li&gt;The time needed to remove an item is about the same as the time needed to insert an item at the same location; removing items at the end is fast, removing items at the beginning is slow.&lt;/li&gt;
&lt;li&gt;The time needed to reverse a list is proportional to the list size (O(n)).&lt;/li&gt;
&lt;li&gt;The time needed to sort a list varies; the worst case is O(n log n), but typical cases are often a lot better than that.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python_Strings</title>
      <link>http://sharmamohit.com/USCL/Python_Strings/</link>
      <pubDate>Wed, 03 Jun 2015 18:58:31 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Strings/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Strings&lt;/h1&gt;

&lt;p&gt;A python string is usually a bit of text that you want to display or use or export out of the program that you are writing (to a file or over the network). Python has a built-in string class named str with many handy features. Python knows you want something to be a string when you enclose the text with either single quotes ( &amp;lsquo; ) or double quotes ( &amp;ldquo; ). You must&amp;rsquo;ve seen this in our previous tutorials. If not, check a very basic example below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Hello World&#39;
print a
type(a)

Hello World





str
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A string literal can span multiple lines, to do that there must be a backslash ( \ ) at the end of each line to escape the newline because by default the return key on the keyboard is considered as end of line. However if you do not feel comfortable using backslashes, you can put your text between triple quotes ( &amp;ldquo;&amp;rdquo;&amp;rdquo; ) or ( &amp;ldquo;&amp;rsquo; ). If you don&amp;rsquo;t want characters prefaced by \ to be interpreted as special characters, you can use raw strings by adding an r before the first quote. A very basic example would be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print &#39;C:\name\of\dir&#39;  # Using triple quotes also will not help you

C:
ame\of\dir



print r&#39;C:\name\of\dir&#39;

C:\name\of\dir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string-concatenation:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;String Concatenation&lt;/h2&gt;

&lt;p&gt;Just like Python numerical types, Python strings are &amp;lsquo;immutable&amp;rsquo;. What it means is that they cannot be changed after they are created. So if we concatenate the two strings, python will take the two strings and build a third string with the concatenated value or the first and second string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Hello&#39;  # String 1
b = &#39;World&#39;  # String 2
c = a + b  # Concatenate two string as String 3


c




&#39;HelloWorld&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Prove the above.. Hint: Refer Python Variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Concatenation of strings will also happen when the string literals are placed next to each other.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;Hello&#39; &#39;World&#39;




&#39;HelloWorld&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concatenation can also be preformed on variables of same datatype. i.e a string concatenation can only be performed on two strings or two variables that have str as their datatype. If you try to perform string concatenation on a string and an integer, Python will trow a typeError. String Concatenation also comes in handy when we have to break long strings (without using backslashes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Hello&#39;
b = 1
a+b


---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-7-fbd202b10ae9&amp;gt; in &amp;lt;module&amp;gt;()
      1 a = &#39;Hello&#39;
      2 b = 1
----&amp;gt; 3 a+b


TypeError: cannot concatenate &#39;str&#39; and &#39;int&#39; objects



a = (&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ac urna volutpat, interdum nibh in&#39;
     &#39;aucibus odio. Integer tempus, est ut faucibus efficitur, nibh est elementum ex, at vulputate urna purus at arcu.&#39;)


a




&#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ac urna volutpat, interdum nibh inaucibus odio. Integer tempus, est ut faucibus efficitur, nibh est elementum ex, at vulputate urna purus at arcu.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string-indexing:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;String Indexing&lt;/h2&gt;

&lt;p&gt;Characters in a string can be accessed using the standard [ ] syntax. Python uses zero-based indexing which means that first character in a string will be indexed at 0 location. So for example if the string is &amp;lsquo;Python&amp;rsquo; then, it can be shown to be indexed as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Python&#39;


len(a) # Total number of items/ characters in a string




6




a[0]




&#39;P&#39;




a[-6]




&#39;P&#39;




a[0] = &#39;J&#39; # It will result in an error because Strings are immutable.


---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-14-421b14552e81&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a[0] = &#39;J&#39; # It will result in an error because Strings are immutable.


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;In [4]&lt;/code&gt;: We printed the negative index number!! How?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
    0   1  2   3   4    5 
   -6  -5 -4  -3  -2   -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you enter a non negative index value, it is considered as indexed from left to right and when you enter the negative index values (negative indexing starts from -1), python&amp;rsquo;s interpreter is intelligent enough to understand that you meant to get the value indexed from right to left.&lt;/p&gt;

&lt;h2 id=&#34;string-slicing:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;String Slicing&lt;/h2&gt;

&lt;p&gt;The &amp;lsquo;Slice&amp;rsquo; syntax is a handy way to refer to sub-parts of strings. The slice a[start : end] is the elements beginning at start and extending up to end (not including end). Look at the above Python string literals representation and work on following examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Python&#39;


a[0:2]




&#39;Py&#39;




a[:-4]  # Remember in a[start:end], end is not included




&#39;Py&#39;




a[:-4] + a[2:]  # This even works for negative or out of bounds




&#39;Python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;operator:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;% Operator&lt;/h2&gt;

&lt;p&gt;Everything that we have seen till now had a string that cannot be modified but what if we now want to modify few words of the string and leave the remaining string unmodified?
For people familiar with C++, Python has a printf() - like facility to put together a string using % operator. Python uses %d operator to insert an integer specified in a tuple, %s and for string and %f for floating point(we shall discuss about tuple next week. For now just consider tuple as a group of values inside parenthesis separated by commas.) Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;text = &#39;%s World. %s %d %d %f&#39;


text %(&#39;Hello&#39;, &#39;Check&#39;, 1, 2, 3)




&#39;Hello World. Check 1 2 3.000000&#39;




text %(&#39;Hola&#39;, &#39;Testing&#39;, 1, 2, 5.6789)




&#39;Hola World. Testing 1 2 5.678900&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unicode-strings:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;Unicode Strings&lt;/h2&gt;

&lt;p&gt;Starting with Python 2.0 a new data type for storing text data is available to the programmer: the Unicode object. It can be used to store and manipulate Unicode data (see &lt;a href=&#34;http://www.unicode.org/&#34;&gt;http://www.unicode.org/&lt;/a&gt;) and integrates well with the existing string objects, providing auto-conversions where necessary.
Unicode has the advantage of providing one ordinal for every character in every script used in modern and ancient texts. Previously, there were only 256 possible ordinals for script characters. Texts were typically bound to a code page which mapped the ordinals to script characters. This lead to very much confusion especially with respect to internationalization (usually written as i18n — &amp;lsquo;i&amp;rsquo; + 18 characters + &amp;lsquo;n&amp;rsquo;) of software. Unicode solves these problems by defining one code page for all scripts.&lt;/p&gt;

&lt;p&gt;Creating Unicode strings in Python is just as simple as creating normal strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = u&#39;Hello World&#39;


a




u&#39;Hello World&#39;




type(a)  # What would have been the output if a = &#39;Hello World&#39;?




unicode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The small &amp;lsquo;u&amp;rsquo; in front of the quote indicates that a Unicode string is supposed to be created. If you want to include special characters in the string, you can do so by using the Python Unicode-Escape encoding. The following example shows how:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = u&#39;Hello\u0020World&#39; 


a




u&#39;Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The escape sequence \u0020 indicates to insert the Unicode character with the ordinal value 0x0020 (the space character) at the given position. (If you want to print the unicode as plain text you need to escape the backslash with another backslash and in the output you will see 4 backslashes. To get rid of so many backslashes, ts better to use raw mode as discussed in the beginning.)&lt;/p&gt;

&lt;p&gt;The built-in function unicode() provides access to all registered Unicode codecs (COders and DECoders). Some of the more well known encodings which these codecs can convert are Latin-1, ASCII, UTF-8, and UTF-16. The latter two are variable-length encodings that store each Unicode character in one or more bytes. The default encoding is normally set to ASCII, which passes through characters in the range 0 to 127 and rejects any other characters with an error. When a Unicode string is printed, written to a file, or converted with str(), conversion takes place using this default encoding.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;u&#39;äöü&#39;




u&#39;\xe4\xf6\xfc&#39;




str(u&amp;quot;äöü&amp;quot;)  # This will raise UnicodeEncodeError. Think, Why?


---------------------------------------------------------------------------

UnicodeEncodeError                        Traceback (most recent call last)

&amp;lt;ipython-input-28-f7a5ab2207b1&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 str(u&amp;quot;äöü&amp;quot;)  # This will raise UnicodeEncodeError. Think, Why?


UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-2: ordinal not in range(128)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To convert a Unicode string into an 8-bit string using a specific encoding, Unicode objects provide an encode() method that takes one argument, the name of the encoding. Lowercase names for encodings are preferred.&lt;/p&gt;

&lt;h2 id=&#34;built-in-string-methods:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;Built-in String Methods&lt;/h2&gt;

&lt;p&gt;Now that we know about the string and some basic manipulation on strings, lets look at some more built-in methods that can be used.&lt;/p&gt;

&lt;h3 id=&#34;capitalize:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;capitalize&lt;/h3&gt;

&lt;p&gt;It returns a copy (remember the same string is not modified because strings are immutable) of the string with only its first character capitalized.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;python&#39;
a.capitalize()




&#39;Python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;center:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;center&lt;/h3&gt;

&lt;p&gt;Return YOUR STRING centered in a string of length width. Padding is done using the specified fill character (default is a space).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.center(10, &#39;!&#39;)




&#39;!!python!!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;count:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;count&lt;/h3&gt;

&lt;p&gt;The method count() returns the number of occurrences of a sub-string in the range [start, end].
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.count(&#39;o&#39;, 0, len(a))




1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;decode:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;decode&lt;/h3&gt;

&lt;p&gt;This method decodes the string using codec registered for encoding.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;\xc3\xa4\xc3\xb6\xc3\xbc&#39;


b = a.decode(encoding = &#39;utf-8&#39;)


b




u&#39;\xe4\xf6\xfc&#39;




print u&#39;%s&#39; %b

äöü
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;encode:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;encode&lt;/h3&gt;

&lt;p&gt;Returns encoded version of a string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = u&#39;äöü&#39;


a




u&#39;\xe4\xf6\xfc&#39;




a.encode(&#39;utf-8&#39;)




&#39;\xc3\xa4\xc3\xb6\xc3\xbc&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;endswith:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;endswith&lt;/h3&gt;

&lt;p&gt;TRUE if the string ends with the specified suffix, otherwise FALSE.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Hello World&#39;


a.endswith(&#39;World&#39;)




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;expandtabs:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;expandtabs&lt;/h3&gt;

&lt;p&gt;It returns a copy of the string in which tab characters i.e. &amp;lsquo;\t&amp;rsquo; are expanded using spaces, optionally using the given tabsize.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Hello \t World&#39;


a




&#39;Hello \t World&#39;




a.expandtabs(16)




&#39;Hello            World&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;find&lt;/h3&gt;

&lt;p&gt;It determines if the sub string occurs in string. Optionally between beg and end. If found, it returns the index value. Otherwise returns -1
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;This is a test string&#39;


b = &#39;str&#39;


a.find(b)




15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rfind:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;rfind&lt;/h3&gt;

&lt;p&gt;Same as find() but searches backwards in string&lt;/p&gt;

&lt;h3 id=&#34;index:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;index&lt;/h3&gt;

&lt;p&gt;Same as find but raises an exception if sub string is not found.&lt;/p&gt;

&lt;h3 id=&#34;isalnum:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;isalnum&lt;/h3&gt;

&lt;p&gt;Returns true if the string has at least one character and all characters are alphanumeric and false otherwise.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Welcome2015&#39;


a.isalnum()




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;join:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;join&lt;/h3&gt;

&lt;p&gt;Concatenates the string representations of elements in sequence into a string, with separator string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;&#39;


b = (&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)
a.join(b)




&#39;python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strip:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;strip&lt;/h3&gt;

&lt;p&gt;Returns a copy of string in which all chars have been stripped from the beginning and the end of the string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;....This is Python....&#39;
a.strip(&#39;.&#39;)




&#39;This is Python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lstrip:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;lstrip&lt;/h3&gt;

&lt;p&gt;Removes all leading whitespaces in a string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;.......python&#39;
a.lstrip(&#39;.&#39;)




&#39;python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rstrip:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;rstrip&lt;/h3&gt;

&lt;p&gt;Removes all trailing whitespaces in a string.&lt;/p&gt;

&lt;h3 id=&#34;max:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;max&lt;/h3&gt;

&lt;p&gt;Returns the maximum alphabetical character from the string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;python&#39;
max(a)  # This is very helpful when used with integers




&#39;y&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;min:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;min&lt;/h3&gt;

&lt;p&gt;Returns the minimum alphabetical character from the string.&lt;/p&gt;

&lt;h3 id=&#34;replace:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;replace&lt;/h3&gt;

&lt;p&gt;Returns a copy of the string with all occurrences of sub string old by new. If the optional argument max is given, only the first count occurrences are replaced.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;This is Python&#39;
a.replace(&#39;is&#39;, &#39;was&#39;, 1)




&#39;Thwas is Python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rjust:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;rjust&lt;/h3&gt;

&lt;p&gt;Returns a space-padded string with the original string right-justified to a total width of width column
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;Python&#39;
a.rjust(10,&#39;$&#39;)




&#39;$$$$Python&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;split:4c6770be94f34d1f496778e9e5548d2b&#34;&gt;split&lt;/h3&gt;

&lt;p&gt;Returns a list of all the words in the string separated by a separator string.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = &#39;This is Python&#39;
a.split(&#39; &#39;)




[&#39;This&#39;, &#39;is&#39;, &#39;Python&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the methods that you will end up using mostly. However, there are many more built in methods that you can access by pressing tab after typing the variable name whose type is str.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Loops</title>
      <link>http://sharmamohit.com/USCL/Python_Loops/</link>
      <pubDate>Mon, 01 Jun 2015 01:57:59 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Loops/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Loops&lt;/h1&gt;

&lt;p&gt;Generally in python, statements are executed sequentially and once executed it is not repeated again. There may be a situation when you need to execute a piece of code n number of times, this is where the loops come in. Python has two types of loops viz. for loop and while loop. Lets take a look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(3):
    print &#39;Hello World!&#39;

Hello World!
Hello World!
Hello World!



while i &amp;gt; 0:
    print &#39;Hello World&#39;
    i -= 1

Hello World
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, they both serve different purposes. For loop is used when you want to run something for fixed amount of times, whereas while loop can theoretically run forever (if you use something like &lt;code&gt;while True:&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&#34;working-of-loops:43e605172a057b3ef2255df8d7d3f724&#34;&gt;Working of Loops&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve done any programming before, there&amp;rsquo;s no doubt you&amp;rsquo;ve come across a for loop or an equivalent to it. In Python, they work a little differently. Basically, any object with an iterable method can be used in a for loop in Python. Even strings, despite not having an iterable method - but we&amp;rsquo;ll not get on to that here. Having an iterable method basically means that the data can be presented in list form, where there&amp;rsquo;s multiple values in an orderly fashion. You can define your own iterables by creating an object with next() and iter() methods (We will use this in later parts of the module). This means that you&amp;rsquo;ll rarely be dealing with raw numbers when it comes to for loops in Python - great for just about anyone!&lt;/p&gt;

&lt;p&gt;When you have a piece of code that you want to run x number of times, then code within that code which you want to run y number of times, you can use what is known as nested loops. In python these are heavily used with list (especially when it is a list of lists).
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Nested Loops
for i in xrange(5, 10):
    for y in xrange(11, 15):
        print &#39;i: %s\ty: %s&#39;%(i, y)


i: 5    y: 11
i: 5    y: 12
i: 5    y: 13
i: 5    y: 14
i: 6    y: 11
i: 6    y: 12
i: 6    y: 13
i: 6    y: 14
i: 7    y: 11
i: 7    y: 12
i: 7    y: 13
i: 7    y: 14
i: 8    y: 11
i: 8    y: 12
i: 8    y: 13
i: 8    y: 14
i: 9    y: 11
i: 9    y: 12
i: 9    y: 13
i: 9    y: 14



# List of Lists
a = [[1,2,3], [4,5,6]]
for lists in a:
    for x in lists:
        print x

1
2
3
4
5
6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loop-control-statements:43e605172a057b3ef2255df8d7d3f724&#34;&gt;Loop Control Statements&lt;/h2&gt;

&lt;p&gt;Loop control statements change the executing of loop from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.&lt;/p&gt;

&lt;h3 id=&#34;break-statement:43e605172a057b3ef2255df8d7d3f724&#34;&gt;Break Statement&lt;/h3&gt;

&lt;p&gt;It terminates the current loop and resumes the execution at the next statement. The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. The break statement can be used in both while and for loops.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(1, 10):
    if i == 5:
        print &#39;Condition satisfied&#39;
        break
    print i  # What would happen if this is placed before if condition?

1
2
3
4
Condition satisfied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From above example you can observe that when the value of i reached 5, the if condition was satisfied and the break statement was executed which stopped the for loop and exited.&lt;/p&gt;

&lt;h3 id=&#34;continue:43e605172a057b3ef2255df8d7d3f724&#34;&gt;Continue&lt;/h3&gt;

&lt;p&gt;Continue statement returns the control to the beginning of the loop. The continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = 10
while x &amp;gt; 0:
    x -= 1
    if x == 8:
        print &#39;Condition satisfied&#39;
        continue
    print x

#What is the difference when use the same code but in a for loop?

9
Condition satisfied
7
6
5
4
3
2
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pass:43e605172a057b3ef2255df8d7d3f724&#34;&gt;Pass&lt;/h3&gt;

&lt;p&gt;Pass is used when a statement is required syntactically but performs a null operation i.e. nothing happens when the statement is executed.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(1, 10):
    if i == 5:
        print &#39;Condition satisfied&#39;
        pass
    print i

1
2
3
4
Condition satisfied
5
6
7
8
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see execution of pass statement had no effect on the flow of the code. It wouldn&amp;rsquo;t have mattered if it was not there. So when is it useful? It is generally used for temporary unimplemented logic. For example you have written a function and you are using if condition to test for something but before that you need to check the output of the code or just execute it. You can use pass statement. Python interpreter will read that and skip that part and get on with further execution.&lt;/p&gt;

&lt;h2 id=&#34;range-and-xrange:43e605172a057b3ef2255df8d7d3f724&#34;&gt;range and xrange&lt;/h2&gt;

&lt;p&gt;We used range and xrange in the examples of flow control statements. range function creates a list containing the numbers defined by the input. xrange on the other hand creates a number generator. The difference is very subtle but important based on what you are using it for. You will observe that xrange is used more frequently than the range function and the reason is resource usage. xrange generates (technically evaluates lazily) the numbers as needed whereas range creates the list of all the numbers at once. This means that using xrange less memory is used. Imagine a scenario where we are using loop control statements and somewhere in the code we need to exit the loop pre-maturely. If we use the range function, the memory is wasted creating the unused numbers. It might not sound like a big deal for small lists or small numbers but when you consider lists that hold data read from a csv file which has thousands of entries.. the difference is pretty significant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Operators</title>
      <link>http://sharmamohit.com/USCL/Python_Operators/</link>
      <pubDate>Sat, 30 May 2015 20:57:31 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Operators/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Operators&lt;/h1&gt;

&lt;p&gt;Operators in python are the constructs which can manipulate the value of operands. Simply put when operators are used with one or more than one operand, they produce some result. Consider a basic mathematical addition 1 + 2 in this case, 1 and 2 are operands and + is the operator. Operands can also be variables.
Python supports following types of operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arithmetic Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Relational (Comparison) Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assignment Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logical Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bitwise Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Membership Operators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Identity Operators&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arithmetic-operators:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Arithmetic Operators&lt;/h2&gt;

&lt;p&gt;As the name suggests, Arithmetic Operators includes all the operators to perform basic arithmetic functions.&lt;/p&gt;

&lt;h3 id=&#34;addition:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Addition (+)&lt;/h3&gt;

&lt;p&gt;Addition operator adds the value of the operands on its either side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 + 2




4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;subtraction:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Subtraction (-)&lt;/h3&gt;

&lt;p&gt;Subtracts right hand operand with the operand on the left hand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 - 2




0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiplication:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Multiplication ( * )&lt;/h3&gt;

&lt;p&gt;Multiplies the operands on its either sides and outputs the product.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 * 2




4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;division:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Division ( / )&lt;/h3&gt;

&lt;p&gt;Divides left hand operand with the right hand operand and outputs the quotient of the division.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2 / 2




1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;modulus:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Modulus ( % )&lt;/h3&gt;

&lt;p&gt;Divides left hand operand with the right hand operate and outputs the remainder of the division.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 % 2




0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exponential:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Exponential ( ** )&lt;/h3&gt;

&lt;p&gt;Performs exponential operation on the operands. The left hand operand is &amp;lsquo;raised to&amp;rsquo; the right hand operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 ** 4




256
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;floor-division:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Floor Division ( // )&lt;/h3&gt;

&lt;p&gt;Divides the left hand operand with the right hand operand and outputs the quotient of the division removing the digits after decimal point.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3.0 // 2




1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;relational-operators:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Relational Operators&lt;/h2&gt;

&lt;p&gt;Relational Operators compare the operands on either side and identifies the relation between them. These are also known as Comparison Operators.&lt;/p&gt;

&lt;h3 id=&#34;equal-to:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Equal to ( == )&lt;/h3&gt;

&lt;p&gt;If the value of the two operands are equal, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a, b = 10, 10


a == b




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;not-equal-to:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Not Equal to ( != )&lt;/h3&gt;

&lt;p&gt;If the value of two operands are not equal, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a != b




False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;greater-than:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Greater than ( &amp;gt; )&lt;/h3&gt;

&lt;p&gt;If the value of the operand on the left hand side of the operator is greater than the value of the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;gt; b




False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;less-than:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Less than ( &amp;lt; )&lt;/h3&gt;

&lt;p&gt;If the value of the operand on the left hand side of the operator is less than the value of the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;lt; b




False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;less-than-or-greater-than:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Less than OR Greater than ( &amp;lt;&amp;gt; )&lt;/h3&gt;

&lt;p&gt;If the value of the Operands on either side of the operator is not equal, the condition becomes true. It is equivalent to &amp;lsquo; != &amp;lsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;lt;&amp;gt; b




False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;greater-than-or-equal-to:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Greater than OR Equal to ( &amp;gt;= )&lt;/h3&gt;

&lt;p&gt;If the value of the operand on the left hand side of the operator is greater than or equal to the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;gt;= b




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;less-than-or-equal-to:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Less than OR Equal to ( &amp;lt;= )&lt;/h3&gt;

&lt;p&gt;If the value of the operand on the left hand side of the operator is less than or equal to the operand on the right hand side, the condition becomes true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a &amp;lt;= b




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;assignment-operators:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Assignment Operators&lt;/h2&gt;

&lt;p&gt;Assignment operator is responsible for assigning some value to a variable. Example a = 2 .We have been doing this for quite sometime now, but assignment operator can be used in many other ways.&lt;/p&gt;

&lt;h3 id=&#34;equals:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Equals ( = )&lt;/h3&gt;

&lt;p&gt;Assigns the value from right hand side operand to the left hand side operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Add AND ( += )&lt;/h3&gt;

&lt;p&gt;It is logically a two step process. In first step, the right hand side operand is added to the left hand side operand. In second step, the output of the first step is assigned to the operand on the left hand side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a += 10  # It is equivalent to a = a + 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;subtract-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Subtract AND ( -= )&lt;/h3&gt;

&lt;p&gt;It is also a two step process where the right operand is subtracted from the left operand and the result is assigned to the left operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a -= 10  # It is equivalent to a = a - 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiply-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Multiply AND ( *= )&lt;/h3&gt;

&lt;p&gt;The right operand is multiplied with the left operand and the result is assigned to the left operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a *= 10  # It is equivalent to a = a * 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;divide-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Divide AND ( /= )&lt;/h3&gt;

&lt;p&gt;The left operand is divided by the right operand and the quotient is assigned to the left operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a /= 10  # It is equivalent to a = a / 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;modulus-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Modulus AND ( %= )&lt;/h3&gt;

&lt;p&gt;It takes the modulus of the two operands and assigns the result to the left operand&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a %= 10  # It is equivalent to a = a % 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exponent-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Exponent AND ( **= )&lt;/h3&gt;

&lt;p&gt;It performs the exponential operation on the two operands and assigns the value to the left operand&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a **= 10  # It is equivalent to a = a ** 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;floor-division-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Floor Division AND ( //= )&lt;/h3&gt;

&lt;p&gt;It performs floor division and assigns the quotient to the left operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a //= 10 # It is equivalent to a = a // 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bitwise-operator:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Bitwise Operator&lt;/h2&gt;

&lt;p&gt;Bitwise operator works on bits and performs operations bit by bit. Before we jump into the operator, lets revise the concept of Bits. At the smallest scale in computers, the information is stored in bits. Consider bit as a smallest unit of storage, just like an atom. A bit can only store binary values i.e 0&amp;rsquo;s or 1&amp;rsquo;s (but not both). n bits can store 2 to the power of n values (n 0&amp;rsquo;s or 1&amp;rsquo;s). Practically a bit is  very small for storage purposes, thus we deal with bytes which is equal to 8 bits. Then comes KiloBytes and MegaBytes and so on.. To understand the working of bitwise operators, we need to convert the operands to bits.&lt;/p&gt;

&lt;p&gt;To understand the conversion between decimal and binary numbers, watch this video:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https:/youtube.com/v/H4BstqvgBow&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/H4BstqvgBow/0.jpg&#34; alt=&#34;IMAGE ALT TEXT HERE&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For examples below, we will be using a, b = 6, 10. In python binary equivalent can be obtained by using a built-in function bin() which basically converts the integer to binary representation. If you followed the tutorial video above you must be writing full 8-bit representation for even a small integer. Python&amp;rsquo;s bin() however only prints the bits that are necessary for representing the integer. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(6)   # To print the binary equivalent of integer 6




&#39;0b110&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It did not print leading zeros (0b00000110)&lt;/p&gt;

&lt;p&gt;The leading 0b is for python to understand that the string representation means a binary number and not a regular string. Lets dive into the bitwise operators.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s get going with our examples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a,b = 6, 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;binary-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Binary AND ( &amp;amp; )&lt;/h3&gt;

&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if and only if both the operands have 1 at same bit location&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(a &amp;amp; b)




&#39;0b10&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;### Binary OR ( | )
(The key above Return/ Enter key)&lt;/p&gt;

&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if both the operands do not have 0 at same bit location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(a | b)




&#39;0b1110&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;binary-xor:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Binary XOR ( ^ )&lt;/h3&gt;

&lt;p&gt;Operator uses two operands comparing them bit by bit. It outputs 1 if and only if both the operands do not have same bit value at same location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(a ^ b)




&#39;0b1100&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;binary-one-s-complement:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Binary One&amp;rsquo;s Complement ( ~ )&lt;/h3&gt;

&lt;p&gt;Operator uses single operand and toggles the bit value at every location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(~ a)




&#39;-0b111&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;binary-left-shift:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Binary Left Shift ( &amp;lt;&amp;lt; )&lt;/h3&gt;

&lt;p&gt;Operator shifts the bit location of the left operand towards left by the number of bits specified by the right operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(a &amp;lt;&amp;lt; 2)




&#39;0b11000&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;binary-right-shift:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Binary Right Shift ( &amp;gt;&amp;gt; )&lt;/h3&gt;

&lt;p&gt;Operator shifts the bit location of the left operand towards right by the number of bits specified by the right operand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin(a &amp;gt;&amp;gt; 2)




&#39;0b1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logical-operators:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Logical Operators&lt;/h2&gt;

&lt;p&gt;Python supports three logical operators viz AND, OR and NOT.&lt;/p&gt;

&lt;h3 id=&#34;and-and:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;AND ( and )&lt;/h3&gt;

&lt;p&gt;If both the operands are true, the condition becomes true.&lt;/p&gt;

&lt;h3 id=&#34;or-or:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;OR ( or )&lt;/h3&gt;

&lt;p&gt;If any of the two operands are true, the condition becomes true.&lt;/p&gt;

&lt;h3 id=&#34;not-not:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;NOT (not)&lt;/h3&gt;

&lt;p&gt;Reverses the logical state of the operand.&lt;/p&gt;

&lt;h2 id=&#34;membership-operator:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Membership Operator&lt;/h2&gt;

&lt;p&gt;This operator basically tests if the two operands are pointing at the same object or not. There are two types of membership operators:&lt;/p&gt;

&lt;p&gt;Is&lt;/p&gt;

&lt;p&gt;It evaluates to true if the operands on both the sides of the operator point to the same object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a =10


b = a


b is a




True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;is-not:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Is Not&lt;/h3&gt;

&lt;p&gt;It evaluates to true if both the operands do not point to the same object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a is not b




False
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;identity-operator:2fbacc9c8605581ed75ba1c473f93b28&#34;&gt;Identity Operator&lt;/h2&gt;

&lt;p&gt;It is same as the python&amp;rsquo;s Membership operator.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##Exercise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What will be the output of 3 / 2 ?
Is the output of 3.0/2 and 3 / 2 the same? Why or Why not?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Is &amp;lsquo;Six&amp;rsquo; == &amp;lsquo;six&amp;rsquo; ?If not, why?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Try assigning a to the power of 2, to the power of 2, to the power of 2 to a. (Check output of below code.)&lt;/p&gt;

&lt;p&gt;%%latex
$$a = {{a^2}^2}^2 $$&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$a = {{a^2}^2}^2 $$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement your own decimal to 8-bit binary converter. Convert decimal number 88 and see if the output is 01011000 .&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Consider an example below:&lt;/p&gt;

&lt;p&gt;a = 10
b = a&lt;/p&gt;

&lt;p&gt;a == b&lt;/p&gt;

&lt;p&gt;True&lt;/p&gt;

&lt;p&gt;a is b&lt;/p&gt;

&lt;p&gt;True&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the difference between &amp;lsquo; == &amp;rsquo; and &amp;lsquo; is &amp;rsquo; operator? Are they the same? What would happen if b is now assigned as 10 instead of a ?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python_Variables</title>
      <link>http://sharmamohit.com/USCL/Python_Variables/</link>
      <pubDate>Thu, 28 May 2015 21:56:15 -0400</pubDate>
      
      <guid>http://sharmamohit.com/USCL/Python_Variables/</guid>
      <description>

&lt;h1 align=&#39;center&#39;&gt;Python Variables&lt;/h1&gt;

&lt;p&gt;As the name implies, a variable is something which can change. A variable is just a way of referring to a memory location used by a python program. Consider a variable as a container to store certain values. Based on the datatype of the variable, the python interpreter allocates the memory and decides what can be stored in the reserved memory. This will be a rather short chapter.&lt;/p&gt;

&lt;h2 id=&#34;assigning-values-to-variables:16876a59f3d28e450c74604e39302824&#34;&gt;Assigning Values to Variables:&lt;/h2&gt;

&lt;p&gt;One of the main differences between Python and strongly types languages like C++ or Java is the way it deals with the data types. In languages like C++ or Java, every variable must have a unique data type i.e if a variable is of type string it cannot store integers or floats. Moreover every variable has to be declared before it can be used, thus binding it to the data type that can be stored in it. Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when a value is assigned to a variable. This means that a variable that was used to store a string can now be used to store an integer. Try it out. Do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s = &#39;I am in NYC&#39;  # s is a string
print s

I am in NYC



type(s)




str




s = 24  # Now s is an integer
print s

24



type(s)




int
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you see the type function that we used? Type is a built-in function that returns the datatype of anything.. and by anything, I mean absolutely anything (give it a spin!). It is one of the cool things in Python. We will talk about this and many other cool built-in functions in the later chapters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every language has some rules for naming the identifier of variables (the variable name). In Python, a valid identifier is a non-empty sequence of characters of any length with:&lt;/p&gt;

&lt;p&gt;The start of the character can be an underscore &amp;ldquo;_&amp;rdquo; or a capital or lower case letter. However it is generally recommended to use all upper case for global variables and all lower case for local variables.
The letters following the first letter can be a digit or a string.
Python is a case-sensitive language. Therefore, name is not equal to Name.
Python keywords cannot be used at identifier names (Keywords in Python are reserved words that cannot be used as ordinary identifiers.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;and&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;del&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;from&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;not&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;while&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;as&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;elif&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;global&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;or&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;with&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;assert&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;else&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;if&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;pass&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yield&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;break&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;except&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;import&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;print&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;class&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;exec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;raise&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;continue&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;finally&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;is&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;return&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;def&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;for&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;lambda&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;try&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;are python keywords)&lt;/p&gt;

&lt;h3 id=&#34;multiple-assignment:16876a59f3d28e450c74604e39302824&#34;&gt;Multiple Assignment&lt;/h3&gt;

&lt;p&gt;Python allows you to assign a single value to several variables simultaneously. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = y = z = a = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to use multiple assignment is to assign different values to different variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x, y, z, a = &#39;Hello&#39;, &#39;World&#39;, 1, 2
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Test the output of above variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;changing-storage-locations:16876a59f3d28e450c74604e39302824&#34;&gt;Changing Storage Locations&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at a very basic example of assignment operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 10.0


b = x


x = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first assignment is very basic, Python chooses a memory location for a and assigns 10.0 to it (Check a&amp;rsquo;s data type!). The second assignment is more interesting:
Intuitively, one may assume that Python will find another location for the b and copy the value 10.0 to it (Like C or C++) but Python has its own way which is very efficient. Since a and b both will have the same values, Python decides to let b point to the memory location of a. Very efficient, right? Look at the third assignment operation. We are changing the value of b to 20.0. In this case, b gets its own memory location (Unlike C or C++ where the value would&amp;rsquo;ve changed).
All this sounds good in theory, right? Let&amp;rsquo;s prove it..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 10.0


a




10.0




b = a


b




10.0




id(a)




48719400




id(b)




48719400




b = 20


b




20




a




10.0




id(a)




48719400




id(b)




42782640
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the id function used here. It is again a built-in function that returns an integer which is guaranteed to be unique and constant for that &amp;lsquo;object&amp;rsquo;. Consider it as a social security number for that &amp;lsquo;object&amp;rsquo;. For C, C++ programmers, it is conceptually like memory addresses. You won&amp;rsquo;t be using this function that often, but it&amp;rsquo;s handy to know how variables/ objects are being moved around in your program (many debuggers actually use this function to keep tab on flow of your code).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>